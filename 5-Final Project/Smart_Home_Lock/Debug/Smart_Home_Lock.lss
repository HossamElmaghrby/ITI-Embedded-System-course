
Smart_Home_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00004e9e  00004f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800172  00800172  00005044  2**0
                  ALLOC
  3 .debug_aranges 000006d0  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d01  00000000  00000000  00005714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000430a  00000000  00000000  00006415  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e15  00000000  00000000  0000a71f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000042ed  00000000  00000000  0000c534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009c0  00000000  00000000  00010824  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000010f9  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  000122dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000530  00000000  00000000  00012aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 06 10 	jmp	0x200c	; 0x200c <__vector_1>
       8:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__vector_2>
       c:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__vector_10>
      2c:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__vector_11>
      30:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__vector_12>
      34:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <main>
      8a:	0c 94 4d 27 	jmp	0x4e9a	; 0x4e9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e2       	ldi	r26, 0x2E	; 46
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e2       	ldi	r24, 0x2E	; 46
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 26 	jmp	0x4db0	; 0x4db0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f4 26 	jmp	0x4de8	; 0x4de8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_enuInit>:
#include "../USART/USART_config.h"
#include "USART_private.h"


ES_t USART_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <USART_enuInit+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <USART_enuInit+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8UCSRAvalue = 0;
     b56:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16UBRRvalue = 0;
     b58:	1a 82       	std	Y+2, r1	; 0x02
     b5a:	19 82       	std	Y+1, r1	; 0x01
	
	#if USART_SPEED == NORMAL_SPEED
	UCSRA &= ~(MASK_BIT << U2X);
     b5c:	ab e2       	ldi	r26, 0x2B	; 43
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	eb e2       	ldi	r30, 0x2B	; 43
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8d 7f       	andi	r24, 0xFD	; 253
     b68:	8c 93       	st	X, r24
	#if USART_MODE == TRANSMITTER
	UCSRB |= (MASK_BIT << TXEN);
	#elif USART_MODE == RECEIVER
	UCSRB |= (MASK_BIT << RXEN);
	#elif USART_MODE == TRANSCEIVER
	UCSRB |= (MASK_BIT << TXEN);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24
	UCSRB |= (MASK_BIT << RXEN);
     b78:	aa e2       	ldi	r26, 0x2A	; 42
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ea e2       	ldi	r30, 0x2A	; 42
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	8c 93       	st	X, r24
	#elif USART_DATA_LENGTH == SEVEN_DATA_LENGTH
	Local_u8UCSRAvalue &= ~(MASK_BIT << UCSZ0);
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ1);
	UCSRB &= ~(MASK_BIT << UCSZ2);
	#elif USART_DATA_LENGTH == EIGHT_DATA_LENGTH
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ0);
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue |=  (MASK_BIT << UCSZ1);
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	84 60       	ori	r24, 0x04	; 4
     b90:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB &= ~(MASK_BIT << UCSZ2);
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8b 7f       	andi	r24, 0xFB	; 251
     b9e:	8c 93       	st	X, r24
	#else
	#error "USART DATA LENGTH has a wrong configuration"
	#endif
	
	#if TRANSMITTION_MODE == ASYNCHRONOUS
	Local_u8UCSRAvalue &= ~(MASK_BIT << UMSEL);
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	8f 7b       	andi	r24, 0xBF	; 191
     ba4:	8b 83       	std	Y+3, r24	; 0x03
	#else
	#error "USART TRANSMITTION MODE has a wrong configuration"
	#endif
	
	#if PARITY_STATE == NO_PARITY
	Local_u8UCSRAvalue &= ~(MASK_BIT << UPM0);
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	8f 7e       	andi	r24, 0xEF	; 239
     baa:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue &= ~(MASK_BIT << UPM1);
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	8f 7d       	andi	r24, 0xDF	; 223
     bb0:	8b 83       	std	Y+3, r24	; 0x03
	#else
	#error "USART PARITY has a wrong configuration"
	#endif
	
	#if NO_STOP_BITS == ONE_STOP_BITS
	Local_u8UCSRAvalue &= ~(MASK_BIT << USBS);
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	87 7f       	andi	r24, 0xF7	; 247
     bb6:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRAvalue |=  (MASK_BIT << USBS);
	#else
	#error "USART STOP BITS has a wrong configuration"
	#endif
	
	Local_u8UCSRAvalue |= (MASK_BIT << URSEL);
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRAvalue;
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	80 83       	st	Z, r24
	
	
	Local_u16UBRRvalue = (u16)CALCULATE_BAUDRATE(USART_BAUD_RATE);
     bc6:	83 e3       	ldi	r24, 0x33	; 51
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
	
	Local_u16UBRRvalue &= ~(MASK_BIT << 15);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	9f 77       	andi	r25, 0x7F	; 127
     bd4:	9a 83       	std	Y+2, r25	; 0x02
     bd6:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (u8)Local_u16UBRRvalue;
     bd8:	e9 e2       	ldi	r30, 0x29	; 41
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	80 83       	st	Z, r24
	UBRRH = (Local_u16UBRRvalue >> 8);
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	89 2f       	mov	r24, r25
     bea:	99 27       	eor	r25, r25
     bec:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
     bee:	1c 82       	std	Y+4, r1	; 0x04
	
	return Local_enuErrorState;
     bf0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <USART_enuSendCharacter>:

ES_t USART_enuSendCharacter(u8 Copy_u8SendedChar)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	00 d0       	rcall	.+0      	; 0xc06 <USART_enuSendCharacter+0x6>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	89 83       	std	Y+1, r24	; 0x01
	
	while(!((UCSRA >> UDRE) & 1));
     c10:	eb e2       	ldi	r30, 0x2B	; 43
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 95       	swap	r24
     c18:	86 95       	lsr	r24
     c1a:	87 70       	andi	r24, 0x07	; 7
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	81 70       	andi	r24, 0x01	; 1
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	a1 f3       	breq	.-24     	; 0xc10 <USART_enuSendCharacter+0x10>
	UDR = Copy_u8SendedChar;
     c28:	ec e2       	ldi	r30, 0x2C	; 44
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	80 83       	st	Z, r24
	
	Local_enuErrorState = ES_OK;
     c30:	19 82       	std	Y+1, r1	; 0x01
	
	return Local_enuErrorState;
     c32:	89 81       	ldd	r24, Y+1	; 0x01
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <USART_enuReceiveCharacter>:

ES_t USART_enuReceiveCharacter(u8 *Copy_Pu8ReceivedChar)
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	00 d0       	rcall	.+0      	; 0xc44 <USART_enuReceiveCharacter+0x6>
     c44:	0f 92       	push	r0
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	9b 83       	std	Y+3, r25	; 0x03
     c4c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8ReceivedChar != NULL)
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	9b 81       	ldd	r25, Y+3	; 0x03
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	69 f0       	breq	.+26     	; 0xc74 <USART_enuReceiveCharacter+0x36>
	{
		while(!((UCSRA >> RXC) & 1));
     c5a:	eb e2       	ldi	r30, 0x2B	; 43
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	88 23       	and	r24, r24
     c62:	dc f7       	brge	.-10     	; 0xc5a <USART_enuReceiveCharacter+0x1c>
		*Copy_Pu8ReceivedChar = UDR;
     c64:	ec e2       	ldi	r30, 0x2C	; 44
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	ea 81       	ldd	r30, Y+2	; 0x02
     c6c:	fb 81       	ldd	r31, Y+3	; 0x03
     c6e:	80 83       	st	Z, r24
		
		Local_enuErrorState = ES_OK;
     c70:	19 82       	std	Y+1, r1	; 0x01
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <USART_enuReceiveCharacter+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
     c78:	89 81       	ldd	r24, Y+1	; 0x01
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <USART_enuSendString>:

ES_t USART_enuSendString(u8 *Copy_Pu8SendedString)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <USART_enuSendString+0x6>
     c8c:	0f 92       	push	r0
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	9b 83       	std	Y+3, r25	; 0x03
     c94:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8SendedString != NULL)
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	9b 81       	ldd	r25, Y+3	; 0x03
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	f9 f0       	breq	.+62     	; 0xce0 <USART_enuSendString+0x5a>
     ca2:	17 c0       	rjmp	.+46     	; 0xcd2 <USART_enuSendString+0x4c>
	{
		while(*Copy_Pu8SendedString != '\0')
		{
			while(!((UCSRA >> UDRE) & 1));
     ca4:	eb e2       	ldi	r30, 0x2B	; 43
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	82 95       	swap	r24
     cac:	86 95       	lsr	r24
     cae:	87 70       	andi	r24, 0x07	; 7
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	81 70       	andi	r24, 0x01	; 1
     cb6:	90 70       	andi	r25, 0x00	; 0
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	a1 f3       	breq	.-24     	; 0xca4 <USART_enuSendString+0x1e>
			UDR = *Copy_Pu8SendedString;
     cbc:	ac e2       	ldi	r26, 0x2C	; 44
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea 81       	ldd	r30, Y+2	; 0x02
     cc2:	fb 81       	ldd	r31, Y+3	; 0x03
     cc4:	80 81       	ld	r24, Z
     cc6:	8c 93       	st	X, r24
			Copy_Pu8SendedString++;
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	9b 81       	ldd	r25, Y+3	; 0x03
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	9b 83       	std	Y+3, r25	; 0x03
     cd0:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_Pu8SendedString != NULL)
	{
		while(*Copy_Pu8SendedString != '\0')
     cd2:	ea 81       	ldd	r30, Y+2	; 0x02
     cd4:	fb 81       	ldd	r31, Y+3	; 0x03
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	21 f7       	brne	.-56     	; 0xca4 <USART_enuSendString+0x1e>
			while(!((UCSRA >> UDRE) & 1));
			UDR = *Copy_Pu8SendedString;
			Copy_Pu8SendedString++;
		}
		
		Local_enuErrorState = ES_OK;
     cdc:	19 82       	std	Y+1, r1	; 0x01
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <USART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <USART_enuReceiveStringUntilEnter>:

/* we will stop receive string (end of string) when we press 'Enter' --> (\r = 13), \n */
ES_t USART_enuReceiveStringUntilEnter(u8 *Copy_Pu8ReceivedString)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <USART_enuReceiveStringUntilEnter+0x6>
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <USART_enuReceiveStringUntilEnter+0x8>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	9d 83       	std	Y+5, r25	; 0x05
     d02:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	8b 83       	std	Y+3, r24	; 0x03
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
     d08:	1a 82       	std	Y+2, r1	; 0x02
     d0a:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8ReceivedString != NULL)
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9d 81       	ldd	r25, Y+5	; 0x05
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	41 f1       	breq	.+80     	; 0xd64 <USART_enuReceiveStringUntilEnter+0x72>
	{
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
     d14:	eb e2       	ldi	r30, 0x2B	; 43
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	88 23       	and	r24, r24
     d1c:	dc f7       	brge	.-10     	; 0xd14 <USART_enuReceiveStringUntilEnter+0x22>
			Local_u8String = UDR;
     d1e:	ec e2       	ldi	r30, 0x2C	; 44
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8a 83       	std	Y+2, r24	; 0x02
			
			if(Local_u8String == '\r' || Local_u8String == '\n')
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	8d 30       	cpi	r24, 0x0D	; 13
     d2a:	19 f0       	breq	.+6      	; 0xd32 <USART_enuReceiveStringUntilEnter+0x40>
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	8a 30       	cpi	r24, 0x0A	; 10
     d30:	51 f4       	brne	.+20     	; 0xd46 <USART_enuReceiveStringUntilEnter+0x54>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	9d 81       	ldd	r25, Y+5	; 0x05
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 0f       	add	r30, r18
     d40:	f3 1f       	adc	r31, r19
     d42:	10 82       	st	Z, r1
     d44:	11 c0       	rjmp	.+34     	; 0xd68 <USART_enuReceiveStringUntilEnter+0x76>
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	9d 81       	ldd	r25, Y+5	; 0x05
     d50:	fc 01       	movw	r30, r24
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	80 83       	st	Z, r24
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	89 83       	std	Y+1, r24	; 0x01
			}
			
			Local_enuErrorState = ES_OK;
     d60:	1b 82       	std	Y+3, r1	; 0x03
     d62:	d8 cf       	rjmp	.-80     	; 0xd14 <USART_enuReceiveStringUntilEnter+0x22>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return Local_enuErrorState;
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <USART_enuReceiveStringWithKey>:


ES_t USART_enuReceiveStringWithKey(u8 *Copy_Pu8ReceivedString)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <USART_enuReceiveStringWithKey+0x6>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <USART_enuReceiveStringWithKey+0x8>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <USART_enuReceiveStringWithKey+0xa>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	8c 83       	std	Y+4, r24	; 0x04
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
     d90:	1b 82       	std	Y+3, r1	; 0x03
     d92:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8StringKey = 0;
     d94:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8ReceivedString != NULL)
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	79 f1       	breq	.+94     	; 0xdfc <USART_enuReceiveStringWithKey+0x82>
	{
		while(!((UCSRA >> RXC) & 1));
     d9e:	eb e2       	ldi	r30, 0x2B	; 43
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 23       	and	r24, r24
     da6:	dc f7       	brge	.-10     	; 0xd9e <USART_enuReceiveStringWithKey+0x24>
		Local_u8StringKey = UDR;
     da8:	ec e2       	ldi	r30, 0x2C	; 44
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	89 83       	std	Y+1, r24	; 0x01
		
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
     db0:	eb e2       	ldi	r30, 0x2B	; 43
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 23       	and	r24, r24
     db8:	dc f7       	brge	.-10     	; 0xdb0 <USART_enuReceiveStringWithKey+0x36>
			Local_u8String = UDR;
     dba:	ec e2       	ldi	r30, 0x2C	; 44
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8b 83       	std	Y+3, r24	; 0x03
			
			if(Local_u8String == Local_u8StringKey)
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	98 17       	cp	r25, r24
     dc8:	51 f4       	brne	.+20     	; 0xdde <USART_enuReceiveStringWithKey+0x64>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	fc 01       	movw	r30, r24
     dd6:	e2 0f       	add	r30, r18
     dd8:	f3 1f       	adc	r31, r19
     dda:	10 82       	st	Z, r1
     ddc:	11 c0       	rjmp	.+34     	; 0xe00 <USART_enuReceiveStringWithKey+0x86>
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	80 83       	st	Z, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	8a 83       	std	Y+2, r24	; 0x02
			}
			
			Local_enuErrorState = ES_OK;
     df8:	1c 82       	std	Y+4, r1	; 0x04
     dfa:	da cf       	rjmp	.-76     	; 0xdb0 <USART_enuReceiveStringWithKey+0x36>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	return Local_enuErrorState;
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e02:	26 96       	adiw	r28, 0x06	; 6
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <MCAL_UART_init>:
static u8 *TX_str ;
static u8 flag_send =1;

UART_config *Global_UART_cfg = NULL ;
void MCAL_UART_init(UART_TypeDef_t* UARTx , UART_config* UART_cfg)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <MCAL_UART_init+0x6>
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <MCAL_UART_init+0x8>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	7c 83       	std	Y+4, r23	; 0x04
     e26:	6b 83       	std	Y+3, r22	; 0x03

	Global_UART_cfg =UART_cfg ;
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	90 93 73 01 	sts	0x0173, r25
     e30:	80 93 72 01 	sts	0x0172, r24
	//specify the speed mode normal or double
	UARTx->_UCSRA = UART_cfg->Speed_Mode  ;
     e34:	eb 81       	ldd	r30, Y+3	; 0x03
     e36:	fc 81       	ldd	r31, Y+4	; 0x04
     e38:	81 85       	ldd	r24, Z+9	; 0x09
     e3a:	e9 81       	ldd	r30, Y+1	; 0x01
     e3c:	fa 81       	ldd	r31, Y+2	; 0x02
     e3e:	82 83       	std	Z+2, r24	; 0x02
	//Baud Rate
	if(UART_cfg->Speed_Mode == UART_Speed_Mode_Normal)
     e40:	eb 81       	ldd	r30, Y+3	; 0x03
     e42:	fc 81       	ldd	r31, Y+4	; 0x04
     e44:	81 85       	ldd	r24, Z+9	; 0x09
     e46:	88 23       	and	r24, r24
     e48:	a9 f4       	brne	.+42     	; 0xe74 <MCAL_UART_init+0x60>
	{
		UARTx->_UBRRL = BAUD(F_CPU ,UART_cfg->BaudRate ,16);
     e4a:	eb 81       	ldd	r30, Y+3	; 0x03
     e4c:	fc 81       	ldd	r31, Y+4	; 0x04
     e4e:	21 81       	ldd	r18, Z+1	; 0x01
     e50:	32 81       	ldd	r19, Z+2	; 0x02
     e52:	43 81       	ldd	r20, Z+3	; 0x03
     e54:	54 81       	ldd	r21, Z+4	; 0x04
     e56:	80 e2       	ldi	r24, 0x20	; 32
     e58:	91 ea       	ldi	r25, 0xA1	; 161
     e5a:	a7 e0       	ldi	r26, 0x07	; 7
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
     e66:	da 01       	movw	r26, r20
     e68:	c9 01       	movw	r24, r18
     e6a:	81 50       	subi	r24, 0x01	; 1
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	80 83       	st	Z, r24
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <MCAL_UART_init+0x88>

	}
	else
	{
		UARTx->_UBRRL = BAUD(F_CPU , UART_cfg->BaudRate ,8);
     e74:	eb 81       	ldd	r30, Y+3	; 0x03
     e76:	fc 81       	ldd	r31, Y+4	; 0x04
     e78:	21 81       	ldd	r18, Z+1	; 0x01
     e7a:	32 81       	ldd	r19, Z+2	; 0x02
     e7c:	43 81       	ldd	r20, Z+3	; 0x03
     e7e:	54 81       	ldd	r21, Z+4	; 0x04
     e80:	80 e4       	ldi	r24, 0x40	; 64
     e82:	92 e4       	ldi	r25, 0x42	; 66
     e84:	af e0       	ldi	r26, 0x0F	; 15
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
     e90:	da 01       	movw	r26, r20
     e92:	c9 01       	movw	r24, r18
     e94:	81 50       	subi	r24, 0x01	; 1
     e96:	e9 81       	ldd	r30, Y+1	; 0x01
     e98:	fa 81       	ldd	r31, Y+2	; 0x02
     e9a:	80 83       	st	Z, r24
	}
	//Frame

	//parity mode (NO Parity)
	UARTx->RC_RH._UCSRC |=UART_cfg->parity ;
     e9c:	e9 81       	ldd	r30, Y+1	; 0x01
     e9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ea0:	97 89       	ldd	r25, Z+23	; 0x17
     ea2:	eb 81       	ldd	r30, Y+3	; 0x03
     ea4:	fc 81       	ldd	r31, Y+4	; 0x04
     ea6:	86 81       	ldd	r24, Z+6	; 0x06
     ea8:	89 2b       	or	r24, r25
     eaa:	e9 81       	ldd	r30, Y+1	; 0x01
     eac:	fa 81       	ldd	r31, Y+2	; 0x02
     eae:	87 8b       	std	Z+23, r24	; 0x17

	// Character Size (8-bit size)
	if(UART_cfg->data_size == UART_data_Size_5B)
     eb0:	eb 81       	ldd	r30, Y+3	; 0x03
     eb2:	fc 81       	ldd	r31, Y+4	; 0x04
     eb4:	85 81       	ldd	r24, Z+5	; 0x05
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	b1 f4       	brne	.+44     	; 0xee6 <MCAL_UART_init+0xd2>
	{
		UARTx->RC_RH._UCSRC &=~(1<<1);
     eba:	e9 81       	ldd	r30, Y+1	; 0x01
     ebc:	fa 81       	ldd	r31, Y+2	; 0x02
     ebe:	87 89       	ldd	r24, Z+23	; 0x17
     ec0:	8d 7f       	andi	r24, 0xFD	; 253
     ec2:	e9 81       	ldd	r30, Y+1	; 0x01
     ec4:	fa 81       	ldd	r31, Y+2	; 0x02
     ec6:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->RC_RH._UCSRC &=~(1<<2);
     ec8:	e9 81       	ldd	r30, Y+1	; 0x01
     eca:	fa 81       	ldd	r31, Y+2	; 0x02
     ecc:	87 89       	ldd	r24, Z+23	; 0x17
     ece:	8b 7f       	andi	r24, 0xFB	; 251
     ed0:	e9 81       	ldd	r30, Y+1	; 0x01
     ed2:	fa 81       	ldd	r31, Y+2	; 0x02
     ed4:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->_UCSRB &=~(1<<2);
     ed6:	e9 81       	ldd	r30, Y+1	; 0x01
     ed8:	fa 81       	ldd	r31, Y+2	; 0x02
     eda:	81 81       	ldd	r24, Z+1	; 0x01
     edc:	8b 7f       	andi	r24, 0xFB	; 251
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	81 83       	std	Z+1, r24	; 0x01
     ee4:	6b c0       	rjmp	.+214    	; 0xfbc <MCAL_UART_init+0x1a8>
	}
	else if(UART_cfg->data_size == UART_data_Size_6B)
     ee6:	eb 81       	ldd	r30, Y+3	; 0x03
     ee8:	fc 81       	ldd	r31, Y+4	; 0x04
     eea:	85 81       	ldd	r24, Z+5	; 0x05
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	b1 f4       	brne	.+44     	; 0xf1c <MCAL_UART_init+0x108>
	{
		UARTx->RC_RH._UCSRC |=(1<<1);
     ef0:	e9 81       	ldd	r30, Y+1	; 0x01
     ef2:	fa 81       	ldd	r31, Y+2	; 0x02
     ef4:	87 89       	ldd	r24, Z+23	; 0x17
     ef6:	82 60       	ori	r24, 0x02	; 2
     ef8:	e9 81       	ldd	r30, Y+1	; 0x01
     efa:	fa 81       	ldd	r31, Y+2	; 0x02
     efc:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->RC_RH._UCSRC &=~(1<<2);
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	87 89       	ldd	r24, Z+23	; 0x17
     f04:	8b 7f       	andi	r24, 0xFB	; 251
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->_UCSRB &=~(1<<2);
     f0c:	e9 81       	ldd	r30, Y+1	; 0x01
     f0e:	fa 81       	ldd	r31, Y+2	; 0x02
     f10:	81 81       	ldd	r24, Z+1	; 0x01
     f12:	8b 7f       	andi	r24, 0xFB	; 251
     f14:	e9 81       	ldd	r30, Y+1	; 0x01
     f16:	fa 81       	ldd	r31, Y+2	; 0x02
     f18:	81 83       	std	Z+1, r24	; 0x01
     f1a:	50 c0       	rjmp	.+160    	; 0xfbc <MCAL_UART_init+0x1a8>
	}
	else if(UART_cfg->data_size == UART_data_Size_7B)
     f1c:	eb 81       	ldd	r30, Y+3	; 0x03
     f1e:	fc 81       	ldd	r31, Y+4	; 0x04
     f20:	85 81       	ldd	r24, Z+5	; 0x05
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	b1 f4       	brne	.+44     	; 0xf52 <MCAL_UART_init+0x13e>
	{
		UARTx->RC_RH._UCSRC &=~(1<<1);
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	87 89       	ldd	r24, Z+23	; 0x17
     f2c:	8d 7f       	andi	r24, 0xFD	; 253
     f2e:	e9 81       	ldd	r30, Y+1	; 0x01
     f30:	fa 81       	ldd	r31, Y+2	; 0x02
     f32:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->RC_RH._UCSRC |=(1<<2);
     f34:	e9 81       	ldd	r30, Y+1	; 0x01
     f36:	fa 81       	ldd	r31, Y+2	; 0x02
     f38:	87 89       	ldd	r24, Z+23	; 0x17
     f3a:	84 60       	ori	r24, 0x04	; 4
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->_UCSRB &=~(1<<2);
     f42:	e9 81       	ldd	r30, Y+1	; 0x01
     f44:	fa 81       	ldd	r31, Y+2	; 0x02
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	8b 7f       	andi	r24, 0xFB	; 251
     f4a:	e9 81       	ldd	r30, Y+1	; 0x01
     f4c:	fa 81       	ldd	r31, Y+2	; 0x02
     f4e:	81 83       	std	Z+1, r24	; 0x01
     f50:	35 c0       	rjmp	.+106    	; 0xfbc <MCAL_UART_init+0x1a8>
	}
	else if(UART_cfg->data_size == UART_data_Size_8B)
     f52:	eb 81       	ldd	r30, Y+3	; 0x03
     f54:	fc 81       	ldd	r31, Y+4	; 0x04
     f56:	85 81       	ldd	r24, Z+5	; 0x05
     f58:	84 30       	cpi	r24, 0x04	; 4
     f5a:	b1 f4       	brne	.+44     	; 0xf88 <MCAL_UART_init+0x174>
	{
		UARTx->RC_RH._UCSRC |=(1<<1);
     f5c:	e9 81       	ldd	r30, Y+1	; 0x01
     f5e:	fa 81       	ldd	r31, Y+2	; 0x02
     f60:	87 89       	ldd	r24, Z+23	; 0x17
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->RC_RH._UCSRC |=(1<<2);
     f6a:	e9 81       	ldd	r30, Y+1	; 0x01
     f6c:	fa 81       	ldd	r31, Y+2	; 0x02
     f6e:	87 89       	ldd	r24, Z+23	; 0x17
     f70:	84 60       	ori	r24, 0x04	; 4
     f72:	e9 81       	ldd	r30, Y+1	; 0x01
     f74:	fa 81       	ldd	r31, Y+2	; 0x02
     f76:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->_UCSRB &=~(1<<2);
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	81 81       	ldd	r24, Z+1	; 0x01
     f7e:	8b 7f       	andi	r24, 0xFB	; 251
     f80:	e9 81       	ldd	r30, Y+1	; 0x01
     f82:	fa 81       	ldd	r31, Y+2	; 0x02
     f84:	81 83       	std	Z+1, r24	; 0x01
     f86:	1a c0       	rjmp	.+52     	; 0xfbc <MCAL_UART_init+0x1a8>
	}
	else if(UART_cfg->data_size == UART_data_Size_9B)
     f88:	eb 81       	ldd	r30, Y+3	; 0x03
     f8a:	fc 81       	ldd	r31, Y+4	; 0x04
     f8c:	85 81       	ldd	r24, Z+5	; 0x05
     f8e:	85 30       	cpi	r24, 0x05	; 5
     f90:	a9 f4       	brne	.+42     	; 0xfbc <MCAL_UART_init+0x1a8>
	{
		UARTx->RC_RH._UCSRC |=(1<<1);
     f92:	e9 81       	ldd	r30, Y+1	; 0x01
     f94:	fa 81       	ldd	r31, Y+2	; 0x02
     f96:	87 89       	ldd	r24, Z+23	; 0x17
     f98:	82 60       	ori	r24, 0x02	; 2
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->RC_RH._UCSRC |=(1<<2);
     fa0:	e9 81       	ldd	r30, Y+1	; 0x01
     fa2:	fa 81       	ldd	r31, Y+2	; 0x02
     fa4:	87 89       	ldd	r24, Z+23	; 0x17
     fa6:	84 60       	ori	r24, 0x04	; 4
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	87 8b       	std	Z+23, r24	; 0x17
		UARTx->_UCSRB |=(1<<2);
     fae:	e9 81       	ldd	r30, Y+1	; 0x01
     fb0:	fa 81       	ldd	r31, Y+2	; 0x02
     fb2:	81 81       	ldd	r24, Z+1	; 0x01
     fb4:	84 60       	ori	r24, 0x04	; 4
     fb6:	e9 81       	ldd	r30, Y+1	; 0x01
     fb8:	fa 81       	ldd	r31, Y+2	; 0x02
     fba:	81 83       	std	Z+1, r24	; 0x01
	}

	UARTx->RC_RH._UCSRC|=UART_cfg->StopBit ;
     fbc:	e9 81       	ldd	r30, Y+1	; 0x01
     fbe:	fa 81       	ldd	r31, Y+2	; 0x02
     fc0:	97 89       	ldd	r25, Z+23	; 0x17
     fc2:	eb 81       	ldd	r30, Y+3	; 0x03
     fc4:	fc 81       	ldd	r31, Y+4	; 0x04
     fc6:	87 81       	ldd	r24, Z+7	; 0x07
     fc8:	89 2b       	or	r24, r25
     fca:	e9 81       	ldd	r30, Y+1	; 0x01
     fcc:	fa 81       	ldd	r31, Y+2	; 0x02
     fce:	87 8b       	std	Z+23, r24	; 0x17

	//interrupt enable
	UARTx->_UCSRB |= UART_cfg->IRQ_Enable ;
     fd0:	e9 81       	ldd	r30, Y+1	; 0x01
     fd2:	fa 81       	ldd	r31, Y+2	; 0x02
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	eb 81       	ldd	r30, Y+3	; 0x03
     fd8:	fc 81       	ldd	r31, Y+4	; 0x04
     fda:	80 85       	ldd	r24, Z+8	; 0x08
     fdc:	89 2b       	or	r24, r25
     fde:	e9 81       	ldd	r30, Y+1	; 0x01
     fe0:	fa 81       	ldd	r31, Y+2	; 0x02
     fe2:	81 83       	std	Z+1, r24	; 0x01
	//Enable
	UARTx->_UCSRB |= UART_cfg->USART_Mode ;
     fe4:	e9 81       	ldd	r30, Y+1	; 0x01
     fe6:	fa 81       	ldd	r31, Y+2	; 0x02
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
     fea:	eb 81       	ldd	r30, Y+3	; 0x03
     fec:	fc 81       	ldd	r31, Y+4	; 0x04
     fee:	80 81       	ld	r24, Z
     ff0:	89 2b       	or	r24, r25
     ff2:	e9 81       	ldd	r30, Y+1	; 0x01
     ff4:	fa 81       	ldd	r31, Y+2	; 0x02
     ff6:	81 83       	std	Z+1, r24	; 0x01

}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <MCAL_UART_Send>:
void MCAL_UART_Send(u8 data)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA , UDRE));
    1012:	eb e2       	ldi	r30, 0x2B	; 43
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	82 95       	swap	r24
    101a:	86 95       	lsr	r24
    101c:	87 70       	andi	r24, 0x07	; 7
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	a1 f3       	breq	.-24     	; 0x1012 <MCAL_UART_Send+0xc>
	UDR = data ;
    102a:	ec e2       	ldi	r30, 0x2C	; 44
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	80 83       	st	Z, r24
}
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <MCAL_UART_Receive>:
u8 MCAL_UART_Receive(void)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,RXC)));
    1042:	eb e2       	ldi	r30, 0x2B	; 43
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 23       	and	r24, r24
    104a:	dc f7       	brge	.-10     	; 0x1042 <MCAL_UART_Receive+0x8>
	return UDR ;
    104c:	ec e2       	ldi	r30, 0x2C	; 44
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <MCAL_UART_SndNumberU32>:

void  MCAL_UART_SndNumberU32(u32 NUM)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <MCAL_UART_SndNumberU32+0x6>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <MCAL_UART_SndNumberU32+0x8>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <MCAL_UART_SndNumberU32+0xa>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	6b 83       	std	Y+3, r22	; 0x03
    1068:	7c 83       	std	Y+4, r23	; 0x04
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	9e 83       	std	Y+6, r25	; 0x06
	u8 *p =&NUM ;
    106e:	ce 01       	movw	r24, r28
    1070:	03 96       	adiw	r24, 0x03	; 3
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01

	MCAL_UART_Send(p[0]);
    1076:	e9 81       	ldd	r30, Y+1	; 0x01
    1078:	fa 81       	ldd	r31, Y+2	; 0x02
    107a:	80 81       	ld	r24, Z
    107c:	0e 94 03 08 	call	0x1006	; 0x1006 <MCAL_UART_Send>
	MCAL_UART_Send(p[1]);
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	fc 01       	movw	r30, r24
    1086:	31 96       	adiw	r30, 0x01	; 1
    1088:	80 81       	ld	r24, Z
    108a:	0e 94 03 08 	call	0x1006	; 0x1006 <MCAL_UART_Send>
	MCAL_UART_Send(p[2]);
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	fc 01       	movw	r30, r24
    1094:	32 96       	adiw	r30, 0x02	; 2
    1096:	80 81       	ld	r24, Z
    1098:	0e 94 03 08 	call	0x1006	; 0x1006 <MCAL_UART_Send>
	MCAL_UART_Send(p[3]);
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	fc 01       	movw	r30, r24
    10a2:	33 96       	adiw	r30, 0x03	; 3
    10a4:	80 81       	ld	r24, Z
    10a6:	0e 94 03 08 	call	0x1006	; 0x1006 <MCAL_UART_Send>
}
    10aa:	26 96       	adiw	r28, 0x06	; 6
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <MCAL_UART_ReceiveNumberU32>:
u32 MCAL_UART_ReceiveNumberU32(void)
{
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <MCAL_UART_ReceiveNumberU32+0xa>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <MCAL_UART_ReceiveNumberU32+0xc>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <MCAL_UART_ReceiveNumberU32+0xe>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	u32 num;
	u8 *p = &num;
    10ce:	ce 01       	movw	r24, r28
    10d0:	03 96       	adiw	r24, 0x03	; 3
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01

	p[0]=MCAL_UART_Receive();
    10d6:	0e 94 1d 08 	call	0x103a	; 0x103a <MCAL_UART_Receive>
    10da:	e9 81       	ldd	r30, Y+1	; 0x01
    10dc:	fa 81       	ldd	r31, Y+2	; 0x02
    10de:	80 83       	st	Z, r24
	p[1]=MCAL_UART_Receive();
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	8c 01       	movw	r16, r24
    10e6:	0f 5f       	subi	r16, 0xFF	; 255
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	0e 94 1d 08 	call	0x103a	; 0x103a <MCAL_UART_Receive>
    10ee:	f8 01       	movw	r30, r16
    10f0:	80 83       	st	Z, r24
	p[2]=MCAL_UART_Receive();
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	8c 01       	movw	r16, r24
    10f8:	0e 5f       	subi	r16, 0xFE	; 254
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	0e 94 1d 08 	call	0x103a	; 0x103a <MCAL_UART_Receive>
    1100:	f8 01       	movw	r30, r16
    1102:	80 83       	st	Z, r24
	p[3]=MCAL_UART_Receive();
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	8c 01       	movw	r16, r24
    110a:	0d 5f       	subi	r16, 0xFD	; 253
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	0e 94 1d 08 	call	0x103a	; 0x103a <MCAL_UART_Receive>
    1112:	f8 01       	movw	r30, r16
    1114:	80 83       	st	Z, r24

	return num ;
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	ad 81       	ldd	r26, Y+5	; 0x05
    111c:	be 81       	ldd	r27, Y+6	; 0x06
}
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	26 96       	adiw	r28, 0x06	; 6
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	08 95       	ret

00001138 <MCAL_UART_Send_Str>:

void MCAL_UART_Send_Str(u8 *str)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <MCAL_UART_Send_Str+0x6>
    113e:	0f 92       	push	r0
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9b 83       	std	Y+3, r25	; 0x03
    1146:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	0e c0       	rjmp	.+28     	; 0x1168 <MCAL_UART_Send_Str+0x30>
	while(str[i] > 0)
	{
		MCAL_UART_Send(str[i]);
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	9b 81       	ldd	r25, Y+3	; 0x03
    1156:	fc 01       	movw	r30, r24
    1158:	e2 0f       	add	r30, r18
    115a:	f3 1f       	adc	r31, r19
    115c:	80 81       	ld	r24, Z
    115e:	0e 94 03 08 	call	0x1006	; 0x1006 <MCAL_UART_Send>
		i++;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	89 83       	std	Y+1, r24	; 0x01
}

void MCAL_UART_Send_Str(u8 *str)
{
	u8 i =0;
	while(str[i] > 0)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	80 81       	ld	r24, Z
    117a:	88 23       	and	r24, r24
    117c:	39 f7       	brne	.-50     	; 0x114c <MCAL_UART_Send_Str+0x14>
	{
		MCAL_UART_Send(str[i]);
		i++;
	}
	MCAL_UART_Send('\r');
    117e:	8d e0       	ldi	r24, 0x0D	; 13
    1180:	0e 94 03 08 	call	0x1006	; 0x1006 <MCAL_UART_Send>
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <MCAL_UART_Receive_Str>:
void MCAL_UART_Receive_Str(u8 *str)
{
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <MCAL_UART_Receive_Str+0xa>
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9b 83       	std	Y+3, r25	; 0x03
    11a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0 ;
    11a4:	19 82       	std	Y+1, r1	; 0x01
	str[i] = MCAL_UART_Receive();
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	9b 81       	ldd	r25, Y+3	; 0x03
    11b0:	8c 01       	movw	r16, r24
    11b2:	02 0f       	add	r16, r18
    11b4:	13 1f       	adc	r17, r19
    11b6:	0e 94 1d 08 	call	0x103a	; 0x103a <MCAL_UART_Receive>
    11ba:	f8 01       	movw	r30, r16
    11bc:	80 83       	st	Z, r24
    11be:	0f c0       	rjmp	.+30     	; 0x11de <MCAL_UART_Receive_Str+0x4e>
	while(str[i]  != '\r')
	{
		i++ ;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	89 83       	std	Y+1, r24	; 0x01
		str[i]= MCAL_UART_Receive();
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	8c 01       	movw	r16, r24
    11d2:	02 0f       	add	r16, r18
    11d4:	13 1f       	adc	r17, r19
    11d6:	0e 94 1d 08 	call	0x103a	; 0x103a <MCAL_UART_Receive>
    11da:	f8 01       	movw	r30, r16
    11dc:	80 83       	st	Z, r24
}
void MCAL_UART_Receive_Str(u8 *str)
{
	u8 i =0 ;
	str[i] = MCAL_UART_Receive();
	while(str[i]  != '\r')
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	fc 01       	movw	r30, r24
    11ea:	e2 0f       	add	r30, r18
    11ec:	f3 1f       	adc	r31, r19
    11ee:	80 81       	ld	r24, Z
    11f0:	8d 30       	cpi	r24, 0x0D	; 13
    11f2:	31 f7       	brne	.-52     	; 0x11c0 <MCAL_UART_Receive_Str+0x30>
	{
		i++ ;
		str[i]= MCAL_UART_Receive();
	}
	str[i]='\0';
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	9b 81       	ldd	r25, Y+3	; 0x03
    11fe:	fc 01       	movw	r30, r24
    1200:	e2 0f       	add	r30, r18
    1202:	f3 1f       	adc	r31, r19
    1204:	10 82       	st	Z, r1
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <MCAL_UART_Receive_perodicCheck>:

u8 MCAL_UART_Receive_perodicCheck( u8 *data)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <MCAL_UART_Receive_perodicCheck+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA , RXC))
    1226:	eb e2       	ldi	r30, 0x2B	; 43
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	88 23       	and	r24, r24
    122e:	4c f4       	brge	.+18     	; 0x1242 <MCAL_UART_Receive_perodicCheck+0x2c>
	{
		*data = UDR ;
    1230:	ec e2       	ldi	r30, 0x2C	; 44
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	e9 81       	ldd	r30, Y+1	; 0x01
    1238:	fa 81       	ldd	r31, Y+2	; 0x02
    123a:	80 83       	st	Z, r24
		return 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <MCAL_UART_Receive_perodicCheck+0x2e>
	}
	return 0;
    1242:	1b 82       	std	Y+3, r1	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <MCAL_UART_SendNoBlock>:

void MCAL_UART_SendNoBlock(u8 data)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
	UDR = data ;
    125e:	ec e2       	ldi	r30, 0x2C	; 44
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	80 83       	st	Z, r24
}
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <MCAL_UART_ReceiveNoBlock>:
u8 MCAL_UART_ReceiveNoBlock(void)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	return UDR ;
    1276:	ec e2       	ldi	r30, 0x2C	; 44
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <MCAL_UART_SendString_Asynch>:

void MCAL_UART_SendString_Asynch(u8 * str)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <MCAL_UART_SendString_Asynch+0x6>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	9a 83       	std	Y+2, r25	; 0x02
    128e:	89 83       	std	Y+1, r24	; 0x01
	if(flag_send ==1)
    1290:	80 91 36 01 	lds	r24, 0x0136
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	39 f4       	brne	.+14     	; 0x12a6 <MCAL_UART_SendString_Asynch+0x24>
	{
		UART_Interrupt_Enable_TXCIE;
		// TX_str =str ;
		MCAL_UART_SendNoBlock(str[0]);
    1298:	e9 81       	ldd	r30, Y+1	; 0x01
    129a:	fa 81       	ldd	r31, Y+2	; 0x02
    129c:	80 81       	ld	r24, Z
    129e:	0e 94 29 09 	call	0x1252	; 0x1252 <MCAL_UART_SendNoBlock>

		flag_send = 0;
    12a2:	10 92 36 01 	sts	0x0136, r1
	}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <ISR>:

void ISR(int USART_TXC_vect)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <ISR+0x6>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01
	static u8 i= 1;
	if(TX_str[i] != 1)
    12be:	20 91 74 01 	lds	r18, 0x0174
    12c2:	30 91 75 01 	lds	r19, 0x0175
    12c6:	80 91 37 01 	lds	r24, 0x0137
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	e8 0f       	add	r30, r24
    12d2:	f9 1f       	adc	r31, r25
    12d4:	80 81       	ld	r24, Z
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	a1 f0       	breq	.+40     	; 0x1302 <ISR+0x52>
	{
		MCAL_UART_SendNoBlock(TX_str[i]);
    12da:	20 91 74 01 	lds	r18, 0x0174
    12de:	30 91 75 01 	lds	r19, 0x0175
    12e2:	80 91 37 01 	lds	r24, 0x0137
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	f9 01       	movw	r30, r18
    12ec:	e8 0f       	add	r30, r24
    12ee:	f9 1f       	adc	r31, r25
    12f0:	80 81       	ld	r24, Z
    12f2:	0e 94 29 09 	call	0x1252	; 0x1252 <MCAL_UART_SendNoBlock>
		i++;
    12f6:	80 91 37 01 	lds	r24, 0x0137
    12fa:	8f 5f       	subi	r24, 0xFF	; 255
    12fc:	80 93 37 01 	sts	0x0137, r24
    1300:	06 c0       	rjmp	.+12     	; 0x130e <ISR+0x5e>
	}
	else
	{
		i=1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	80 93 37 01 	sts	0x0137, r24
		flag_send= 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 36 01 	sts	0x0136, r24
	}
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <__vector_13>:

void __vector_13(void)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
	u8 state = UDR ;
    1322:	ec e2       	ldi	r30, 0x2C	; 44
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	89 83       	std	Y+1, r24	; 0x01
	Global_UART_cfg->P_IRQ_CallBack(state);
    132a:	e0 91 72 01 	lds	r30, 0x0172
    132e:	f0 91 73 01 	lds	r31, 0x0173
    1332:	02 84       	ldd	r0, Z+10	; 0x0a
    1334:	f3 85       	ldd	r31, Z+11	; 0x0b
    1336:	e0 2d       	mov	r30, r0
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	09 95       	icall
}
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <TIM1_voidInit>:
void (* tim1_callback_ptr)(void);

///////////////////////////////////////
// Normal Mode
void TIM1_voidInit(void)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
    134c:	ec e4       	ldi	r30, 0x4C	; 76
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	11 82       	std	Z+1, r1	; 0x01
    1352:	10 82       	st	Z, r1

	/* Select Normal (OVF) Mode */
	CLEAR_BIT(TCCR1A_Register, WGM10);
    1354:	af e4       	ldi	r26, 0x4F	; 79
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ef e4       	ldi	r30, 0x4F	; 79
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8e 7f       	andi	r24, 0xFE	; 254
    1360:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_Register, WGM11);
    1362:	af e4       	ldi	r26, 0x4F	; 79
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ef e4       	ldi	r30, 0x4F	; 79
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8d 7f       	andi	r24, 0xFD	; 253
    136e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM12);
    1370:	ae e4       	ldi	r26, 0x4E	; 78
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ee e4       	ldi	r30, 0x4E	; 78
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	87 7f       	andi	r24, 0xF7	; 247
    137c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM13);
    137e:	ae e4       	ldi	r26, 0x4E	; 78
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ee e4       	ldi	r30, 0x4E	; 78
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8f 7e       	andi	r24, 0xEF	; 239
    138a:	8c 93       	st	X, r24


	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
    138c:	ae e4       	ldi	r26, 0x4E	; 78
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ee e4       	ldi	r30, 0x4E	; 78
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8e 7f       	andi	r24, 0xFE	; 254
    1398:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
    139a:	ae e4       	ldi	r26, 0x4E	; 78
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	ee e4       	ldi	r30, 0x4E	; 78
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	82 60       	ori	r24, 0x02	; 2
    13a6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
    13a8:	ae e4       	ldi	r26, 0x4E	; 78
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ee e4       	ldi	r30, 0x4E	; 78
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8b 7f       	andi	r24, 0xFB	; 251
    13b4:	8c 93       	st	X, r24

}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <TIM1_voidICUInit>:

///////////////////////////////////////
// ICU Mode

void TIM1_voidICUInit(void)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
    13c4:	ec e4       	ldi	r30, 0x4C	; 76
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	11 82       	std	Z+1, r1	; 0x01
    13ca:	10 82       	st	Z, r1

	/* Select Normal (OVF) Mode */
	CLEAR_BIT(TCCR1A_Register, WGM10);
    13cc:	af e4       	ldi	r26, 0x4F	; 79
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ef e4       	ldi	r30, 0x4F	; 79
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_Register, WGM11);
    13da:	af e4       	ldi	r26, 0x4F	; 79
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ef e4       	ldi	r30, 0x4F	; 79
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8d 7f       	andi	r24, 0xFD	; 253
    13e6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM12);
    13e8:	ae e4       	ldi	r26, 0x4E	; 78
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ee e4       	ldi	r30, 0x4E	; 78
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	87 7f       	andi	r24, 0xF7	; 247
    13f4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM13);
    13f6:	ae e4       	ldi	r26, 0x4E	; 78
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ee e4       	ldi	r30, 0x4E	; 78
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 7e       	andi	r24, 0xEF	; 239
    1402:	8c 93       	st	X, r24

	/* Enable Input Capture Interrupt */
	SET_BIT(TIMSK_Register, TICIE1);
    1404:	a9 e5       	ldi	r26, 0x59	; 89
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e9 e5       	ldi	r30, 0x59	; 89
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 62       	ori	r24, 0x20	; 32
    1410:	8c 93       	st	X, r24

	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
    1412:	ae e4       	ldi	r26, 0x4E	; 78
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ee e4       	ldi	r30, 0x4E	; 78
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8e 7f       	andi	r24, 0xFE	; 254
    141e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
    1420:	ae e4       	ldi	r26, 0x4E	; 78
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ee e4       	ldi	r30, 0x4E	; 78
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	82 60       	ori	r24, 0x02	; 2
    142c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
    142e:	ae e4       	ldi	r26, 0x4E	; 78
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	ee e4       	ldi	r30, 0x4E	; 78
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8b 7f       	andi	r24, 0xFB	; 251
    143a:	8c 93       	st	X, r24

}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <TIM1_SetEdge>:

void TIM1_SetEdge(u8 edge)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <TIM1_SetEdge+0x6>
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	89 83       	std	Y+1, r24	; 0x01
	switch(edge)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3b 83       	std	Y+3, r19	; 0x03
    1458:	2a 83       	std	Y+2, r18	; 0x02
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	9b 81       	ldd	r25, Y+3	; 0x03
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f0       	breq	.+26     	; 0x147c <TIM1_SetEdge+0x3a>
    1462:	2a 81       	ldd	r18, Y+2	; 0x02
    1464:	3b 81       	ldd	r19, Y+3	; 0x03
    1466:	21 30       	cpi	r18, 0x01	; 1
    1468:	31 05       	cpc	r19, r1
    146a:	79 f4       	brne	.+30     	; 0x148a <TIM1_SetEdge+0x48>
	{
	case ICU_EDGE_FALLING: CLEAR_BIT(TCCR1B_Register, ICES1); break;
    146c:	ae e4       	ldi	r26, 0x4E	; 78
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ee e4       	ldi	r30, 0x4E	; 78
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8f 7b       	andi	r24, 0xBF	; 191
    1478:	8c 93       	st	X, r24
    147a:	07 c0       	rjmp	.+14     	; 0x148a <TIM1_SetEdge+0x48>
	case ICU_EDGE_RISING: SET_BIT(TCCR1B_Register, ICES1); break;
    147c:	ae e4       	ldi	r26, 0x4E	; 78
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ee e4       	ldi	r30, 0x4E	; 78
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	80 64       	ori	r24, 0x40	; 64
    1488:	8c 93       	st	X, r24
	}
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <TIM1_GetICRValue>:

u16 TIM1_GetICRValue(void)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	return ICR1_Register;
    149e:	e6 e4       	ldi	r30, 0x46	; 70
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <TIM1_setCallback>:

void TIM1_setCallback(void (* ptr)(void))
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <TIM1_setCallback+0x6>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
	tim1_callback_ptr = ptr;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	90 93 8d 01 	sts	0x018D, r25
    14c2:	80 93 8c 01 	sts	0x018C, r24
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <__vector_6>:


void __vector_6(void)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	2f 93       	push	r18
    14dc:	3f 93       	push	r19
    14de:	4f 93       	push	r20
    14e0:	5f 93       	push	r21
    14e2:	6f 93       	push	r22
    14e4:	7f 93       	push	r23
    14e6:	8f 93       	push	r24
    14e8:	9f 93       	push	r25
    14ea:	af 93       	push	r26
    14ec:	bf 93       	push	r27
    14ee:	ef 93       	push	r30
    14f0:	ff 93       	push	r31
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	tim1_callback_ptr();
    14fa:	e0 91 8c 01 	lds	r30, 0x018C
    14fe:	f0 91 8d 01 	lds	r31, 0x018D
    1502:	09 95       	icall
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	ff 91       	pop	r31
    150a:	ef 91       	pop	r30
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	0f 90       	pop	r0
    1526:	1f 90       	pop	r1
    1528:	18 95       	reti

0000152a <TIM1_GetCounterValueUs>:

////////////////////////////////////////////////
/// Normal

u16 TIM1_GetCounterValueUs(void)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_Register;
    1532:	ec e4       	ldi	r30, 0x4C	; 76
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <TIM1_ClearCounterValue>:

void TIM1_ClearCounterValue(void)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
    1548:	ec e4       	ldi	r30, 0x4C	; 76
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	11 82       	std	Z+1, r1	; 0x01
    154e:	10 82       	st	Z, r1
}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <TIM1_voidFPWMInit>:


///////////////////////////////////////
// PWM Mode
void TIM1_voidFPWMInit(u16 period_us)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <TIM1_voidFPWMInit+0x6>
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Register = 0;
    1564:	ec e4       	ldi	r30, 0x4C	; 76
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	11 82       	std	Z+1, r1	; 0x01
    156a:	10 82       	st	Z, r1

	/* Select Mode 14 (Fast PWM) */
	CLEAR_BIT(TCCR1A_Register, WGM10);
    156c:	af e4       	ldi	r26, 0x4F	; 79
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ef e4       	ldi	r30, 0x4F	; 79
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8e 7f       	andi	r24, 0xFE	; 254
    1578:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register, WGM11);
    157a:	af e4       	ldi	r26, 0x4F	; 79
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ef e4       	ldi	r30, 0x4F	; 79
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	82 60       	ori	r24, 0x02	; 2
    1586:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, WGM12);
    1588:	ae e4       	ldi	r26, 0x4E	; 78
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ee e4       	ldi	r30, 0x4E	; 78
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	88 60       	ori	r24, 0x08	; 8
    1594:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, WGM13);
    1596:	ae e4       	ldi	r26, 0x4E	; 78
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ee e4       	ldi	r30, 0x4E	; 78
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 61       	ori	r24, 0x10	; 16
    15a2:	8c 93       	st	X, r24

	/* Select OC1A mode */
	TCCR1A_Register &= ~(0b11 << COM1A0);
    15a4:	af e4       	ldi	r26, 0x4F	; 79
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef e4       	ldi	r30, 0x4F	; 79
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 73       	andi	r24, 0x3F	; 63
    15b0:	8c 93       	st	X, r24
	TCCR1A_Register |= TIM1_PWM_OC1A_MODE << COM1A0;
    15b2:	af e4       	ldi	r26, 0x4F	; 79
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef e4       	ldi	r30, 0x4F	; 79
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 68       	ori	r24, 0x80	; 128
    15be:	8c 93       	st	X, r24

	/* Select OC1B mode */
	TCCR1A_Register &= ~(0b11 << COM1B0);
    15c0:	af e4       	ldi	r26, 0x4F	; 79
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ef e4       	ldi	r30, 0x4F	; 79
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 7c       	andi	r24, 0xCF	; 207
    15cc:	8c 93       	st	X, r24
	TCCR1A_Register |= TIM1_PWM_OC1B_MODE << COM1B0;
    15ce:	af e4       	ldi	r26, 0x4F	; 79
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ef e4       	ldi	r30, 0x4F	; 79
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 63       	ori	r24, 0x30	; 48
    15da:	8c 93       	st	X, r24

	ICR1_Register = period_us;
    15dc:	e6 e4       	ldi	r30, 0x46	; 70
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24

	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
    15e8:	ae e4       	ldi	r26, 0x4E	; 78
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ee e4       	ldi	r30, 0x4E	; 78
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8e 7f       	andi	r24, 0xFE	; 254
    15f4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
    15f6:	ae e4       	ldi	r26, 0x4E	; 78
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ee e4       	ldi	r30, 0x4E	; 78
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	82 60       	ori	r24, 0x02	; 2
    1602:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
    1604:	ae e4       	ldi	r26, 0x4E	; 78
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ee e4       	ldi	r30, 0x4E	; 78
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8b 7f       	andi	r24, 0xFB	; 251
    1610:	8c 93       	st	X, r24
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <TIM1_setDutyCycle>:

void TIM1_setDutyCycle(u8 channel, u16 value_us)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	00 d0       	rcall	.+0      	; 0x1622 <TIM1_setDutyCycle+0x6>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <TIM1_setDutyCycle+0x8>
    1624:	0f 92       	push	r0
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	7b 83       	std	Y+3, r23	; 0x03
    162e:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel)
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	3d 83       	std	Y+5, r19	; 0x05
    1638:	2c 83       	std	Y+4, r18	; 0x04
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	31 f0       	breq	.+12     	; 0x164e <TIM1_setDutyCycle+0x32>
    1642:	2c 81       	ldd	r18, Y+4	; 0x04
    1644:	3d 81       	ldd	r19, Y+5	; 0x05
    1646:	21 30       	cpi	r18, 0x01	; 1
    1648:	31 05       	cpc	r19, r1
    164a:	41 f0       	breq	.+16     	; 0x165c <TIM1_setDutyCycle+0x40>
    164c:	0d c0       	rjmp	.+26     	; 0x1668 <TIM1_setDutyCycle+0x4c>
	{
	case PWM_OCR1A:	OCR1A_Register = value_us; break;
    164e:	ea e4       	ldi	r30, 0x4A	; 74
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <TIM1_setDutyCycle+0x4c>
	case PWM_OCR1B:	OCR1B_Register = value_us; break;
    165c:	e8 e4       	ldi	r30, 0x48	; 72
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
	}
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <TIM0_Init>:

void (* func_ptr_ovf)(void);
void (* func_ptr_ctc)(void);

void TIM0_Init(void)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62

	// Enable Overflow Interrupt
	SET_BIT(TIMSK_Register, TOIE0);
#elif TIM0_MODE == TIM_CTC
	// Normal Mode
	CLEAR_BIT(TCCR0_Register, WGM00);
    1680:	a3 e5       	ldi	r26, 0x53	; 83
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e3 e5       	ldi	r30, 0x53	; 83
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	8f 7b       	andi	r24, 0xBF	; 191
    168c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, WGM01);
    168e:	a3 e5       	ldi	r26, 0x53	; 83
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e3 e5       	ldi	r30, 0x53	; 83
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	88 60       	ori	r24, 0x08	; 8
    169a:	8c 93       	st	X, r24

	// Enable CTC Interrupt
	SET_BIT(TIMSK_Register, OCIE0);
    169c:	a9 e5       	ldi	r26, 0x59	; 89
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e9 e5       	ldi	r30, 0x59	; 89
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	82 60       	ori	r24, 0x02	; 2
    16a8:	8c 93       	st	X, r24
#endif


}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <TIM0_SetValueUS>:

void TIM0_SetValueUS(u32 us)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <TIM0_SetValueUS+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <TIM0_SetValueUS+0x8>
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	6a 83       	std	Y+2, r22	; 0x02
    16c0:	7b 83       	std	Y+3, r23	; 0x03
    16c2:	8c 83       	std	Y+4, r24	; 0x04
    16c4:	9d 83       	std	Y+5, r25	; 0x05
	u32 mod = us%256;
	preload = 256 - mod;

	TCNT0_Register = preload;
#elif TIM0_MODE == TIM_CTC
	for(u8 x = 255; x > 0; x--)
    16c6:	8f ef       	ldi	r24, 0xFF	; 255
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	32 c0       	rjmp	.+100    	; 0x1730 <TIM0_SetValueUS+0x80>
	{
		if(us%x == 0)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	ac 81       	ldd	r26, Y+4	; 0x04
    16dc:	bd 81       	ldd	r27, Y+5	; 0x05
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	a1 05       	cpc	r26, r1
    16ee:	b1 05       	cpc	r27, r1
    16f0:	e1 f4       	brne	.+56     	; 0x172a <TIM0_SetValueUS+0x7a>
		{
			OCR0_Register = x;
    16f2:	ec e5       	ldi	r30, 0x5C	; 92
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	80 83       	st	Z, r24
			NoCounts = us/x;
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	ac 81       	ldd	r26, Y+4	; 0x04
    170a:	bd 81       	ldd	r27, Y+5	; 0x05
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
    1714:	da 01       	movw	r26, r20
    1716:	c9 01       	movw	r24, r18
    1718:	80 93 94 01 	sts	0x0194, r24
    171c:	90 93 95 01 	sts	0x0195, r25
    1720:	a0 93 96 01 	sts	0x0196, r26
    1724:	b0 93 97 01 	sts	0x0197, r27
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <TIM0_SetValueUS+0x86>
	u32 mod = us%256;
	preload = 256 - mod;

	TCNT0_Register = preload;
#elif TIM0_MODE == TIM_CTC
	for(u8 x = 255; x > 0; x--)
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	81 50       	subi	r24, 0x01	; 1
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	88 23       	and	r24, r24
    1734:	59 f6       	brne	.-106    	; 0x16cc <TIM0_SetValueUS+0x1c>
		}
	}
#endif

	// Set Clock Source (Prescaler: 8)
	CLEAR_BIT(TCCR0_Register, CS00);
    1736:	a3 e5       	ldi	r26, 0x53	; 83
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e3 e5       	ldi	r30, 0x53	; 83
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8e 7f       	andi	r24, 0xFE	; 254
    1742:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, CS01);
    1744:	a3 e5       	ldi	r26, 0x53	; 83
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e3 e5       	ldi	r30, 0x53	; 83
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	82 60       	ori	r24, 0x02	; 2
    1750:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS02);
    1752:	a3 e5       	ldi	r26, 0x53	; 83
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e3 e5       	ldi	r30, 0x53	; 83
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8b 7f       	andi	r24, 0xFB	; 251
    175e:	8c 93       	st	X, r24
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <TIM0_Disable>:

void TIM0_Disable(void)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer (No clk)
	CLEAR_BIT(TCCR0_Register, CS00);
    1778:	a3 e5       	ldi	r26, 0x53	; 83
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e3 e5       	ldi	r30, 0x53	; 83
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8e 7f       	andi	r24, 0xFE	; 254
    1784:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS01);
    1786:	a3 e5       	ldi	r26, 0x53	; 83
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e3 e5       	ldi	r30, 0x53	; 83
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8d 7f       	andi	r24, 0xFD	; 253
    1792:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS02);
    1794:	a3 e5       	ldi	r26, 0x53	; 83
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e3 e5       	ldi	r30, 0x53	; 83
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8b 7f       	andi	r24, 0xFB	; 251
    17a0:	8c 93       	st	X, r24
}
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <TIM0_SetOVFCallback>:

void TIM0_SetOVFCallback(void (* ptr)(void))
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <TIM0_SetOVFCallback+0x6>
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
	func_ptr_ovf = ptr;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	90 93 93 01 	sts	0x0193, r25
    17be:	80 93 92 01 	sts	0x0192, r24
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <TIM0_SetCTCCallback>:

void TIM0_SetCTCCallback(void (* ptr)(void))
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <TIM0_SetCTCCallback+0x6>
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	9a 83       	std	Y+2, r25	; 0x02
    17d8:	89 83       	std	Y+1, r24	; 0x01
	func_ptr_ctc = ptr;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	90 93 99 01 	sts	0x0199, r25
    17e2:	80 93 98 01 	sts	0x0198, r24
}
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <__vector_11>:

void __vector_11(void)
{
    17f0:	1f 92       	push	r1
    17f2:	0f 92       	push	r0
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	if(counter == NoCounts)
    181a:	20 91 76 01 	lds	r18, 0x0176
    181e:	30 91 77 01 	lds	r19, 0x0177
    1822:	40 91 78 01 	lds	r20, 0x0178
    1826:	50 91 79 01 	lds	r21, 0x0179
    182a:	80 91 94 01 	lds	r24, 0x0194
    182e:	90 91 95 01 	lds	r25, 0x0195
    1832:	a0 91 96 01 	lds	r26, 0x0196
    1836:	b0 91 97 01 	lds	r27, 0x0197
    183a:	28 17       	cp	r18, r24
    183c:	39 07       	cpc	r19, r25
    183e:	4a 07       	cpc	r20, r26
    1840:	5b 07       	cpc	r21, r27
    1842:	c1 f4       	brne	.+48     	; 0x1874 <__vector_11+0x84>
	{
		func_ptr_ovf();
    1844:	e0 91 92 01 	lds	r30, 0x0192
    1848:	f0 91 93 01 	lds	r31, 0x0193
    184c:	09 95       	icall
		counter = 0;
    184e:	10 92 76 01 	sts	0x0176, r1
    1852:	10 92 77 01 	sts	0x0177, r1
    1856:	10 92 78 01 	sts	0x0178, r1
    185a:	10 92 79 01 	sts	0x0179, r1
		TCNT0_Register = preload;
    185e:	e2 e5       	ldi	r30, 0x52	; 82
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 91 8e 01 	lds	r24, 0x018E
    1866:	90 91 8f 01 	lds	r25, 0x018F
    186a:	a0 91 90 01 	lds	r26, 0x0190
    186e:	b0 91 91 01 	lds	r27, 0x0191
    1872:	80 83       	st	Z, r24
	}
	counter++;
    1874:	80 91 76 01 	lds	r24, 0x0176
    1878:	90 91 77 01 	lds	r25, 0x0177
    187c:	a0 91 78 01 	lds	r26, 0x0178
    1880:	b0 91 79 01 	lds	r27, 0x0179
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	a1 1d       	adc	r26, r1
    1888:	b1 1d       	adc	r27, r1
    188a:	80 93 76 01 	sts	0x0176, r24
    188e:	90 93 77 01 	sts	0x0177, r25
    1892:	a0 93 78 01 	sts	0x0178, r26
    1896:	b0 93 79 01 	sts	0x0179, r27
}
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	ff 91       	pop	r31
    18a0:	ef 91       	pop	r30
    18a2:	bf 91       	pop	r27
    18a4:	af 91       	pop	r26
    18a6:	9f 91       	pop	r25
    18a8:	8f 91       	pop	r24
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1
    18be:	18 95       	reti

000018c0 <__vector_10>:

void __vector_10(void)
{
    18c0:	1f 92       	push	r1
    18c2:	0f 92       	push	r0
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	0f 92       	push	r0
    18c8:	11 24       	eor	r1, r1
    18ca:	2f 93       	push	r18
    18cc:	3f 93       	push	r19
    18ce:	4f 93       	push	r20
    18d0:	5f 93       	push	r21
    18d2:	6f 93       	push	r22
    18d4:	7f 93       	push	r23
    18d6:	8f 93       	push	r24
    18d8:	9f 93       	push	r25
    18da:	af 93       	push	r26
    18dc:	bf 93       	push	r27
    18de:	ef 93       	push	r30
    18e0:	ff 93       	push	r31
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	if(counter == NoCounts)
    18ea:	20 91 7a 01 	lds	r18, 0x017A
    18ee:	30 91 7b 01 	lds	r19, 0x017B
    18f2:	40 91 7c 01 	lds	r20, 0x017C
    18f6:	50 91 7d 01 	lds	r21, 0x017D
    18fa:	80 91 94 01 	lds	r24, 0x0194
    18fe:	90 91 95 01 	lds	r25, 0x0195
    1902:	a0 91 96 01 	lds	r26, 0x0196
    1906:	b0 91 97 01 	lds	r27, 0x0197
    190a:	28 17       	cp	r18, r24
    190c:	39 07       	cpc	r19, r25
    190e:	4a 07       	cpc	r20, r26
    1910:	5b 07       	cpc	r21, r27
    1912:	69 f4       	brne	.+26     	; 0x192e <__vector_10+0x6e>
	{
		func_ptr_ctc();
    1914:	e0 91 98 01 	lds	r30, 0x0198
    1918:	f0 91 99 01 	lds	r31, 0x0199
    191c:	09 95       	icall
		counter = 0;
    191e:	10 92 7a 01 	sts	0x017A, r1
    1922:	10 92 7b 01 	sts	0x017B, r1
    1926:	10 92 7c 01 	sts	0x017C, r1
    192a:	10 92 7d 01 	sts	0x017D, r1
	}
	counter++;
    192e:	80 91 7a 01 	lds	r24, 0x017A
    1932:	90 91 7b 01 	lds	r25, 0x017B
    1936:	a0 91 7c 01 	lds	r26, 0x017C
    193a:	b0 91 7d 01 	lds	r27, 0x017D
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	a1 1d       	adc	r26, r1
    1942:	b1 1d       	adc	r27, r1
    1944:	80 93 7a 01 	sts	0x017A, r24
    1948:	90 93 7b 01 	sts	0x017B, r25
    194c:	a0 93 7c 01 	sts	0x017C, r26
    1950:	b0 93 7d 01 	sts	0x017D, r27
}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	ff 91       	pop	r31
    195a:	ef 91       	pop	r30
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	7f 91       	pop	r23
    1966:	6f 91       	pop	r22
    1968:	5f 91       	pop	r21
    196a:	4f 91       	pop	r20
    196c:	3f 91       	pop	r19
    196e:	2f 91       	pop	r18
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <SPI_voidINIT>:

void (*vFunptr)(void)=NULL ;



void SPI_voidINIT(){
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
	//choose slave or master mode
#if SPI_MODE==SPI_MODE_MASTER

	SET_BIT(SPCR,SPCR_MSTR);
    1982:	ad e2       	ldi	r26, 0x2D	; 45
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	ed e2       	ldi	r30, 0x2D	; 45
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	80 61       	ori	r24, 0x10	; 16
    198e:	8c 93       	st	X, r24
#elif SPI_MODE==SPI_MODE_SLAVE
	CLEAR_BIT(SPCR,SPCR_MSTR);
#endif

	//choose clock(prescaler)
	SPCR=SPCR&(~(0b11));
    1990:	ad e2       	ldi	r26, 0x2D	; 45
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ed e2       	ldi	r30, 0x2D	; 45
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8c 7f       	andi	r24, 0xFC	; 252
    199c:	8c 93       	st	X, r24
	SPCR=SPCR|((SPI_CLOCK_PRESCALER)&0b11);
    199e:	ad e2       	ldi	r26, 0x2D	; 45
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ed e2       	ldi	r30, 0x2D	; 45
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8c 93       	st	X, r24

	SPSR=SPSR&(~(1));
    19aa:	ae e2       	ldi	r26, 0x2E	; 46
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ee e2       	ldi	r30, 0x2E	; 46
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	8e 7f       	andi	r24, 0xFE	; 254
    19b6:	8c 93       	st	X, r24
	SPSR=SPSR|(  (SPI_CLOCK_PRESCALER>>2)&(1)  )   ;
    19b8:	ae e2       	ldi	r26, 0x2E	; 46
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	ee e2       	ldi	r30, 0x2E	; 46
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8c 93       	st	X, r24
	//choose clock phase and polarity
	if(SPI_CKPOL==SPI_MODE_CPOL_H){
		SET_BIT(SPCR,SPCR_CPOL);
	}
	else{
		CLEAR_BIT(SPCR,SPCR_CPOL);
    19c4:	ad e2       	ldi	r26, 0x2D	; 45
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ed e2       	ldi	r30, 0x2D	; 45
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	87 7f       	andi	r24, 0xF7	; 247
    19d0:	8c 93       	st	X, r24

	if(SPI_CKPH==SPI_MODE_CPPH_SAMPLE){
		SET_BIT(SPCR,SPCR_CPHA);
	}
	else{
		CLEAR_BIT(SPCR,SPCR_CPHA);
    19d2:	ad e2       	ldi	r26, 0x2D	; 45
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ed e2       	ldi	r30, 0x2D	; 45
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8b 7f       	andi	r24, 0xFB	; 251
    19de:	8c 93       	st	X, r24
	//choose data direction
	if(SPI_DATA_DIR==SPI_DATA_DIR_LSB){
			SET_BIT(SPCR,SPCR_DORD);
		}
	else{
		CLEAR_BIT(SPCR,SPCR_DORD);
    19e0:	ad e2       	ldi	r26, 0x2D	; 45
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ed e2       	ldi	r30, 0x2D	; 45
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8f 7d       	andi	r24, 0xDF	; 223
    19ec:	8c 93       	st	X, r24
	//choose if you want to enable interrupt
	//its own function


	//enable spi
	SET_BIT(SPCR,SPCR_SPE);
    19ee:	ad e2       	ldi	r26, 0x2D	; 45
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ed e2       	ldi	r30, 0x2D	; 45
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 64       	ori	r24, 0x40	; 64
    19fa:	8c 93       	st	X, r24
}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <SPI_voidSend_Receive>:

void SPI_voidSend_Receive(u8 value,u8* retVal){
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <SPI_voidSend_Receive+0x6>
    1a08:	0f 92       	push	r0
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	7b 83       	std	Y+3, r23	; 0x03
    1a12:	6a 83       	std	Y+2, r22	; 0x02
	if(retVal!= 0){
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	9b 81       	ldd	r25, Y+3	; 0x03
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	79 f0       	breq	.+30     	; 0x1a3a <SPI_voidSend_Receive+0x38>
		//send value over spi
		SPDR=value;
    1a1c:	ef e2       	ldi	r30, 0x2F	; 47
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	80 83       	st	Z, r24

		//wait for value to be delevired
		while(!GET_BIT(SPSR,SPSR_SPIF));
    1a24:	ee e2       	ldi	r30, 0x2E	; 46
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	88 23       	and	r24, r24
    1a2c:	dc f7       	brge	.-10     	; 0x1a24 <SPI_voidSend_Receive+0x22>

		//retrieve data from buffer
		*retVal=SPDR;
    1a2e:	ef e2       	ldi	r30, 0x2F	; 47
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	ea 81       	ldd	r30, Y+2	; 0x02
    1a36:	fb 81       	ldd	r31, Y+3	; 0x03
    1a38:	80 83       	st	Z, r24
	else{

	}


}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <SPI_u8receive>:

u8  SPI_u8receive(){
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(SPSR,SPSR_SPIF));
    1a4e:	ee e2       	ldi	r30, 0x2E	; 46
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	88 23       	and	r24, r24
    1a56:	dc f7       	brge	.-10     	; 0x1a4e <SPI_u8receive+0x8>
	return SPDR;
    1a58:	ef e2       	ldi	r30, 0x2F	; 47
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <SPI_Enable_Interrupt>:

void SPI_Enable_Interrupt(){
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_SPIE);
    1a6c:	ad e2       	ldi	r26, 0x2D	; 45
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ed e2       	ldi	r30, 0x2D	; 45
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	80 68       	ori	r24, 0x80	; 128
    1a78:	8c 93       	st	X, r24
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <SPI_Disable_Interrupt>:

void SPI_Disable_Interrupt(){
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SPCR,SPCR_SPIE);
    1a88:	ad e2       	ldi	r26, 0x2D	; 45
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	ed e2       	ldi	r30, 0x2D	; 45
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	8f 77       	andi	r24, 0x7F	; 127
    1a94:	8c 93       	st	X, r24
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <SPI_SetCallback>:

void SPI_SetCallback(void(*fptr)(void)){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <SPI_SetCallback+0x6>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	vFunptr=fptr;
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	90 93 7f 01 	sts	0x017F, r25
    1ab2:	80 93 7e 01 	sts	0x017E, r24
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <__vector_12>:

void __vector_12(){
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	if(vFunptr!=NULL){
    1ac8:	80 91 7e 01 	lds	r24, 0x017E
    1acc:	90 91 7f 01 	lds	r25, 0x017F
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <__vector_12+0x1e>
		vFunptr();
    1ad4:	e0 91 7e 01 	lds	r30, 0x017E
    1ad8:	f0 91 7f 01 	lds	r31, 0x017F
    1adc:	09 95       	icall
	}
}
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <I2C_InitMaster>:
#include "I2C_interface.h"

#include <avr/delay.h>

void I2C_InitMaster(u16 SCL_Clock)
{
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <I2C_InitMaster+0xa>
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR ,TWEN);
    1af6:	a6 e5       	ldi	r26, 0x56	; 86
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e6 e5       	ldi	r30, 0x56	; 86
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	84 60       	ori	r24, 0x04	; 4
    1b02:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR , TWPS0);
    1b04:	a1 e2       	ldi	r26, 0x21	; 33
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e1 e2       	ldi	r30, 0x21	; 33
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8e 7f       	andi	r24, 0xFE	; 254
    1b10:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR , TWPS1);
    1b12:	a1 e2       	ldi	r26, 0x21	; 33
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e1 e2       	ldi	r30, 0x21	; 33
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8d 7f       	andi	r24, 0xFD	; 253
    1b1e:	8c 93       	st	X, r24
	TWBR = (u8)((8000000/8*SCL_Clock)-2);
    1b20:	00 e2       	ldi	r16, 0x20	; 32
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	cc 01       	movw	r24, r24
    1b2a:	a0 e0       	ldi	r26, 0x00	; 0
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	20 ee       	ldi	r18, 0xE0	; 224
    1b30:	3e e5       	ldi	r19, 0x5E	; 94
    1b32:	48 ef       	ldi	r20, 0xF8	; 248
    1b34:	5f ef       	ldi	r21, 0xFF	; 255
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <__mulsi3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	80 95       	com	r24
    1b44:	90 95       	com	r25
    1b46:	a0 95       	com	r26
    1b48:	b0 95       	com	r27
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	aa 1f       	adc	r26, r26
    1b50:	bb 1f       	adc	r27, r27
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 83       	st	Z, r24
}
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <I2C_InitSlave>:

void I2C_InitSlave(void)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR ,TWEN);
    1b6c:	a6 e5       	ldi	r26, 0x56	; 86
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e6 e5       	ldi	r30, 0x56	; 86
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	84 60       	ori	r24, 0x04	; 4
    1b78:	8c 93       	st	X, r24

	TWAR = I2C_SLAVE_ADRESS <<1;
    1b7a:	e2 e2       	ldi	r30, 0x22	; 34
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	84 e2       	ldi	r24, 0x24	; 36
    1b80:	80 83       	st	Z, r24
}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <I2C_SendStart>:

u8 I2C_SendStart(void)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
	//if(GET_BIT(TWCR , TWINT)== 0) return 0xFF ;
     TWCR|=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1b90:	a6 e5       	ldi	r26, 0x56	; 86
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e6 e5       	ldi	r30, 0x56	; 86
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	84 6a       	ori	r24, 0xA4	; 164
    1b9c:	8c 93       	st	X, r24

	while(GET_BIT(TWCR , TWINT)== 0);
    1b9e:	e6 e5       	ldi	r30, 0x56	; 86
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	88 23       	and	r24, r24
    1ba6:	dc f7       	brge	.-10     	; 0x1b9e <I2C_SendStart+0x16>
	return TWSR & 0xF8;
    1ba8:	e1 e2       	ldi	r30, 0x21	; 33
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	88 7f       	andi	r24, 0xF8	; 248

}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <I2C_SendRepStart>:

u8 I2C_SendRepStart(void)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(TWCR , TWEN);
    1bbe:	a6 e5       	ldi	r26, 0x56	; 86
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e6 e5       	ldi	r30, 0x56	; 86
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8b 7f       	andi	r24, 0xFB	; 251
    1bca:	8c 93       	st	X, r24
	//if(GET_BIT(TWCR , TWINT)== 0) return 0xFF ;
     TWCR|=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1bcc:	a6 e5       	ldi	r26, 0x56	; 86
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e6 e5       	ldi	r30, 0x56	; 86
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	84 6a       	ori	r24, 0xA4	; 164
    1bd8:	8c 93       	st	X, r24

	while(GET_BIT(TWCR , TWINT)== 0);
    1bda:	e6 e5       	ldi	r30, 0x56	; 86
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	88 23       	and	r24, r24
    1be2:	dc f7       	brge	.-10     	; 0x1bda <I2C_SendRepStart+0x24>
	return TWSR&0xf8;
    1be4:	e1 e2       	ldi	r30, 0x21	; 33
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	88 7f       	andi	r24, 0xF8	; 248

}
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <I2C_SendAddress>:
u8 I2C_SendAddress(u8 address , u8 opp)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <I2C_SendAddress+0x6>
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	6a 83       	std	Y+2, r22	; 0x02
	TWDR =  (address <<TWA0 )| (opp);
    1c00:	e3 e2       	ldi	r30, 0x23	; 35
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	98 2f       	mov	r25, r24
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	89 2b       	or	r24, r25
    1c14:	80 83       	st	Z, r24

	TWCR |= (1<<TWINT)|(1<<TWEN);
    1c16:	a6 e5       	ldi	r26, 0x56	; 86
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e6 e5       	ldi	r30, 0x56	; 86
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	84 68       	ori	r24, 0x84	; 132
    1c22:	8c 93       	st	X, r24
	while(GET_BIT(TWCR , TWINT) == 0);
    1c24:	e6 e5       	ldi	r30, 0x56	; 86
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 23       	and	r24, r24
    1c2c:	dc f7       	brge	.-10     	; 0x1c24 <I2C_SendAddress+0x32>
	return TWSR &0xf8;
    1c2e:	e1 e2       	ldi	r30, 0x21	; 33
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	88 7f       	andi	r24, 0xF8	; 248

}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <I2C_SendData>:
u8 I2C_SendData(u8 data)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data ;
    1c4c:	e3 e2       	ldi	r30, 0x23	; 35
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	80 83       	st	Z, r24

  TWCR |=(1<<TWINT)|(1<<TWEN) ;
    1c54:	a6 e5       	ldi	r26, 0x56	; 86
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e6 e5       	ldi	r30, 0x56	; 86
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	84 68       	ori	r24, 0x84	; 132
    1c60:	8c 93       	st	X, r24

  while(GET_BIT(TWCR , TWINT)== 0);
    1c62:	e6 e5       	ldi	r30, 0x56	; 86
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 23       	and	r24, r24
    1c6a:	dc f7       	brge	.-10     	; 0x1c62 <I2C_SendData+0x22>

  return TWSR & 0xf8 ;
    1c6c:	e1 e2       	ldi	r30, 0x21	; 33
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	88 7f       	andi	r24, 0xF8	; 248

}
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <I2C_SendStop>:
u8 I2C_SendStop(void)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
	//if(GET_BIT(TWCR , TWINT)== 0) return 0xFF ;
     TWCR |=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1c84:	a6 e5       	ldi	r26, 0x56	; 86
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e6 e5       	ldi	r30, 0x56	; 86
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	84 69       	ori	r24, 0x94	; 148
    1c90:	8c 93       	st	X, r24

    CLEAR_BIT(TWCR,TWSTA);
    1c92:	a6 e5       	ldi	r26, 0x56	; 86
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e6 e5       	ldi	r30, 0x56	; 86
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8f 7d       	andi	r24, 0xDF	; 223
    1c9e:	8c 93       	st	X, r24
	return TWSR & 0xF8;
    1ca0:	e1 e2       	ldi	r30, 0x21	; 33
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 7f       	andi	r24, 0xF8	; 248
}
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <I2C_ReceiveWihtAck>:
u8 I2C_ReceiveWihtAck(void)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
  TWCR |=(1<< TWINT)|(1<<TWEA)|(1<<TWEN) ;
    1cb6:	a6 e5       	ldi	r26, 0x56	; 86
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e6 e5       	ldi	r30, 0x56	; 86
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	84 6c       	ori	r24, 0xC4	; 196
    1cc2:	8c 93       	st	X, r24

  while(GET_BIT(TWCR , TWINT)== 0);
    1cc4:	e6 e5       	ldi	r30, 0x56	; 86
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 23       	and	r24, r24
    1ccc:	dc f7       	brge	.-10     	; 0x1cc4 <I2C_ReceiveWihtAck+0x16>

  return TWDR ;
    1cce:	e3 e2       	ldi	r30, 0x23	; 35
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <I2C_ReceiveWithoutAck>:
u8 I2C_ReceiveWithoutAck(void)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	  TWCR |=(1<< TWINT)|(1<<TWEN)  ;
    1ce2:	a6 e5       	ldi	r26, 0x56	; 86
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e6 e5       	ldi	r30, 0x56	; 86
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	84 68       	ori	r24, 0x84	; 132
    1cee:	8c 93       	st	X, r24

	  while(GET_BIT(TWCR , TWINT)== 0);
    1cf0:	e6 e5       	ldi	r30, 0x56	; 86
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 23       	and	r24, r24
    1cf8:	dc f7       	brge	.-10     	; 0x1cf0 <I2C_ReceiveWithoutAck+0x16>

	  return TWDR ;
    1cfa:	e3 e2       	ldi	r30, 0x23	; 35
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
}
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <I2C_SendFram>:

u8 I2C_SendFram(u8 address , u8*buf , u8 len)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	28 97       	sbiw	r28, 0x08	; 8
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	8c 83       	std	Y+4, r24	; 0x04
    1d1c:	7e 83       	std	Y+6, r23	; 0x06
    1d1e:	6d 83       	std	Y+5, r22	; 0x05
    1d20:	4f 83       	std	Y+7, r20	; 0x07
	u8 state ;
	//send start condition
	state = I2C_SendStart();
    1d22:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <I2C_SendStart>
    1d26:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_STA) return state ;
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	88 30       	cpi	r24, 0x08	; 8
    1d2c:	19 f0       	breq	.+6      	; 0x1d34 <I2C_SendFram+0x2e>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	88 87       	std	Y+8, r24	; 0x08
    1d32:	34 c0       	rjmp	.+104    	; 0x1d9c <I2C_SendFram+0x96>

	state = I2C_SendAddress(address , I2C_WRITE_OPP);
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <I2C_SendAddress>
    1d3c:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_ADDRESS_ACK) return state ;
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	88 31       	cpi	r24, 0x18	; 24
    1d42:	19 f0       	breq	.+6      	; 0x1d4a <I2C_SendFram+0x44>
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	88 87       	std	Y+8, r24	; 0x08
    1d48:	29 c0       	rjmp	.+82     	; 0x1d9c <I2C_SendFram+0x96>

	for(int i= 0 ; i<len; i++)
    1d4a:	1a 82       	std	Y+2, r1	; 0x02
    1d4c:	19 82       	std	Y+1, r1	; 0x01
    1d4e:	13 c0       	rjmp	.+38     	; 0x1d76 <I2C_SendFram+0x70>
	{
		state = I2C_SendData(buf[i]);
    1d50:	29 81       	ldd	r18, Y+1	; 0x01
    1d52:	3a 81       	ldd	r19, Y+2	; 0x02
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e2 0f       	add	r30, r18
    1d5c:	f3 1f       	adc	r31, r19
    1d5e:	80 81       	ld	r24, Z
    1d60:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <I2C_SendData>
    1d64:	8b 83       	std	Y+3, r24	; 0x03
		if(state != I2C_STAT_DATA_ACK) break ;
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	88 32       	cpi	r24, 0x28	; 40
    1d6a:	69 f4       	brne	.+26     	; 0x1d86 <I2C_SendFram+0x80>

	state = I2C_SendAddress(address , I2C_WRITE_OPP);

	if(state != I2C_STAT_ADDRESS_ACK) return state ;

	for(int i= 0 ; i<len; i++)
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	8f 81       	ldd	r24, Y+7	; 0x07
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	82 17       	cp	r24, r18
    1d82:	93 07       	cpc	r25, r19
    1d84:	2c f3       	brlt	.-54     	; 0x1d50 <I2C_SendFram+0x4a>
	{
		state = I2C_SendData(buf[i]);
		if(state != I2C_STAT_DATA_ACK) break ;

	}
	 I2C_SendStop();
    1d86:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <I2C_SendStop>
	 CLEAR_BIT(TWCR , TWSTA);
    1d8a:	a6 e5       	ldi	r26, 0x56	; 86
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e6 e5       	ldi	r30, 0x56	; 86
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8f 7d       	andi	r24, 0xDF	; 223
    1d96:	8c 93       	st	X, r24
	return state ;
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	88 87       	std	Y+8, r24	; 0x08
    1d9c:	88 85       	ldd	r24, Y+8	; 0x08
}
    1d9e:	28 96       	adiw	r28, 0x08	; 8
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <GIE_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"


void GIE_Enable(void)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Register, I_Bit);
    1db8:	af e5       	ldi	r26, 0x5F	; 95
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	ef e5       	ldi	r30, 0x5F	; 95
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 68       	ori	r24, 0x80	; 128
    1dc4:	8c 93       	st	X, r24
}
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <GIE_Disable>:

void GIE_Disable(void)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_Register, I_Bit);
    1dd4:	af e5       	ldi	r26, 0x5F	; 95
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	ef e5       	ldi	r30, 0x5F	; 95
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	8f 77       	andi	r24, 0x7F	; 127
    1de0:	8c 93       	st	X, r24
}
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <EXTI_SetMode>:

}
*/

void EXTI_SetMode(u8 L_u8EXTINum, u8 L_u8Mode)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <EXTI_SetMode+0x6>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <EXTI_SetMode+0x8>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8EXTINum)
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	3c 83       	std	Y+4, r19	; 0x04
    1e00:	2b 83       	std	Y+3, r18	; 0x03
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	91 05       	cpc	r25, r1
    1e0a:	d9 f0       	breq	.+54     	; 0x1e42 <EXTI_SetMode+0x5a>
    1e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e10:	23 30       	cpi	r18, 0x03	; 3
    1e12:	31 05       	cpc	r19, r1
    1e14:	69 f1       	breq	.+90     	; 0x1e70 <EXTI_SetMode+0x88>
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <EXTI_SetMode+0x3a>
    1e20:	44 c0       	rjmp	.+136    	; 0x1eaa <EXTI_SetMode+0xc2>
	{
	case EXTI0:
		MCUCR_Register &= ~(0b11 << ISC00);
    1e22:	a5 e5       	ldi	r26, 0x55	; 85
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e5       	ldi	r30, 0x55	; 85
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8c 7f       	andi	r24, 0xFC	; 252
    1e2e:	8c 93       	st	X, r24
		MCUCR_Register |= L_u8Mode << ISC00;
    1e30:	a5 e5       	ldi	r26, 0x55	; 85
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e5       	ldi	r30, 0x55	; 85
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	90 81       	ld	r25, Z
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	89 2b       	or	r24, r25
    1e3e:	8c 93       	st	X, r24
    1e40:	34 c0       	rjmp	.+104    	; 0x1eaa <EXTI_SetMode+0xc2>
		break;
	case EXTI1:
		MCUCR_Register &= ~(0b11 << ISC10);
    1e42:	a5 e5       	ldi	r26, 0x55	; 85
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e5 e5       	ldi	r30, 0x55	; 85
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	83 7f       	andi	r24, 0xF3	; 243
    1e4e:	8c 93       	st	X, r24
		MCUCR_Register |= L_u8Mode << ISC10;
    1e50:	a5 e5       	ldi	r26, 0x55	; 85
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e5 e5       	ldi	r30, 0x55	; 85
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	82 2b       	or	r24, r18
    1e6c:	8c 93       	st	X, r24
    1e6e:	1d c0       	rjmp	.+58     	; 0x1eaa <EXTI_SetMode+0xc2>
		break;
	case EXTI2:
		CLEAR_BIT(MCUCSR_Register, ISC2);
    1e70:	a4 e5       	ldi	r26, 0x54	; 84
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e4 e5       	ldi	r30, 0x54	; 84
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7b       	andi	r24, 0xBF	; 191
    1e7c:	8c 93       	st	X, r24
		MCUCSR_Register |= (1 & L_u8Mode) << ISC2;
    1e7e:	a4 e5       	ldi	r26, 0x54	; 84
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e4 e5       	ldi	r30, 0x54	; 84
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	28 2f       	mov	r18, r24
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	81 70       	andi	r24, 0x01	; 1
    1e92:	90 70       	andi	r25, 0x00	; 0
    1e94:	00 24       	eor	r0, r0
    1e96:	96 95       	lsr	r25
    1e98:	87 95       	ror	r24
    1e9a:	07 94       	ror	r0
    1e9c:	96 95       	lsr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	07 94       	ror	r0
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	80 2d       	mov	r24, r0
    1ea6:	82 2b       	or	r24, r18
    1ea8:	8c 93       	st	X, r24
		break;
	}
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <EXTI_Enable>:


void EXTI_Enable(u8 L_u8EXTINum)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <EXTI_Enable+0x6>
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTINum)
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	3b 83       	std	Y+3, r19	; 0x03
    1ece:	2a 83       	std	Y+2, r18	; 0x02
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	91 f0       	breq	.+36     	; 0x1efe <EXTI_Enable+0x46>
    1eda:	2a 81       	ldd	r18, Y+2	; 0x02
    1edc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ede:	23 30       	cpi	r18, 0x03	; 3
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	a9 f0       	breq	.+42     	; 0x1f0e <EXTI_Enable+0x56>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	91 05       	cpc	r25, r1
    1eec:	b9 f4       	brne	.+46     	; 0x1f1c <EXTI_Enable+0x64>
	{
	case EXTI0:	SET_BIT(GICR_Register, INT0); break;
    1eee:	ab e5       	ldi	r26, 0x5B	; 91
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	eb e5       	ldi	r30, 0x5B	; 91
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	80 64       	ori	r24, 0x40	; 64
    1efa:	8c 93       	st	X, r24
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <EXTI_Enable+0x64>
	case EXTI1:	SET_BIT(GICR_Register, INT1); break;
    1efe:	ab e5       	ldi	r26, 0x5B	; 91
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	eb e5       	ldi	r30, 0x5B	; 91
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	80 68       	ori	r24, 0x80	; 128
    1f0a:	8c 93       	st	X, r24
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <EXTI_Enable+0x64>
	case EXTI2:	SET_BIT(GICR_Register, INT2); break;
    1f0e:	ab e5       	ldi	r26, 0x5B	; 91
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	eb e5       	ldi	r30, 0x5B	; 91
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	80 62       	ori	r24, 0x20	; 32
    1f1a:	8c 93       	st	X, r24
	}
}
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <EXTI_Disable>:


void EXTI_Disable(u8 L_u8EXTINum)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <EXTI_Disable+0x6>
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTINum)
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	3b 83       	std	Y+3, r19	; 0x03
    1f3e:	2a 83       	std	Y+2, r18	; 0x02
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	91 05       	cpc	r25, r1
    1f48:	91 f0       	breq	.+36     	; 0x1f6e <EXTI_Disable+0x46>
    1f4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f4c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f4e:	23 30       	cpi	r18, 0x03	; 3
    1f50:	31 05       	cpc	r19, r1
    1f52:	a9 f0       	breq	.+42     	; 0x1f7e <EXTI_Disable+0x56>
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	b9 f4       	brne	.+46     	; 0x1f8c <EXTI_Disable+0x64>
	{
	case EXTI0:	CLEAR_BIT(GICR_Register, INT0); break;
    1f5e:	ab e5       	ldi	r26, 0x5B	; 91
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	eb e5       	ldi	r30, 0x5B	; 91
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	8f 7b       	andi	r24, 0xBF	; 191
    1f6a:	8c 93       	st	X, r24
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <EXTI_Disable+0x64>
	case EXTI1:	CLEAR_BIT(GICR_Register, INT1); break;
    1f6e:	ab e5       	ldi	r26, 0x5B	; 91
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	eb e5       	ldi	r30, 0x5B	; 91
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	8f 77       	andi	r24, 0x7F	; 127
    1f7a:	8c 93       	st	X, r24
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <EXTI_Disable+0x64>
	case EXTI2:	CLEAR_BIT(GICR_Register, INT2); break;
    1f7e:	ab e5       	ldi	r26, 0x5B	; 91
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	eb e5       	ldi	r30, 0x5B	; 91
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8f 7d       	andi	r24, 0xDF	; 223
    1f8a:	8c 93       	st	X, r24
	}
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <EXTI_SetCallback>:


void EXTI_SetCallback(u8 L_u8EXTINum, void (* ptr)())
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <EXTI_SetCallback+0x6>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <EXTI_SetCallback+0x8>
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	7b 83       	std	Y+3, r23	; 0x03
    1faa:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8EXTINum)
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	3d 83       	std	Y+5, r19	; 0x05
    1fb4:	2c 83       	std	Y+4, r18	; 0x04
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fba:	82 30       	cpi	r24, 0x02	; 2
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	89 f0       	breq	.+34     	; 0x1fe2 <EXTI_SetCallback+0x4a>
    1fc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc4:	23 30       	cpi	r18, 0x03	; 3
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	99 f0       	breq	.+38     	; 0x1ff0 <EXTI_SetCallback+0x58>
    1fca:	8c 81       	ldd	r24, Y+4	; 0x04
    1fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	a1 f4       	brne	.+40     	; 0x1ffc <EXTI_SetCallback+0x64>
	{
	case EXTI0: callback_ptr1 = ptr; break;
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	90 93 9b 01 	sts	0x019B, r25
    1fdc:	80 93 9a 01 	sts	0x019A, r24
    1fe0:	0d c0       	rjmp	.+26     	; 0x1ffc <EXTI_SetCallback+0x64>
	case EXTI1: callback_ptr2 = ptr; break;
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	90 93 9d 01 	sts	0x019D, r25
    1fea:	80 93 9c 01 	sts	0x019C, r24
    1fee:	06 c0       	rjmp	.+12     	; 0x1ffc <EXTI_SetCallback+0x64>
	case EXTI2: callback_ptr3 = ptr; break;
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	90 93 9f 01 	sts	0x019F, r25
    1ff8:	80 93 9e 01 	sts	0x019E, r24
	}
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <__vector_1>:

void __vector_1(void)
{
    200c:	1f 92       	push	r1
    200e:	0f 92       	push	r0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	2f 93       	push	r18
    2018:	3f 93       	push	r19
    201a:	4f 93       	push	r20
    201c:	5f 93       	push	r21
    201e:	6f 93       	push	r22
    2020:	7f 93       	push	r23
    2022:	8f 93       	push	r24
    2024:	9f 93       	push	r25
    2026:	af 93       	push	r26
    2028:	bf 93       	push	r27
    202a:	ef 93       	push	r30
    202c:	ff 93       	push	r31
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
	callback_ptr1();
    2036:	e0 91 9a 01 	lds	r30, 0x019A
    203a:	f0 91 9b 01 	lds	r31, 0x019B
    203e:	09 95       	icall
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	ff 91       	pop	r31
    2046:	ef 91       	pop	r30
    2048:	bf 91       	pop	r27
    204a:	af 91       	pop	r26
    204c:	9f 91       	pop	r25
    204e:	8f 91       	pop	r24
    2050:	7f 91       	pop	r23
    2052:	6f 91       	pop	r22
    2054:	5f 91       	pop	r21
    2056:	4f 91       	pop	r20
    2058:	3f 91       	pop	r19
    205a:	2f 91       	pop	r18
    205c:	0f 90       	pop	r0
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	0f 90       	pop	r0
    2062:	1f 90       	pop	r1
    2064:	18 95       	reti

00002066 <__vector_2>:

void __vector_2(void)
{
    2066:	1f 92       	push	r1
    2068:	0f 92       	push	r0
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	0f 92       	push	r0
    206e:	11 24       	eor	r1, r1
    2070:	2f 93       	push	r18
    2072:	3f 93       	push	r19
    2074:	4f 93       	push	r20
    2076:	5f 93       	push	r21
    2078:	6f 93       	push	r22
    207a:	7f 93       	push	r23
    207c:	8f 93       	push	r24
    207e:	9f 93       	push	r25
    2080:	af 93       	push	r26
    2082:	bf 93       	push	r27
    2084:	ef 93       	push	r30
    2086:	ff 93       	push	r31
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
	callback_ptr2();
    2090:	e0 91 9c 01 	lds	r30, 0x019C
    2094:	f0 91 9d 01 	lds	r31, 0x019D
    2098:	09 95       	icall
}
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	ff 91       	pop	r31
    20a0:	ef 91       	pop	r30
    20a2:	bf 91       	pop	r27
    20a4:	af 91       	pop	r26
    20a6:	9f 91       	pop	r25
    20a8:	8f 91       	pop	r24
    20aa:	7f 91       	pop	r23
    20ac:	6f 91       	pop	r22
    20ae:	5f 91       	pop	r21
    20b0:	4f 91       	pop	r20
    20b2:	3f 91       	pop	r19
    20b4:	2f 91       	pop	r18
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <__vector_3>:

void __vector_3(void)
{
    20c0:	1f 92       	push	r1
    20c2:	0f 92       	push	r0
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	0f 92       	push	r0
    20c8:	11 24       	eor	r1, r1
    20ca:	2f 93       	push	r18
    20cc:	3f 93       	push	r19
    20ce:	4f 93       	push	r20
    20d0:	5f 93       	push	r21
    20d2:	6f 93       	push	r22
    20d4:	7f 93       	push	r23
    20d6:	8f 93       	push	r24
    20d8:	9f 93       	push	r25
    20da:	af 93       	push	r26
    20dc:	bf 93       	push	r27
    20de:	ef 93       	push	r30
    20e0:	ff 93       	push	r31
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
	callback_ptr3();
    20ea:	e0 91 9e 01 	lds	r30, 0x019E
    20ee:	f0 91 9f 01 	lds	r31, 0x019F
    20f2:	09 95       	icall
}
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	ff 91       	pop	r31
    20fa:	ef 91       	pop	r30
    20fc:	bf 91       	pop	r27
    20fe:	af 91       	pop	r26
    2100:	9f 91       	pop	r25
    2102:	8f 91       	pop	r24
    2104:	7f 91       	pop	r23
    2106:	6f 91       	pop	r22
    2108:	5f 91       	pop	r21
    210a:	4f 91       	pop	r20
    210c:	3f 91       	pop	r19
    210e:	2f 91       	pop	r18
    2110:	0f 90       	pop	r0
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	0f 90       	pop	r0
    2116:	1f 90       	pop	r1
    2118:	18 95       	reti

0000211a <DIO_u8SetPinValue>:

#include "DIO_private.h"
#include "DIO_interface.h"

u8 DIO_u8SetPinValue(u8 L_u8Port ,u8 L_u8Pin ,u8 L_u8Value)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	28 97       	sbiw	r28, 0x08	; 8
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	6a 83       	std	Y+2, r22	; 0x02
    2132:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Value == HIGH)
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	09 f0       	breq	.+2      	; 0x213c <DIO_u8SetPinValue+0x22>
    213a:	71 c0       	rjmp	.+226    	; 0x221e <DIO_u8SetPinValue+0x104>
	{
		switch(L_u8Port)
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	38 87       	std	Y+8, r19	; 0x08
    2144:	2f 83       	std	Y+7, r18	; 0x07
    2146:	8f 81       	ldd	r24, Y+7	; 0x07
    2148:	98 85       	ldd	r25, Y+8	; 0x08
    214a:	81 30       	cpi	r24, 0x01	; 1
    214c:	91 05       	cpc	r25, r1
    214e:	49 f1       	breq	.+82     	; 0x21a2 <DIO_u8SetPinValue+0x88>
    2150:	2f 81       	ldd	r18, Y+7	; 0x07
    2152:	38 85       	ldd	r19, Y+8	; 0x08
    2154:	22 30       	cpi	r18, 0x02	; 2
    2156:	31 05       	cpc	r19, r1
    2158:	2c f4       	brge	.+10     	; 0x2164 <DIO_u8SetPinValue+0x4a>
    215a:	8f 81       	ldd	r24, Y+7	; 0x07
    215c:	98 85       	ldd	r25, Y+8	; 0x08
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	61 f0       	breq	.+24     	; 0x217a <DIO_u8SetPinValue+0x60>
    2162:	5b c0       	rjmp	.+182    	; 0x221a <DIO_u8SetPinValue+0x100>
    2164:	2f 81       	ldd	r18, Y+7	; 0x07
    2166:	38 85       	ldd	r19, Y+8	; 0x08
    2168:	22 30       	cpi	r18, 0x02	; 2
    216a:	31 05       	cpc	r19, r1
    216c:	71 f1       	breq	.+92     	; 0x21ca <DIO_u8SetPinValue+0xb0>
    216e:	8f 81       	ldd	r24, Y+7	; 0x07
    2170:	98 85       	ldd	r25, Y+8	; 0x08
    2172:	83 30       	cpi	r24, 0x03	; 3
    2174:	91 05       	cpc	r25, r1
    2176:	e9 f1       	breq	.+122    	; 0x21f2 <DIO_u8SetPinValue+0xd8>
    2178:	50 c0       	rjmp	.+160    	; 0x221a <DIO_u8SetPinValue+0x100>
		{
		case PORTA : SET_BIT(PORTA_REG , L_u8Pin); break ;
    217a:	ab e3       	ldi	r26, 0x3B	; 59
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	eb e3       	ldi	r30, 0x3B	; 59
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_u8SetPinValue+0x7e>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_u8SetPinValue+0x7a>
    219c:	84 2b       	or	r24, r20
    219e:	8c 93       	st	X, r24
    21a0:	ba c0       	rjmp	.+372    	; 0x2316 <DIO_u8SetPinValue+0x1fc>
		case PORTB : SET_BIT(PORTB_REG , L_u8Pin); break ;
    21a2:	a8 e3       	ldi	r26, 0x38	; 56
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e8 e3       	ldi	r30, 0x38	; 56
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	48 2f       	mov	r20, r24
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 2e       	mov	r0, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <DIO_u8SetPinValue+0xa6>
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	0a 94       	dec	r0
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <DIO_u8SetPinValue+0xa2>
    21c4:	84 2b       	or	r24, r20
    21c6:	8c 93       	st	X, r24
    21c8:	a6 c0       	rjmp	.+332    	; 0x2316 <DIO_u8SetPinValue+0x1fc>
		case PORTC : SET_BIT(PORTC_REG , L_u8Pin); break ;
    21ca:	a5 e3       	ldi	r26, 0x35	; 53
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e5 e3       	ldi	r30, 0x35	; 53
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	48 2f       	mov	r20, r24
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	02 2e       	mov	r0, r18
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <DIO_u8SetPinValue+0xce>
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	0a 94       	dec	r0
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <DIO_u8SetPinValue+0xca>
    21ec:	84 2b       	or	r24, r20
    21ee:	8c 93       	st	X, r24
    21f0:	92 c0       	rjmp	.+292    	; 0x2316 <DIO_u8SetPinValue+0x1fc>
		case PORTD : SET_BIT(PORTD_REG , L_u8Pin); break ;
    21f2:	a2 e3       	ldi	r26, 0x32	; 50
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e2 e3       	ldi	r30, 0x32	; 50
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	48 2f       	mov	r20, r24
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	02 2e       	mov	r0, r18
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <DIO_u8SetPinValue+0xf6>
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	0a 94       	dec	r0
    2212:	e2 f7       	brpl	.-8      	; 0x220c <DIO_u8SetPinValue+0xf2>
    2214:	84 2b       	or	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	7e c0       	rjmp	.+252    	; 0x2316 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    221a:	1e 82       	std	Y+6, r1	; 0x06
    221c:	7e c0       	rjmp	.+252    	; 0x231a <DIO_u8SetPinValue+0x200>
		}
	}
	else if(L_u8Value == LOW)
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	88 23       	and	r24, r24
    2222:	09 f0       	breq	.+2      	; 0x2226 <DIO_u8SetPinValue+0x10c>
    2224:	76 c0       	rjmp	.+236    	; 0x2312 <DIO_u8SetPinValue+0x1f8>
	{
		switch(L_u8Port)
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	3d 83       	std	Y+5, r19	; 0x05
    222e:	2c 83       	std	Y+4, r18	; 0x04
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	9d 81       	ldd	r25, Y+5	; 0x05
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	91 05       	cpc	r25, r1
    2238:	59 f1       	breq	.+86     	; 0x2290 <DIO_u8SetPinValue+0x176>
    223a:	2c 81       	ldd	r18, Y+4	; 0x04
    223c:	3d 81       	ldd	r19, Y+5	; 0x05
    223e:	22 30       	cpi	r18, 0x02	; 2
    2240:	31 05       	cpc	r19, r1
    2242:	2c f4       	brge	.+10     	; 0x224e <DIO_u8SetPinValue+0x134>
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	69 f0       	breq	.+26     	; 0x2266 <DIO_u8SetPinValue+0x14c>
    224c:	60 c0       	rjmp	.+192    	; 0x230e <DIO_u8SetPinValue+0x1f4>
    224e:	2c 81       	ldd	r18, Y+4	; 0x04
    2250:	3d 81       	ldd	r19, Y+5	; 0x05
    2252:	22 30       	cpi	r18, 0x02	; 2
    2254:	31 05       	cpc	r19, r1
    2256:	89 f1       	breq	.+98     	; 0x22ba <DIO_u8SetPinValue+0x1a0>
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	83 30       	cpi	r24, 0x03	; 3
    225e:	91 05       	cpc	r25, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <DIO_u8SetPinValue+0x14a>
    2262:	40 c0       	rjmp	.+128    	; 0x22e4 <DIO_u8SetPinValue+0x1ca>
    2264:	54 c0       	rjmp	.+168    	; 0x230e <DIO_u8SetPinValue+0x1f4>
		{
		case PORTA : CLEAR_BIT(PORTA_REG , L_u8Pin); break ;
    2266:	ab e3       	ldi	r26, 0x3B	; 59
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	eb e3       	ldi	r30, 0x3B	; 59
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	48 2f       	mov	r20, r24
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	02 2e       	mov	r0, r18
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <DIO_u8SetPinValue+0x16a>
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	0a 94       	dec	r0
    2286:	e2 f7       	brpl	.-8      	; 0x2280 <DIO_u8SetPinValue+0x166>
    2288:	80 95       	com	r24
    228a:	84 23       	and	r24, r20
    228c:	8c 93       	st	X, r24
    228e:	43 c0       	rjmp	.+134    	; 0x2316 <DIO_u8SetPinValue+0x1fc>
		case PORTB : CLEAR_BIT(PORTB_REG , L_u8Pin); break ;
    2290:	a8 e3       	ldi	r26, 0x38	; 56
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e8 e3       	ldi	r30, 0x38	; 56
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	48 2f       	mov	r20, r24
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	02 2e       	mov	r0, r18
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <DIO_u8SetPinValue+0x194>
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <DIO_u8SetPinValue+0x190>
    22b2:	80 95       	com	r24
    22b4:	84 23       	and	r24, r20
    22b6:	8c 93       	st	X, r24
    22b8:	2e c0       	rjmp	.+92     	; 0x2316 <DIO_u8SetPinValue+0x1fc>
		case PORTC : CLEAR_BIT(PORTC_REG , L_u8Pin); break ;
    22ba:	a5 e3       	ldi	r26, 0x35	; 53
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e5 e3       	ldi	r30, 0x35	; 53
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	48 2f       	mov	r20, r24
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	02 2e       	mov	r0, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <DIO_u8SetPinValue+0x1be>
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	0a 94       	dec	r0
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <DIO_u8SetPinValue+0x1ba>
    22dc:	80 95       	com	r24
    22de:	84 23       	and	r24, r20
    22e0:	8c 93       	st	X, r24
    22e2:	19 c0       	rjmp	.+50     	; 0x2316 <DIO_u8SetPinValue+0x1fc>
		case PORTD : CLEAR_BIT(PORTD_REG , L_u8Pin); break ;
    22e4:	a2 e3       	ldi	r26, 0x32	; 50
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e2 e3       	ldi	r30, 0x32	; 50
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	48 2f       	mov	r20, r24
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	02 2e       	mov	r0, r18
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <DIO_u8SetPinValue+0x1e8>
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	0a 94       	dec	r0
    2304:	e2 f7       	brpl	.-8      	; 0x22fe <DIO_u8SetPinValue+0x1e4>
    2306:	80 95       	com	r24
    2308:	84 23       	and	r24, r20
    230a:	8c 93       	st	X, r24
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    230e:	1e 82       	std	Y+6, r1	; 0x06
    2310:	04 c0       	rjmp	.+8      	; 0x231a <DIO_u8SetPinValue+0x200>
		}
	}
	else
	{
		return ERROR ;
    2312:	1e 82       	std	Y+6, r1	; 0x06
    2314:	02 c0       	rjmp	.+4      	; 0x231a <DIO_u8SetPinValue+0x200>
	}
	return NO_ERROR ;
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    231c:	28 96       	adiw	r28, 0x08	; 8
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <DIO_u8SetPinDirection>:
u8 DIO_u8SetPinDirection(u8 L_u8Port ,u8 L_u8Pin ,u8 L_u8Direction)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	28 97       	sbiw	r28, 0x08	; 8
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	6a 83       	std	Y+2, r22	; 0x02
    2346:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Direction== OUTPUT)
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	81 30       	cpi	r24, 0x01	; 1
    234c:	09 f0       	breq	.+2      	; 0x2350 <DIO_u8SetPinDirection+0x22>
    234e:	71 c0       	rjmp	.+226    	; 0x2432 <DIO_u8SetPinDirection+0x104>
	{
		switch(L_u8Port)
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	38 87       	std	Y+8, r19	; 0x08
    2358:	2f 83       	std	Y+7, r18	; 0x07
    235a:	8f 81       	ldd	r24, Y+7	; 0x07
    235c:	98 85       	ldd	r25, Y+8	; 0x08
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	91 05       	cpc	r25, r1
    2362:	49 f1       	breq	.+82     	; 0x23b6 <DIO_u8SetPinDirection+0x88>
    2364:	2f 81       	ldd	r18, Y+7	; 0x07
    2366:	38 85       	ldd	r19, Y+8	; 0x08
    2368:	22 30       	cpi	r18, 0x02	; 2
    236a:	31 05       	cpc	r19, r1
    236c:	2c f4       	brge	.+10     	; 0x2378 <DIO_u8SetPinDirection+0x4a>
    236e:	8f 81       	ldd	r24, Y+7	; 0x07
    2370:	98 85       	ldd	r25, Y+8	; 0x08
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	61 f0       	breq	.+24     	; 0x238e <DIO_u8SetPinDirection+0x60>
    2376:	5b c0       	rjmp	.+182    	; 0x242e <DIO_u8SetPinDirection+0x100>
    2378:	2f 81       	ldd	r18, Y+7	; 0x07
    237a:	38 85       	ldd	r19, Y+8	; 0x08
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 05       	cpc	r19, r1
    2380:	71 f1       	breq	.+92     	; 0x23de <DIO_u8SetPinDirection+0xb0>
    2382:	8f 81       	ldd	r24, Y+7	; 0x07
    2384:	98 85       	ldd	r25, Y+8	; 0x08
    2386:	83 30       	cpi	r24, 0x03	; 3
    2388:	91 05       	cpc	r25, r1
    238a:	e9 f1       	breq	.+122    	; 0x2406 <DIO_u8SetPinDirection+0xd8>
    238c:	50 c0       	rjmp	.+160    	; 0x242e <DIO_u8SetPinDirection+0x100>
		{
		case PORTA : SET_BIT(DDRA_REG , L_u8Pin); break ;
    238e:	aa e3       	ldi	r26, 0x3A	; 58
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ea e3       	ldi	r30, 0x3A	; 58
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	48 2f       	mov	r20, r24
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 2e       	mov	r0, r18
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <DIO_u8SetPinDirection+0x7e>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	0a 94       	dec	r0
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <DIO_u8SetPinDirection+0x7a>
    23b0:	84 2b       	or	r24, r20
    23b2:	8c 93       	st	X, r24
    23b4:	ba c0       	rjmp	.+372    	; 0x252a <DIO_u8SetPinDirection+0x1fc>
		case PORTB : SET_BIT(DDRB_REG , L_u8Pin); break ;
    23b6:	a7 e3       	ldi	r26, 0x37	; 55
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e7 e3       	ldi	r30, 0x37	; 55
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 2e       	mov	r0, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <DIO_u8SetPinDirection+0xa6>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <DIO_u8SetPinDirection+0xa2>
    23d8:	84 2b       	or	r24, r20
    23da:	8c 93       	st	X, r24
    23dc:	a6 c0       	rjmp	.+332    	; 0x252a <DIO_u8SetPinDirection+0x1fc>
		case PORTC : SET_BIT(DDRC_REG , L_u8Pin); break ;
    23de:	a4 e3       	ldi	r26, 0x34	; 52
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e4 e3       	ldi	r30, 0x34	; 52
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	48 2f       	mov	r20, r24
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	02 2e       	mov	r0, r18
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <DIO_u8SetPinDirection+0xce>
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	0a 94       	dec	r0
    23fe:	e2 f7       	brpl	.-8      	; 0x23f8 <DIO_u8SetPinDirection+0xca>
    2400:	84 2b       	or	r24, r20
    2402:	8c 93       	st	X, r24
    2404:	92 c0       	rjmp	.+292    	; 0x252a <DIO_u8SetPinDirection+0x1fc>
		case PORTD : SET_BIT(DDRD_REG , L_u8Pin); break ;
    2406:	a1 e3       	ldi	r26, 0x31	; 49
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e1 e3       	ldi	r30, 0x31	; 49
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	48 2f       	mov	r20, r24
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	02 2e       	mov	r0, r18
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <DIO_u8SetPinDirection+0xf6>
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	0a 94       	dec	r0
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <DIO_u8SetPinDirection+0xf2>
    2428:	84 2b       	or	r24, r20
    242a:	8c 93       	st	X, r24
    242c:	7e c0       	rjmp	.+252    	; 0x252a <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    242e:	1e 82       	std	Y+6, r1	; 0x06
    2430:	7e c0       	rjmp	.+252    	; 0x252e <DIO_u8SetPinDirection+0x200>
		}
	}
	else if(L_u8Direction == INPUT)
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	88 23       	and	r24, r24
    2436:	09 f0       	breq	.+2      	; 0x243a <DIO_u8SetPinDirection+0x10c>
    2438:	76 c0       	rjmp	.+236    	; 0x2526 <DIO_u8SetPinDirection+0x1f8>
	{
		switch(L_u8Port)
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	3d 83       	std	Y+5, r19	; 0x05
    2442:	2c 83       	std	Y+4, r18	; 0x04
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	81 30       	cpi	r24, 0x01	; 1
    244a:	91 05       	cpc	r25, r1
    244c:	59 f1       	breq	.+86     	; 0x24a4 <DIO_u8SetPinDirection+0x176>
    244e:	2c 81       	ldd	r18, Y+4	; 0x04
    2450:	3d 81       	ldd	r19, Y+5	; 0x05
    2452:	22 30       	cpi	r18, 0x02	; 2
    2454:	31 05       	cpc	r19, r1
    2456:	2c f4       	brge	.+10     	; 0x2462 <DIO_u8SetPinDirection+0x134>
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	9d 81       	ldd	r25, Y+5	; 0x05
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f0       	breq	.+26     	; 0x247a <DIO_u8SetPinDirection+0x14c>
    2460:	60 c0       	rjmp	.+192    	; 0x2522 <DIO_u8SetPinDirection+0x1f4>
    2462:	2c 81       	ldd	r18, Y+4	; 0x04
    2464:	3d 81       	ldd	r19, Y+5	; 0x05
    2466:	22 30       	cpi	r18, 0x02	; 2
    2468:	31 05       	cpc	r19, r1
    246a:	89 f1       	breq	.+98     	; 0x24ce <DIO_u8SetPinDirection+0x1a0>
    246c:	8c 81       	ldd	r24, Y+4	; 0x04
    246e:	9d 81       	ldd	r25, Y+5	; 0x05
    2470:	83 30       	cpi	r24, 0x03	; 3
    2472:	91 05       	cpc	r25, r1
    2474:	09 f4       	brne	.+2      	; 0x2478 <DIO_u8SetPinDirection+0x14a>
    2476:	40 c0       	rjmp	.+128    	; 0x24f8 <DIO_u8SetPinDirection+0x1ca>
    2478:	54 c0       	rjmp	.+168    	; 0x2522 <DIO_u8SetPinDirection+0x1f4>
		{
		case PORTA : CLEAR_BIT(DDRA_REG , L_u8Pin); break ;
    247a:	aa e3       	ldi	r26, 0x3A	; 58
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	ea e3       	ldi	r30, 0x3A	; 58
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	48 2f       	mov	r20, r24
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	02 2e       	mov	r0, r18
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <DIO_u8SetPinDirection+0x16a>
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	0a 94       	dec	r0
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <DIO_u8SetPinDirection+0x166>
    249c:	80 95       	com	r24
    249e:	84 23       	and	r24, r20
    24a0:	8c 93       	st	X, r24
    24a2:	43 c0       	rjmp	.+134    	; 0x252a <DIO_u8SetPinDirection+0x1fc>
		case PORTB : CLEAR_BIT(DDRB_REG , L_u8Pin); break ;
    24a4:	a7 e3       	ldi	r26, 0x37	; 55
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	e7 e3       	ldi	r30, 0x37	; 55
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	48 2f       	mov	r20, r24
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	02 2e       	mov	r0, r18
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <DIO_u8SetPinDirection+0x194>
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	0a 94       	dec	r0
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <DIO_u8SetPinDirection+0x190>
    24c6:	80 95       	com	r24
    24c8:	84 23       	and	r24, r20
    24ca:	8c 93       	st	X, r24
    24cc:	2e c0       	rjmp	.+92     	; 0x252a <DIO_u8SetPinDirection+0x1fc>
		case PORTC : CLEAR_BIT(DDRC_REG , L_u8Pin); break ;
    24ce:	a4 e3       	ldi	r26, 0x34	; 52
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e4 e3       	ldi	r30, 0x34	; 52
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	48 2f       	mov	r20, r24
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	02 2e       	mov	r0, r18
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <DIO_u8SetPinDirection+0x1be>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	0a 94       	dec	r0
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <DIO_u8SetPinDirection+0x1ba>
    24f0:	80 95       	com	r24
    24f2:	84 23       	and	r24, r20
    24f4:	8c 93       	st	X, r24
    24f6:	19 c0       	rjmp	.+50     	; 0x252a <DIO_u8SetPinDirection+0x1fc>
		case PORTD : CLEAR_BIT(DDRD_REG , L_u8Pin); break ;
    24f8:	a1 e3       	ldi	r26, 0x31	; 49
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e1 e3       	ldi	r30, 0x31	; 49
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	48 2f       	mov	r20, r24
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	02 2e       	mov	r0, r18
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <DIO_u8SetPinDirection+0x1e8>
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	0a 94       	dec	r0
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <DIO_u8SetPinDirection+0x1e4>
    251a:	80 95       	com	r24
    251c:	84 23       	and	r24, r20
    251e:	8c 93       	st	X, r24
    2520:	04 c0       	rjmp	.+8      	; 0x252a <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    2522:	1e 82       	std	Y+6, r1	; 0x06
    2524:	04 c0       	rjmp	.+8      	; 0x252e <DIO_u8SetPinDirection+0x200>
		}
	}
	else
	{
		return ERROR ;
    2526:	1e 82       	std	Y+6, r1	; 0x06
    2528:	02 c0       	rjmp	.+4      	; 0x252e <DIO_u8SetPinDirection+0x200>
	}

	return NO_ERROR ;
    252a:	91 e0       	ldi	r25, 0x01	; 1
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2530:	28 96       	adiw	r28, 0x08	; 8
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <DIO_u8GET_BIT>:

u8 DIO_u8GET_BIT(u8 L_u8Port ,u8 L_u8Pin )
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	00 d0       	rcall	.+0      	; 0x2548 <DIO_u8GET_BIT+0x6>
    2548:	00 d0       	rcall	.+0      	; 0x254a <DIO_u8GET_BIT+0x8>
    254a:	00 d0       	rcall	.+0      	; 0x254c <DIO_u8GET_BIT+0xa>
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8pinval ;
	switch(L_u8Port)
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	3e 83       	std	Y+6, r19	; 0x06
    255c:	2d 83       	std	Y+5, r18	; 0x05
    255e:	4d 81       	ldd	r20, Y+5	; 0x05
    2560:	5e 81       	ldd	r21, Y+6	; 0x06
    2562:	41 30       	cpi	r20, 0x01	; 1
    2564:	51 05       	cpc	r21, r1
    2566:	41 f1       	breq	.+80     	; 0x25b8 <DIO_u8GET_BIT+0x76>
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	91 05       	cpc	r25, r1
    2570:	34 f4       	brge	.+12     	; 0x257e <DIO_u8GET_BIT+0x3c>
    2572:	2d 81       	ldd	r18, Y+5	; 0x05
    2574:	3e 81       	ldd	r19, Y+6	; 0x06
    2576:	21 15       	cp	r18, r1
    2578:	31 05       	cpc	r19, r1
    257a:	61 f0       	breq	.+24     	; 0x2594 <DIO_u8GET_BIT+0x52>
    257c:	53 c0       	rjmp	.+166    	; 0x2624 <DIO_u8GET_BIT+0xe2>
    257e:	4d 81       	ldd	r20, Y+5	; 0x05
    2580:	5e 81       	ldd	r21, Y+6	; 0x06
    2582:	42 30       	cpi	r20, 0x02	; 2
    2584:	51 05       	cpc	r21, r1
    2586:	51 f1       	breq	.+84     	; 0x25dc <DIO_u8GET_BIT+0x9a>
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	83 30       	cpi	r24, 0x03	; 3
    258e:	91 05       	cpc	r25, r1
    2590:	b9 f1       	breq	.+110    	; 0x2600 <DIO_u8GET_BIT+0xbe>
    2592:	48 c0       	rjmp	.+144    	; 0x2624 <DIO_u8GET_BIT+0xe2>
	{
	case PORTA :L_u8pinval = GET_BIT(PINA_REG , L_u8Pin); break ;
    2594:	e9 e3       	ldi	r30, 0x39	; 57
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	88 2f       	mov	r24, r24
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a9 01       	movw	r20, r18
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <DIO_u8GET_BIT+0x6a>
    25a8:	55 95       	asr	r21
    25aa:	47 95       	ror	r20
    25ac:	8a 95       	dec	r24
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <DIO_u8GET_BIT+0x66>
    25b0:	ca 01       	movw	r24, r20
    25b2:	81 70       	andi	r24, 0x01	; 1
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	38 c0       	rjmp	.+112    	; 0x2628 <DIO_u8GET_BIT+0xe6>
	case PORTB :L_u8pinval = GET_BIT(PINB_REG , L_u8Pin); break ;
    25b8:	e6 e3       	ldi	r30, 0x36	; 54
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a9 01       	movw	r20, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <DIO_u8GET_BIT+0x8e>
    25cc:	55 95       	asr	r21
    25ce:	47 95       	ror	r20
    25d0:	8a 95       	dec	r24
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <DIO_u8GET_BIT+0x8a>
    25d4:	ca 01       	movw	r24, r20
    25d6:	81 70       	andi	r24, 0x01	; 1
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	26 c0       	rjmp	.+76     	; 0x2628 <DIO_u8GET_BIT+0xe6>
	case PORTC :L_u8pinval = GET_BIT(PINC_REG , L_u8Pin); break ;
    25dc:	e3 e3       	ldi	r30, 0x33	; 51
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a9 01       	movw	r20, r18
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <DIO_u8GET_BIT+0xb2>
    25f0:	55 95       	asr	r21
    25f2:	47 95       	ror	r20
    25f4:	8a 95       	dec	r24
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <DIO_u8GET_BIT+0xae>
    25f8:	ca 01       	movw	r24, r20
    25fa:	81 70       	andi	r24, 0x01	; 1
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	14 c0       	rjmp	.+40     	; 0x2628 <DIO_u8GET_BIT+0xe6>
	case PORTD :L_u8pinval = GET_BIT(PIND_REG , L_u8Pin); break ;
    2600:	e0 e3       	ldi	r30, 0x30	; 48
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a9 01       	movw	r20, r18
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <DIO_u8GET_BIT+0xd6>
    2614:	55 95       	asr	r21
    2616:	47 95       	ror	r20
    2618:	8a 95       	dec	r24
    261a:	e2 f7       	brpl	.-8      	; 0x2614 <DIO_u8GET_BIT+0xd2>
    261c:	ca 01       	movw	r24, r20
    261e:	81 70       	andi	r24, 0x01	; 1
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <DIO_u8GET_BIT+0xe6>
	default : return ERROR ; break ;
    2624:	1c 82       	std	Y+4, r1	; 0x04
    2626:	02 c0       	rjmp	.+4      	; 0x262c <DIO_u8GET_BIT+0xea>
	}

	return L_u8pinval ;
    2628:	59 81       	ldd	r21, Y+1	; 0x01
    262a:	5c 83       	std	Y+4, r21	; 0x04
    262c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    262e:	26 96       	adiw	r28, 0x06	; 6
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <DIO_u8GetPort>:

u8 DIO_u8GetPort(u8 L_u8Port )
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	00 d0       	rcall	.+0      	; 0x2646 <DIO_u8GetPort+0x6>
    2646:	00 d0       	rcall	.+0      	; 0x2648 <DIO_u8GetPort+0x8>
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8pinval ;
	switch(L_u8Port)
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	3d 83       	std	Y+5, r19	; 0x05
    2658:	2c 83       	std	Y+4, r18	; 0x04
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	9d 81       	ldd	r25, Y+5	; 0x05
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	91 05       	cpc	r25, r1
    2662:	d1 f0       	breq	.+52     	; 0x2698 <DIO_u8GetPort+0x58>
    2664:	2c 81       	ldd	r18, Y+4	; 0x04
    2666:	3d 81       	ldd	r19, Y+5	; 0x05
    2668:	22 30       	cpi	r18, 0x02	; 2
    266a:	31 05       	cpc	r19, r1
    266c:	2c f4       	brge	.+10     	; 0x2678 <DIO_u8GetPort+0x38>
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	9d 81       	ldd	r25, Y+5	; 0x05
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	61 f0       	breq	.+24     	; 0x268e <DIO_u8GetPort+0x4e>
    2676:	1f c0       	rjmp	.+62     	; 0x26b6 <DIO_u8GetPort+0x76>
    2678:	2c 81       	ldd	r18, Y+4	; 0x04
    267a:	3d 81       	ldd	r19, Y+5	; 0x05
    267c:	22 30       	cpi	r18, 0x02	; 2
    267e:	31 05       	cpc	r19, r1
    2680:	81 f0       	breq	.+32     	; 0x26a2 <DIO_u8GetPort+0x62>
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	83 30       	cpi	r24, 0x03	; 3
    2688:	91 05       	cpc	r25, r1
    268a:	81 f0       	breq	.+32     	; 0x26ac <DIO_u8GetPort+0x6c>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <DIO_u8GetPort+0x76>
	{
	case PORTA :L_u8pinval = PINA_REG; break ;
    268e:	e9 e3       	ldi	r30, 0x39	; 57
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	11 c0       	rjmp	.+34     	; 0x26ba <DIO_u8GetPort+0x7a>
	case PORTB :L_u8pinval = PINB_REG; break ;
    2698:	e6 e3       	ldi	r30, 0x36	; 54
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	0c c0       	rjmp	.+24     	; 0x26ba <DIO_u8GetPort+0x7a>
	case PORTC :L_u8pinval = PINC_REG; break ;
    26a2:	e3 e3       	ldi	r30, 0x33	; 51
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	07 c0       	rjmp	.+14     	; 0x26ba <DIO_u8GetPort+0x7a>
	case PORTD :L_u8pinval = PIND_REG; break ;
    26ac:	e0 e3       	ldi	r30, 0x30	; 48
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <DIO_u8GetPort+0x7a>
	default : return ERROR ; break ;
    26b6:	1b 82       	std	Y+3, r1	; 0x03
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <DIO_u8GetPort+0x7e>
	}

	return L_u8pinval ;
    26ba:	99 81       	ldd	r25, Y+1	; 0x01
    26bc:	9b 83       	std	Y+3, r25	; 0x03
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
}
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 L_u8Port ,u8 L_u8Value)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <DIO_u8SetPortValue+0x6>
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <DIO_u8SetPortValue+0x8>
    26d8:	0f 92       	push	r0
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	3d 83       	std	Y+5, r19	; 0x05
    26ea:	2c 83       	std	Y+4, r18	; 0x04
    26ec:	8c 81       	ldd	r24, Y+4	; 0x04
    26ee:	9d 81       	ldd	r25, Y+5	; 0x05
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	91 05       	cpc	r25, r1
    26f4:	d1 f0       	breq	.+52     	; 0x272a <DIO_u8SetPortValue+0x5a>
    26f6:	2c 81       	ldd	r18, Y+4	; 0x04
    26f8:	3d 81       	ldd	r19, Y+5	; 0x05
    26fa:	22 30       	cpi	r18, 0x02	; 2
    26fc:	31 05       	cpc	r19, r1
    26fe:	2c f4       	brge	.+10     	; 0x270a <DIO_u8SetPortValue+0x3a>
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	9d 81       	ldd	r25, Y+5	; 0x05
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	61 f0       	breq	.+24     	; 0x2720 <DIO_u8SetPortValue+0x50>
    2708:	1f c0       	rjmp	.+62     	; 0x2748 <DIO_u8SetPortValue+0x78>
    270a:	2c 81       	ldd	r18, Y+4	; 0x04
    270c:	3d 81       	ldd	r19, Y+5	; 0x05
    270e:	22 30       	cpi	r18, 0x02	; 2
    2710:	31 05       	cpc	r19, r1
    2712:	81 f0       	breq	.+32     	; 0x2734 <DIO_u8SetPortValue+0x64>
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	9d 81       	ldd	r25, Y+5	; 0x05
    2718:	83 30       	cpi	r24, 0x03	; 3
    271a:	91 05       	cpc	r25, r1
    271c:	81 f0       	breq	.+32     	; 0x273e <DIO_u8SetPortValue+0x6e>
    271e:	14 c0       	rjmp	.+40     	; 0x2748 <DIO_u8SetPortValue+0x78>
	{
	case PORTA: PORTA_REG = L_u8Value; break;
    2720:	eb e3       	ldi	r30, 0x3B	; 59
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	80 83       	st	Z, r24
    2728:	11 c0       	rjmp	.+34     	; 0x274c <DIO_u8SetPortValue+0x7c>
	case PORTB: PORTB_REG = L_u8Value; break;
    272a:	e8 e3       	ldi	r30, 0x38	; 56
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	80 83       	st	Z, r24
    2732:	0c c0       	rjmp	.+24     	; 0x274c <DIO_u8SetPortValue+0x7c>
	case PORTC: PORTC_REG = L_u8Value; break;
    2734:	e5 e3       	ldi	r30, 0x35	; 53
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	80 83       	st	Z, r24
    273c:	07 c0       	rjmp	.+14     	; 0x274c <DIO_u8SetPortValue+0x7c>
	case PORTD: PORTD_REG = L_u8Value; break;
    273e:	e2 e3       	ldi	r30, 0x32	; 50
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	80 83       	st	Z, r24
    2746:	02 c0       	rjmp	.+4      	; 0x274c <DIO_u8SetPortValue+0x7c>
	default: return ERROR; break;
    2748:	1b 82       	std	Y+3, r1	; 0x03
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <DIO_u8SetPortValue+0x80>
	}
	return NO_ERROR ;
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	9b 83       	std	Y+3, r25	; 0x03
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 L_u8Port ,u8 L_u8Direction)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <DIO_u8SetPortDirection+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <DIO_u8SetPortDirection+0x8>
    276a:	0f 92       	push	r0
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	6a 83       	std	Y+2, r22	; 0x02
	if(L_u8Direction==OUTPUT)
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	81 30       	cpi	r24, 0x01	; 1
    2778:	19 f4       	brne	.+6      	; 0x2780 <DIO_u8SetPortDirection+0x1e>
		L_u8Direction =0xFF;
    277a:	8f ef       	ldi	r24, 0xFF	; 255
    277c:	8a 83       	std	Y+2, r24	; 0x02
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <DIO_u8SetPortDirection+0x20>
	else
	{
		L_u8Direction =0x00;
    2780:	1a 82       	std	Y+2, r1	; 0x02
	}
	switch(L_u8Port)
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	28 2f       	mov	r18, r24
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	3d 83       	std	Y+5, r19	; 0x05
    278a:	2c 83       	std	Y+4, r18	; 0x04
    278c:	8c 81       	ldd	r24, Y+4	; 0x04
    278e:	9d 81       	ldd	r25, Y+5	; 0x05
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	91 05       	cpc	r25, r1
    2794:	d1 f0       	breq	.+52     	; 0x27ca <DIO_u8SetPortDirection+0x68>
    2796:	2c 81       	ldd	r18, Y+4	; 0x04
    2798:	3d 81       	ldd	r19, Y+5	; 0x05
    279a:	22 30       	cpi	r18, 0x02	; 2
    279c:	31 05       	cpc	r19, r1
    279e:	2c f4       	brge	.+10     	; 0x27aa <DIO_u8SetPortDirection+0x48>
    27a0:	8c 81       	ldd	r24, Y+4	; 0x04
    27a2:	9d 81       	ldd	r25, Y+5	; 0x05
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	61 f0       	breq	.+24     	; 0x27c0 <DIO_u8SetPortDirection+0x5e>
    27a8:	1f c0       	rjmp	.+62     	; 0x27e8 <DIO_u8SetPortDirection+0x86>
    27aa:	2c 81       	ldd	r18, Y+4	; 0x04
    27ac:	3d 81       	ldd	r19, Y+5	; 0x05
    27ae:	22 30       	cpi	r18, 0x02	; 2
    27b0:	31 05       	cpc	r19, r1
    27b2:	81 f0       	breq	.+32     	; 0x27d4 <DIO_u8SetPortDirection+0x72>
    27b4:	8c 81       	ldd	r24, Y+4	; 0x04
    27b6:	9d 81       	ldd	r25, Y+5	; 0x05
    27b8:	83 30       	cpi	r24, 0x03	; 3
    27ba:	91 05       	cpc	r25, r1
    27bc:	81 f0       	breq	.+32     	; 0x27de <DIO_u8SetPortDirection+0x7c>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <DIO_u8SetPortDirection+0x86>
	{
		case PORTA: DDRA_REG = L_u8Direction; break;
    27c0:	ea e3       	ldi	r30, 0x3A	; 58
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	80 83       	st	Z, r24
    27c8:	11 c0       	rjmp	.+34     	; 0x27ec <DIO_u8SetPortDirection+0x8a>
		case PORTB: DDRB_REG = L_u8Direction; break;
    27ca:	e7 e3       	ldi	r30, 0x37	; 55
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	80 83       	st	Z, r24
    27d2:	0c c0       	rjmp	.+24     	; 0x27ec <DIO_u8SetPortDirection+0x8a>
		case PORTC: DDRC_REG = L_u8Direction; break;
    27d4:	e4 e3       	ldi	r30, 0x34	; 52
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	80 83       	st	Z, r24
    27dc:	07 c0       	rjmp	.+14     	; 0x27ec <DIO_u8SetPortDirection+0x8a>
		case PORTD: DDRD_REG = L_u8Direction; break;
    27de:	e1 e3       	ldi	r30, 0x31	; 49
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	80 83       	st	Z, r24
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <DIO_u8SetPortDirection+0x8a>
		default: return ERROR; break;
    27e8:	1b 82       	std	Y+3, r1	; 0x03
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_u8SetPortDirection+0x8e>
	}
	return NO_ERROR ;
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	9b 83       	std	Y+3, r25	; 0x03
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <ADC_Init>:
#include "ADC_interface.h"



void ADC_Init(void)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <ADC_Init+0x6>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
	u8 ADMUX_Temp =0;
    280c:	1a 82       	std	Y+2, r1	; 0x02
	u8 ADCSRA_Temp = 0;
    280e:	19 82       	std	Y+1, r1	; 0x01

	/* Set Adjust Value */
	ADMUX_Temp |= (ADC_ADJUST << ADLAR);

	/* Set Reference Value */
	ADMUX_Temp |= (ADC_REF << REFS0);
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	80 64       	ori	r24, 0x40	; 64
    2814:	8a 83       	std	Y+2, r24	; 0x02

	/* Write to Register */
	ADMUX_Register = ADMUX_Temp;
    2816:	e7 e2       	ldi	r30, 0x27	; 39
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	80 83       	st	Z, r24

	/* Set Pre-scaler value */
	ADCSRA_Temp |= (ADC_PSC << ADPS0);
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	83 60       	ori	r24, 0x03	; 3
    2822:	89 83       	std	Y+1, r24	; 0x01

	/* Enable Register */
	SET_BIT(ADCSRA_Temp, ADEN);
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	80 68       	ori	r24, 0x80	; 128
    2828:	89 83       	std	Y+1, r24	; 0x01

	/* Write to Register */
	ADCSRA_Register = ADCSRA_Temp;
    282a:	e6 e2       	ldi	r30, 0x26	; 38
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	80 83       	st	Z, r24
}
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <ADC_StartConversion>:


u16 ADC_StartConversion(u8 L_u8Channel)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	0f 92       	push	r0
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	89 83       	std	Y+1, r24	; 0x01
	/* Clear MUX bits */
	ADMUX_Register &= ~ADMUX_MUX_MASK;
    2848:	a7 e2       	ldi	r26, 0x27	; 39
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e7 e2       	ldi	r30, 0x27	; 39
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	80 7e       	andi	r24, 0xE0	; 224
    2854:	8c 93       	st	X, r24

	/* Select Channel */
	ADMUX_Register |= (L_u8Channel << MUX0);
    2856:	a7 e2       	ldi	r26, 0x27	; 39
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e7 e2       	ldi	r30, 0x27	; 39
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	90 81       	ld	r25, Z
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	89 2b       	or	r24, r25
    2864:	8c 93       	st	X, r24

	/* Start Conversion */
	SET_BIT(ADCSRA_Register, ADSC);
    2866:	a6 e2       	ldi	r26, 0x26	; 38
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e6 e2       	ldi	r30, 0x26	; 38
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	80 64       	ori	r24, 0x40	; 64
    2872:	8c 93       	st	X, r24


	/* Wait for ADC to finish conversion */
	while(GET_BIT(ADCSRA_Register, ADIF) == 0)
    2874:	e6 e2       	ldi	r30, 0x26	; 38
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	82 95       	swap	r24
    287c:	8f 70       	andi	r24, 0x0F	; 15
    287e:	88 2f       	mov	r24, r24
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	81 70       	andi	r24, 0x01	; 1
    2884:	90 70       	andi	r25, 0x00	; 0
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	a9 f3       	breq	.-22     	; 0x2874 <ADC_StartConversion+0x38>
	{
		/* Wait for ADC to finish */
	}

	/* Clear ADIF Flag */
	SET_BIT(ADCSRA_Register, ADIF);
    288a:	a6 e2       	ldi	r26, 0x26	; 38
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e6 e2       	ldi	r30, 0x26	; 38
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	80 61       	ori	r24, 0x10	; 16
    2896:	8c 93       	st	X, r24


	return ADCDATA_Register;
    2898:	e4 e2       	ldi	r30, 0x24	; 36
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
}
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <Stepper_Init>:
#include "Stepper_interface.h"

static u8 current_pattern = 0;

void Stepper_Init(void)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <Stepper_Init+0x6>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i<NUM_OF_COILS; i++)
    28b2:	1a 82       	std	Y+2, r1	; 0x02
    28b4:	19 82       	std	Y+1, r1	; 0x01
    28b6:	1a c0       	rjmp	.+52     	; 0x28ec <Stepper_Init+0x44>
	{
		DIO_u8SetPinDirection(coils[i].port, coils[i].pin, OUTPUT);
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	fc 01       	movw	r30, r24
    28c2:	e8 5c       	subi	r30, 0xC8	; 200
    28c4:	fe 4f       	sbci	r31, 0xFE	; 254
    28c6:	20 81       	ld	r18, Z
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	fc 01       	movw	r30, r24
    28d2:	e7 5c       	subi	r30, 0xC7	; 199
    28d4:	fe 4f       	sbci	r31, 0xFE	; 254
    28d6:	90 81       	ld	r25, Z
    28d8:	82 2f       	mov	r24, r18
    28da:	69 2f       	mov	r22, r25
    28dc:	41 e0       	ldi	r20, 0x01	; 1
    28de:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>

static u8 current_pattern = 0;

void Stepper_Init(void)
{
	for(int i=0; i<NUM_OF_COILS; i++)
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	84 30       	cpi	r24, 0x04	; 4
    28f2:	91 05       	cpc	r25, r1
    28f4:	08 f3       	brcs	.-62     	; 0x28b8 <Stepper_Init+0x10>
	{
		DIO_u8SetPinDirection(coils[i].port, coils[i].pin, OUTPUT);
	}

}
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <Stepper_StepCW>:

void Stepper_StepCW(void)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	0f 92       	push	r0
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
	current_pattern++;
    290a:	80 91 80 01 	lds	r24, 0x0180
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	80 93 80 01 	sts	0x0180, r24
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    2914:	19 82       	std	Y+1, r1	; 0x01
    2916:	30 c0       	rjmp	.+96     	; 0x2978 <Stepper_StepCW+0x78>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	fc 01       	movw	r30, r24
    2924:	e8 5c       	subi	r30, 0xC8	; 200
    2926:	fe 4f       	sbci	r31, 0xFE	; 254
    2928:	40 81       	ld	r20, Z
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	fc 01       	movw	r30, r24
    2936:	e7 5c       	subi	r30, 0xC7	; 199
    2938:	fe 4f       	sbci	r31, 0xFE	; 254
    293a:	50 81       	ld	r21, Z
    293c:	80 91 80 01 	lds	r24, 0x0180
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	fc 01       	movw	r30, r24
    2946:	e0 5a       	subi	r30, 0xA0	; 160
    2948:	fe 4f       	sbci	r31, 0xFE	; 254
    294a:	80 81       	ld	r24, Z
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	88 2f       	mov	r24, r24
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	b9 01       	movw	r22, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <Stepper_StepCW+0x5e>
    295a:	75 95       	asr	r23
    295c:	67 95       	ror	r22
    295e:	8a 95       	dec	r24
    2960:	e2 f7       	brpl	.-8      	; 0x295a <Stepper_StepCW+0x5a>
    2962:	cb 01       	movw	r24, r22
    2964:	98 2f       	mov	r25, r24
    2966:	91 70       	andi	r25, 0x01	; 1
    2968:	84 2f       	mov	r24, r20
    296a:	65 2f       	mov	r22, r21
    296c:	49 2f       	mov	r20, r25
    296e:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
}

void Stepper_StepCW(void)
{
	current_pattern++;
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	8f 5f       	subi	r24, 0xFF	; 255
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	84 30       	cpi	r24, 0x04	; 4
    297c:	68 f2       	brcs	.-102    	; 0x2918 <Stepper_StepCW+0x18>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
	}
	if(current_pattern > 7) current_pattern = 0;
    297e:	80 91 80 01 	lds	r24, 0x0180
    2982:	88 30       	cpi	r24, 0x08	; 8
    2984:	10 f0       	brcs	.+4      	; 0x298a <Stepper_StepCW+0x8a>
    2986:	10 92 80 01 	sts	0x0180, r1
}
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <Stepper_StepCCW>:

void Stepper_StepCCW(void)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	0f 92       	push	r0
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	current_pattern--;
    299c:	80 91 80 01 	lds	r24, 0x0180
    29a0:	81 50       	subi	r24, 0x01	; 1
    29a2:	80 93 80 01 	sts	0x0180, r24
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    29a6:	19 82       	std	Y+1, r1	; 0x01
    29a8:	30 c0       	rjmp	.+96     	; 0x2a0a <Stepper_StepCCW+0x78>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	88 2f       	mov	r24, r24
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	fc 01       	movw	r30, r24
    29b6:	e8 5c       	subi	r30, 0xC8	; 200
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ba:	40 81       	ld	r20, Z
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	fc 01       	movw	r30, r24
    29c8:	e7 5c       	subi	r30, 0xC7	; 199
    29ca:	fe 4f       	sbci	r31, 0xFE	; 254
    29cc:	50 81       	ld	r21, Z
    29ce:	80 91 80 01 	lds	r24, 0x0180
    29d2:	88 2f       	mov	r24, r24
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	fc 01       	movw	r30, r24
    29d8:	e0 5a       	subi	r30, 0xA0	; 160
    29da:	fe 4f       	sbci	r31, 0xFE	; 254
    29dc:	80 81       	ld	r24, Z
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	b9 01       	movw	r22, r18
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <Stepper_StepCCW+0x5e>
    29ec:	75 95       	asr	r23
    29ee:	67 95       	ror	r22
    29f0:	8a 95       	dec	r24
    29f2:	e2 f7       	brpl	.-8      	; 0x29ec <Stepper_StepCCW+0x5a>
    29f4:	cb 01       	movw	r24, r22
    29f6:	98 2f       	mov	r25, r24
    29f8:	91 70       	andi	r25, 0x01	; 1
    29fa:	84 2f       	mov	r24, r20
    29fc:	65 2f       	mov	r22, r21
    29fe:	49 2f       	mov	r20, r25
    2a00:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
}

void Stepper_StepCCW(void)
{
	current_pattern--;
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	84 30       	cpi	r24, 0x04	; 4
    2a0e:	68 f2       	brcs	.-102    	; 0x29aa <Stepper_StepCCW+0x18>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
	}
	if(current_pattern > 7) current_pattern = 7;
    2a10:	80 91 80 01 	lds	r24, 0x0180
    2a14:	88 30       	cpi	r24, 0x08	; 8
    2a16:	18 f0       	brcs	.+6      	; 0x2a1e <Stepper_StepCCW+0x8c>
    2a18:	87 e0       	ldi	r24, 0x07	; 7
    2a1a:	80 93 80 01 	sts	0x0180, r24
}
    2a1e:	0f 90       	pop	r0
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <SevenSegment_voidInit>:
#include "SS_config.h"
#include "SS_interface.h"


void SevenSegment_voidInit()
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(SEVEN_SEGMENT1_PORT, 0xFF);
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	6f ef       	ldi	r22, 0xFF	; 255
    2a32:	0e 94 b1 13 	call	0x2762	; 0x2762 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, 0x00);
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <DIO_u8SetPortValue>
}
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <SevenSegment_voidSetValue>:

void SevenSegment_voidSetValue(u8 L_u8UnitNo, u8 L_u8Value)
{
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <SevenSegment_voidSetValue+0x6>
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8UnitNo)
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	71 f4       	brne	.+28     	; 0x2a7c <SevenSegment_voidSetValue+0x34>
	{
	case SEVEN_SEGMENT_UNIT1: DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, digits[L_u8Value]);break;
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	88 2f       	mov	r24, r24
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	fc 01       	movw	r30, r24
    2a68:	e8 59       	subi	r30, 0x98	; 152
    2a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6c:	80 81       	ld	r24, Z
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	b9 01       	movw	r22, r18
    2a78:	0e 94 68 13 	call	0x26d0	; 0x26d0 <DIO_u8SetPortValue>
	}
}
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <SevenSegment_voidClear>:

void SevenSegment_voidClear(u8 L_u8UnitNo)
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	0f 92       	push	r0
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8UnitNo)
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	88 2f       	mov	r24, r24
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	31 f4       	brne	.+12     	; 0x2aa8 <SevenSegment_voidClear+0x22>
	{
	case SEVEN_SEGMENT_UNIT1: DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, 0x00);break;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <DIO_u8SetPortValue>
	}
}
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <Servo_Init>:
#include "Servo_private.h"
#include "Servo_config.h"
#include "Servo_interface.h"

void Servo_Init(void)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTD, PIN5, OUTPUT);
    2ab8:	83 e0       	ldi	r24, 0x03	; 3
    2aba:	65 e0       	ldi	r22, 0x05	; 5
    2abc:	41 e0       	ldi	r20, 0x01	; 1
    2abe:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTD, PIN4, OUTPUT);
    2ac2:	83 e0       	ldi	r24, 0x03	; 3
    2ac4:	64 e0       	ldi	r22, 0x04	; 4
    2ac6:	41 e0       	ldi	r20, 0x01	; 1
    2ac8:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	TIM1_voidFPWMInit(SERVO_PERIOD_US);
    2acc:	80 e2       	ldi	r24, 0x20	; 32
    2ace:	9e e4       	ldi	r25, 0x4E	; 78
    2ad0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <TIM1_voidFPWMInit>
}
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <Servo_SetAngle>:

void Servo_SetAngle(u8 servo, s8 angle)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	28 97       	sbiw	r28, 0x08	; 8
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	6e 83       	std	Y+6, r22	; 0x06
	u32 tmp = (angle + (s8) 90);
    2af2:	8e 81       	ldd	r24, Y+6	; 0x06
    2af4:	99 27       	eor	r25, r25
    2af6:	87 fd       	sbrc	r24, 7
    2af8:	90 95       	com	r25
    2afa:	86 5a       	subi	r24, 0xA6	; 166
    2afc:	9f 4f       	sbci	r25, 0xFF	; 255
    2afe:	aa 27       	eor	r26, r26
    2b00:	97 fd       	sbrc	r25, 7
    2b02:	a0 95       	com	r26
    2b04:	ba 2f       	mov	r27, r26
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	ab 83       	std	Y+3, r26	; 0x03
    2b0c:	bc 83       	std	Y+4, r27	; 0x04
	tmp = (tmp * 1000)/180;
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	ab 81       	ldd	r26, Y+3	; 0x03
    2b14:	bc 81       	ldd	r27, Y+4	; 0x04
    2b16:	28 ee       	ldi	r18, 0xE8	; 232
    2b18:	33 e0       	ldi	r19, 0x03	; 3
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <__mulsi3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	24 eb       	ldi	r18, 0xB4	; 180
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
    2b3a:	da 01       	movw	r26, r20
    2b3c:	c9 01       	movw	r24, r18
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	9a 83       	std	Y+2, r25	; 0x02
    2b42:	ab 83       	std	Y+3, r26	; 0x03
    2b44:	bc 83       	std	Y+4, r27	; 0x04

	switch(servo)
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	38 87       	std	Y+8, r19	; 0x08
    2b4e:	2f 83       	std	Y+7, r18	; 0x07
    2b50:	8f 81       	ldd	r24, Y+7	; 0x07
    2b52:	98 85       	ldd	r25, Y+8	; 0x08
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	31 f0       	breq	.+12     	; 0x2b64 <Servo_SetAngle+0x8a>
    2b58:	2f 81       	ldd	r18, Y+7	; 0x07
    2b5a:	38 85       	ldd	r19, Y+8	; 0x08
    2b5c:	21 30       	cpi	r18, 0x01	; 1
    2b5e:	31 05       	cpc	r19, r1
    2b60:	59 f0       	breq	.+22     	; 0x2b78 <Servo_SetAngle+0x9e>
    2b62:	13 c0       	rjmp	.+38     	; 0x2b8a <Servo_SetAngle+0xb0>
	{
	case SERVO1: TIM1_setDutyCycle(SERVO1_CH, 1000 + ((u16) tmp)); break;
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	9c 01       	movw	r18, r24
    2b6a:	28 51       	subi	r18, 0x18	; 24
    2b6c:	3c 4f       	sbci	r19, 0xFC	; 252
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	b9 01       	movw	r22, r18
    2b72:	0e 94 0e 0b 	call	0x161c	; 0x161c <TIM1_setDutyCycle>
    2b76:	09 c0       	rjmp	.+18     	; 0x2b8a <Servo_SetAngle+0xb0>
	case SERVO2: TIM1_setDutyCycle(SERVO2_CH, 1000 + ((u16) tmp)); break;
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	9c 01       	movw	r18, r24
    2b7e:	28 51       	subi	r18, 0x18	; 24
    2b80:	3c 4f       	sbci	r19, 0xFC	; 252
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	b9 01       	movw	r22, r18
    2b86:	0e 94 0e 0b 	call	0x161c	; 0x161c <TIM1_setDutyCycle>
	}

}
    2b8a:	28 96       	adiw	r28, 0x08	; 8
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	08 95       	ret

00002b9c <Motor_Init>:
#include "Motor_config.h"
#include "Motor_interface.h"
#include <util/delay.h>

void Motor_Init(void)
{
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(MOTOR_CCW_PORT, MOTOR_CCW_PIN, OUTPUT);
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_CW_PORT, MOTOR_CW_PIN, OUTPUT);
    2bae:	82 e0       	ldi	r24, 0x02	; 2
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	Motor_Stop();
    2bb8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Motor_Stop>
}
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <Motor_SetDirection>:
void Motor_SetDirection(u8 L_u8Direction)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	6f 97       	sbiw	r28, 0x1f	; 31
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	8d 8f       	std	Y+29, r24	; 0x1d
	switch(L_u8Direction)
    2bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	3f 8f       	std	Y+31, r19	; 0x1f
    2be0:	2e 8f       	std	Y+30, r18	; 0x1e
    2be2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2be4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	39 f0       	breq	.+14     	; 0x2bf8 <Motor_SetDirection+0x36>
    2bea:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2bec:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2bee:	21 30       	cpi	r18, 0x01	; 1
    2bf0:	31 05       	cpc	r19, r1
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <Motor_SetDirection+0x34>
    2bf4:	7e c0       	rjmp	.+252    	; 0x2cf2 <Motor_SetDirection+0x130>
    2bf6:	f9 c0       	rjmp	.+498    	; 0x2dea <Motor_SetDirection+0x228>
	{
	case MOTOR_CW:
		DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, LOW);
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	a0 e8       	ldi	r26, 0x80	; 128
    2c08:	bf e3       	ldi	r27, 0x3F	; 63
    2c0a:	89 8f       	std	Y+25, r24	; 0x19
    2c0c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c0e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c12:	69 8d       	ldd	r22, Y+25	; 0x19
    2c14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	4a ef       	ldi	r20, 0xFA	; 250
    2c20:	54 e4       	ldi	r21, 0x44	; 68
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	8d 8b       	std	Y+21, r24	; 0x15
    2c2c:	9e 8b       	std	Y+22, r25	; 0x16
    2c2e:	af 8b       	std	Y+23, r26	; 0x17
    2c30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c32:	6d 89       	ldd	r22, Y+21	; 0x15
    2c34:	7e 89       	ldd	r23, Y+22	; 0x16
    2c36:	8f 89       	ldd	r24, Y+23	; 0x17
    2c38:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	2c f4       	brge	.+10     	; 0x2c54 <Motor_SetDirection+0x92>
		__ticks = 1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9c 8b       	std	Y+20, r25	; 0x14
    2c50:	8b 8b       	std	Y+19, r24	; 0x13
    2c52:	3f c0       	rjmp	.+126    	; 0x2cd2 <Motor_SetDirection+0x110>
	else if (__tmp > 65535)
    2c54:	6d 89       	ldd	r22, Y+21	; 0x15
    2c56:	7e 89       	ldd	r23, Y+22	; 0x16
    2c58:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	3f ef       	ldi	r19, 0xFF	; 255
    2c60:	4f e7       	ldi	r20, 0x7F	; 127
    2c62:	57 e4       	ldi	r21, 0x47	; 71
    2c64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c68:	18 16       	cp	r1, r24
    2c6a:	4c f5       	brge	.+82     	; 0x2cbe <Motor_SetDirection+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9c 8b       	std	Y+20, r25	; 0x14
    2c92:	8b 8b       	std	Y+19, r24	; 0x13
    2c94:	0f c0       	rjmp	.+30     	; 0x2cb4 <Motor_SetDirection+0xf2>
    2c96:	88 ec       	ldi	r24, 0xC8	; 200
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9a 8b       	std	Y+18, r25	; 0x12
    2c9c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c9e:	89 89       	ldd	r24, Y+17	; 0x11
    2ca0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <Motor_SetDirection+0xe0>
    2ca6:	9a 8b       	std	Y+18, r25	; 0x12
    2ca8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2caa:	8b 89       	ldd	r24, Y+19	; 0x13
    2cac:	9c 89       	ldd	r25, Y+20	; 0x14
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	9c 8b       	std	Y+20, r25	; 0x14
    2cb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <Motor_SetDirection+0xd4>
    2cbc:	14 c0       	rjmp	.+40     	; 0x2ce6 <Motor_SetDirection+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9c 8b       	std	Y+20, r25	; 0x14
    2cd0:	8b 8b       	std	Y+19, r24	; 0x13
    2cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd6:	98 8b       	std	Y+16, r25	; 0x10
    2cd8:	8f 87       	std	Y+15, r24	; 0x0f
    2cda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cdc:	98 89       	ldd	r25, Y+16	; 0x10
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <Motor_SetDirection+0x11c>
    2ce2:	98 8b       	std	Y+16, r25	; 0x10
    2ce4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, HIGH);
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	41 e0       	ldi	r20, 0x01	; 1
    2cec:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2cf0:	7c c0       	rjmp	.+248    	; 0x2dea <Motor_SetDirection+0x228>
		break;
	case MOTOR_CCW:
		DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, LOW);
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a0 e8       	ldi	r26, 0x80	; 128
    2d02:	bf e3       	ldi	r27, 0x3F	; 63
    2d04:	8b 87       	std	Y+11, r24	; 0x0b
    2d06:	9c 87       	std	Y+12, r25	; 0x0c
    2d08:	ad 87       	std	Y+13, r26	; 0x0d
    2d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a ef       	ldi	r20, 0xFA	; 250
    2d1a:	54 e4       	ldi	r21, 0x44	; 68
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	8f 83       	std	Y+7, r24	; 0x07
    2d26:	98 87       	std	Y+8, r25	; 0x08
    2d28:	a9 87       	std	Y+9, r26	; 0x09
    2d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2e:	78 85       	ldd	r23, Y+8	; 0x08
    2d30:	89 85       	ldd	r24, Y+9	; 0x09
    2d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <Motor_SetDirection+0x18c>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <Motor_SetDirection+0x20a>
	else if (__tmp > 65535)
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	4c f5       	brge	.+82     	; 0x2db8 <Motor_SetDirection+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
    2d8e:	0f c0       	rjmp	.+30     	; 0x2dae <Motor_SetDirection+0x1ec>
    2d90:	88 ec       	ldi	r24, 0xC8	; 200
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <Motor_SetDirection+0x1da>
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <Motor_SetDirection+0x1ce>
    2db6:	14 c0       	rjmp	.+40     	; 0x2de0 <Motor_SetDirection+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9e 83       	std	Y+6, r25	; 0x06
    2dca:	8d 83       	std	Y+5, r24	; 0x05
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <Motor_SetDirection+0x216>
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, HIGH);
    2de0:	82 e0       	ldi	r24, 0x02	; 2
    2de2:	61 e0       	ldi	r22, 0x01	; 1
    2de4:	41 e0       	ldi	r20, 0x01	; 1
    2de6:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
		break;
	}
}
    2dea:	6f 96       	adiw	r28, 0x1f	; 31
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <Motor_Stop>:
void Motor_Stop(void)
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, LOW);
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	40 e0       	ldi	r20, 0x00	; 0
    2e0a:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, LOW);
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	60 e0       	ldi	r22, 0x00	; 0
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
}
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <LED_voidInit>:

#include "LED_interface.h"
#include "LED_private.h"

void LED_voidInit(u8 L_u8led)
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	00 d0       	rcall	.+0      	; 0x2e24 <LED_voidInit+0x6>
    2e24:	0f 92       	push	r0
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led)
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	3b 83       	std	Y+3, r19	; 0x03
    2e34:	2a 83       	std	Y+2, r18	; 0x02
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3a:	82 30       	cpi	r24, 0x02	; 2
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	31 f1       	breq	.+76     	; 0x2e8c <LED_voidInit+0x6e>
    2e40:	2a 81       	ldd	r18, Y+2	; 0x02
    2e42:	3b 81       	ldd	r19, Y+3	; 0x03
    2e44:	23 30       	cpi	r18, 0x03	; 3
    2e46:	31 05       	cpc	r19, r1
    2e48:	54 f4       	brge	.+20     	; 0x2e5e <LED_voidInit+0x40>
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	89 f0       	breq	.+34     	; 0x2e74 <LED_voidInit+0x56>
    2e52:	2a 81       	ldd	r18, Y+2	; 0x02
    2e54:	3b 81       	ldd	r19, Y+3	; 0x03
    2e56:	21 30       	cpi	r18, 0x01	; 1
    2e58:	31 05       	cpc	r19, r1
    2e5a:	91 f0       	breq	.+36     	; 0x2e80 <LED_voidInit+0x62>
    2e5c:	28 c0       	rjmp	.+80     	; 0x2eae <LED_voidInit+0x90>
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	83 30       	cpi	r24, 0x03	; 3
    2e64:	91 05       	cpc	r25, r1
    2e66:	c1 f0       	breq	.+48     	; 0x2e98 <LED_voidInit+0x7a>
    2e68:	2a 81       	ldd	r18, Y+2	; 0x02
    2e6a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e6c:	24 30       	cpi	r18, 0x04	; 4
    2e6e:	31 05       	cpc	r19, r1
    2e70:	c9 f0       	breq	.+50     	; 0x2ea4 <LED_voidInit+0x86>
    2e72:	1d c0       	rjmp	.+58     	; 0x2eae <LED_voidInit+0x90>
	{
	case LED1 :DIO_u8SetPinDirection(LED1_PORT, LED1_PIN, OUTPUT); break ;
    2e74:	82 e0       	ldi	r24, 0x02	; 2
    2e76:	66 e0       	ldi	r22, 0x06	; 6
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
    2e7e:	17 c0       	rjmp	.+46     	; 0x2eae <LED_voidInit+0x90>
	case LED2 :DIO_u8SetPinDirection(LED2_PORT, LED2_PIN, OUTPUT); break ;
    2e80:	82 e0       	ldi	r24, 0x02	; 2
    2e82:	67 e0       	ldi	r22, 0x07	; 7
    2e84:	41 e0       	ldi	r20, 0x01	; 1
    2e86:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
    2e8a:	11 c0       	rjmp	.+34     	; 0x2eae <LED_voidInit+0x90>
	case LED3 :DIO_u8SetPinDirection(LED3_PORT, LED3_PIN, OUTPUT); break ;
    2e8c:	82 e0       	ldi	r24, 0x02	; 2
    2e8e:	61 e0       	ldi	r22, 0x01	; 1
    2e90:	41 e0       	ldi	r20, 0x01	; 1
    2e92:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
    2e96:	0b c0       	rjmp	.+22     	; 0x2eae <LED_voidInit+0x90>
	case LED4 :DIO_u8SetPinDirection(LED4_PORT, LED4_PIN, OUTPUT); break ;
    2e98:	82 e0       	ldi	r24, 0x02	; 2
    2e9a:	63 e0       	ldi	r22, 0x03	; 3
    2e9c:	41 e0       	ldi	r20, 0x01	; 1
    2e9e:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <LED_voidInit+0x90>
	case LED5 :DIO_u8SetPinDirection(LED5_PORT, LED5_PIN, OUTPUT); break ;
    2ea4:	82 e0       	ldi	r24, 0x02	; 2
    2ea6:	64 e0       	ldi	r22, 0x04	; 4
    2ea8:	41 e0       	ldi	r20, 0x01	; 1
    2eaa:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	}
}
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <LED_voidSetLEDHigh>:
void LED_voidSetLEDHigh(u8 L_u8led)
{
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <LED_voidSetLEDHigh+0x6>
    2ec0:	0f 92       	push	r0
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	3b 83       	std	Y+3, r19	; 0x03
    2ed0:	2a 83       	std	Y+2, r18	; 0x02
    2ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed6:	82 30       	cpi	r24, 0x02	; 2
    2ed8:	91 05       	cpc	r25, r1
    2eda:	31 f1       	breq	.+76     	; 0x2f28 <LED_voidSetLEDHigh+0x6e>
    2edc:	2a 81       	ldd	r18, Y+2	; 0x02
    2ede:	3b 81       	ldd	r19, Y+3	; 0x03
    2ee0:	23 30       	cpi	r18, 0x03	; 3
    2ee2:	31 05       	cpc	r19, r1
    2ee4:	54 f4       	brge	.+20     	; 0x2efa <LED_voidSetLEDHigh+0x40>
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	89 f0       	breq	.+34     	; 0x2f10 <LED_voidSetLEDHigh+0x56>
    2eee:	2a 81       	ldd	r18, Y+2	; 0x02
    2ef0:	3b 81       	ldd	r19, Y+3	; 0x03
    2ef2:	21 30       	cpi	r18, 0x01	; 1
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	91 f0       	breq	.+36     	; 0x2f1c <LED_voidSetLEDHigh+0x62>
    2ef8:	28 c0       	rjmp	.+80     	; 0x2f4a <LED_voidSetLEDHigh+0x90>
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	9b 81       	ldd	r25, Y+3	; 0x03
    2efe:	83 30       	cpi	r24, 0x03	; 3
    2f00:	91 05       	cpc	r25, r1
    2f02:	c1 f0       	breq	.+48     	; 0x2f34 <LED_voidSetLEDHigh+0x7a>
    2f04:	2a 81       	ldd	r18, Y+2	; 0x02
    2f06:	3b 81       	ldd	r19, Y+3	; 0x03
    2f08:	24 30       	cpi	r18, 0x04	; 4
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	c9 f0       	breq	.+50     	; 0x2f40 <LED_voidSetLEDHigh+0x86>
    2f0e:	1d c0       	rjmp	.+58     	; 0x2f4a <LED_voidSetLEDHigh+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, HIGH); break;
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	66 e0       	ldi	r22, 0x06	; 6
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2f1a:	17 c0       	rjmp	.+46     	; 0x2f4a <LED_voidSetLEDHigh+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, HIGH); break;
    2f1c:	82 e0       	ldi	r24, 0x02	; 2
    2f1e:	67 e0       	ldi	r22, 0x07	; 7
    2f20:	41 e0       	ldi	r20, 0x01	; 1
    2f22:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2f26:	11 c0       	rjmp	.+34     	; 0x2f4a <LED_voidSetLEDHigh+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, HIGH); break;
    2f28:	82 e0       	ldi	r24, 0x02	; 2
    2f2a:	61 e0       	ldi	r22, 0x01	; 1
    2f2c:	41 e0       	ldi	r20, 0x01	; 1
    2f2e:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2f32:	0b c0       	rjmp	.+22     	; 0x2f4a <LED_voidSetLEDHigh+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, HIGH); break;
    2f34:	82 e0       	ldi	r24, 0x02	; 2
    2f36:	63 e0       	ldi	r22, 0x03	; 3
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2f3e:	05 c0       	rjmp	.+10     	; 0x2f4a <LED_voidSetLEDHigh+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, HIGH); break;
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	64 e0       	ldi	r22, 0x04	; 4
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
	}
}
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <LED_voidSetLEDLow>:
void LED_voidSetLEDLow(u8 L_u8led)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <LED_voidSetLEDLow+0x6>
    2f5c:	0f 92       	push	r0
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	3b 83       	std	Y+3, r19	; 0x03
    2f6c:	2a 83       	std	Y+2, r18	; 0x02
    2f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f70:	9b 81       	ldd	r25, Y+3	; 0x03
    2f72:	82 30       	cpi	r24, 0x02	; 2
    2f74:	91 05       	cpc	r25, r1
    2f76:	31 f1       	breq	.+76     	; 0x2fc4 <LED_voidSetLEDLow+0x6e>
    2f78:	2a 81       	ldd	r18, Y+2	; 0x02
    2f7a:	3b 81       	ldd	r19, Y+3	; 0x03
    2f7c:	23 30       	cpi	r18, 0x03	; 3
    2f7e:	31 05       	cpc	r19, r1
    2f80:	54 f4       	brge	.+20     	; 0x2f96 <LED_voidSetLEDLow+0x40>
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	9b 81       	ldd	r25, Y+3	; 0x03
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	89 f0       	breq	.+34     	; 0x2fac <LED_voidSetLEDLow+0x56>
    2f8a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f8c:	3b 81       	ldd	r19, Y+3	; 0x03
    2f8e:	21 30       	cpi	r18, 0x01	; 1
    2f90:	31 05       	cpc	r19, r1
    2f92:	91 f0       	breq	.+36     	; 0x2fb8 <LED_voidSetLEDLow+0x62>
    2f94:	28 c0       	rjmp	.+80     	; 0x2fe6 <LED_voidSetLEDLow+0x90>
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9a:	83 30       	cpi	r24, 0x03	; 3
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	c1 f0       	breq	.+48     	; 0x2fd0 <LED_voidSetLEDLow+0x7a>
    2fa0:	2a 81       	ldd	r18, Y+2	; 0x02
    2fa2:	3b 81       	ldd	r19, Y+3	; 0x03
    2fa4:	24 30       	cpi	r18, 0x04	; 4
    2fa6:	31 05       	cpc	r19, r1
    2fa8:	c9 f0       	breq	.+50     	; 0x2fdc <LED_voidSetLEDLow+0x86>
    2faa:	1d c0       	rjmp	.+58     	; 0x2fe6 <LED_voidSetLEDLow+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, LOW); break;
    2fac:	82 e0       	ldi	r24, 0x02	; 2
    2fae:	66 e0       	ldi	r22, 0x06	; 6
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2fb6:	17 c0       	rjmp	.+46     	; 0x2fe6 <LED_voidSetLEDLow+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, LOW); break;
    2fb8:	82 e0       	ldi	r24, 0x02	; 2
    2fba:	67 e0       	ldi	r22, 0x07	; 7
    2fbc:	40 e0       	ldi	r20, 0x00	; 0
    2fbe:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2fc2:	11 c0       	rjmp	.+34     	; 0x2fe6 <LED_voidSetLEDLow+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, LOW); break;
    2fc4:	82 e0       	ldi	r24, 0x02	; 2
    2fc6:	61 e0       	ldi	r22, 0x01	; 1
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2fce:	0b c0       	rjmp	.+22     	; 0x2fe6 <LED_voidSetLEDLow+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, LOW); break;
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	63 e0       	ldi	r22, 0x03	; 3
    2fd4:	40 e0       	ldi	r20, 0x00	; 0
    2fd6:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    2fda:	05 c0       	rjmp	.+10     	; 0x2fe6 <LED_voidSetLEDLow+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, LOW); break;
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	64 e0       	ldi	r22, 0x04	; 4
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
	}
}
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <HLCD_voidinit>:
#include <util/delay.h>

#include <stdlib.h>

void HLCD_voidinit()
{
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	e8 97       	sbiw	r28, 0x38	; 56
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_DATA_PORT ,OUTPUT);
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	61 e0       	ldi	r22, 0x01	; 1
    300a:	0e 94 b1 13 	call	0x2762	; 0x2762 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RS_PIN ,OUTPUT);
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	63 e0       	ldi	r22, 0x03	; 3
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RW_PIN ,OUTPUT);
    3018:	82 e0       	ldi	r24, 0x02	; 2
    301a:	64 e0       	ldi	r22, 0x04	; 4
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_E_PIN ,OUTPUT);
    3022:	82 e0       	ldi	r24, 0x02	; 2
    3024:	65 e0       	ldi	r22, 0x05	; 5
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 ef       	ldi	r26, 0xF0	; 240
    3032:	b1 e4       	ldi	r27, 0x41	; 65
    3034:	8d ab       	std	Y+53, r24	; 0x35
    3036:	9e ab       	std	Y+54, r25	; 0x36
    3038:	af ab       	std	Y+55, r26	; 0x37
    303a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	6d a9       	ldd	r22, Y+53	; 0x35
    303e:	7e a9       	ldd	r23, Y+54	; 0x36
    3040:	8f a9       	ldd	r24, Y+55	; 0x37
    3042:	98 ad       	ldd	r25, Y+56	; 0x38
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	4a ef       	ldi	r20, 0xFA	; 250
    304a:	54 e4       	ldi	r21, 0x44	; 68
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	89 ab       	std	Y+49, r24	; 0x31
    3056:	9a ab       	std	Y+50, r25	; 0x32
    3058:	ab ab       	std	Y+51, r26	; 0x33
    305a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    305c:	69 a9       	ldd	r22, Y+49	; 0x31
    305e:	7a a9       	ldd	r23, Y+50	; 0x32
    3060:	8b a9       	ldd	r24, Y+51	; 0x33
    3062:	9c a9       	ldd	r25, Y+52	; 0x34
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3070:	88 23       	and	r24, r24
    3072:	2c f4       	brge	.+10     	; 0x307e <HLCD_voidinit+0x8c>
		__ticks = 1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	98 ab       	std	Y+48, r25	; 0x30
    307a:	8f a7       	std	Y+47, r24	; 0x2f
    307c:	3f c0       	rjmp	.+126    	; 0x30fc <HLCD_voidinit+0x10a>
	else if (__tmp > 65535)
    307e:	69 a9       	ldd	r22, Y+49	; 0x31
    3080:	7a a9       	ldd	r23, Y+50	; 0x32
    3082:	8b a9       	ldd	r24, Y+51	; 0x33
    3084:	9c a9       	ldd	r25, Y+52	; 0x34
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	4c f5       	brge	.+82     	; 0x30e8 <HLCD_voidinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	6d a9       	ldd	r22, Y+53	; 0x35
    3098:	7e a9       	ldd	r23, Y+54	; 0x36
    309a:	8f a9       	ldd	r24, Y+55	; 0x37
    309c:	98 ad       	ldd	r25, Y+56	; 0x38
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	98 ab       	std	Y+48, r25	; 0x30
    30bc:	8f a7       	std	Y+47, r24	; 0x2f
    30be:	0f c0       	rjmp	.+30     	; 0x30de <HLCD_voidinit+0xec>
    30c0:	88 ec       	ldi	r24, 0xC8	; 200
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9e a7       	std	Y+46, r25	; 0x2e
    30c6:	8d a7       	std	Y+45, r24	; 0x2d
    30c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    30ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <HLCD_voidinit+0xda>
    30d0:	9e a7       	std	Y+46, r25	; 0x2e
    30d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d6:	98 a9       	ldd	r25, Y+48	; 0x30
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	98 ab       	std	Y+48, r25	; 0x30
    30dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30de:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e0:	98 a9       	ldd	r25, Y+48	; 0x30
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	69 f7       	brne	.-38     	; 0x30c0 <HLCD_voidinit+0xce>
    30e6:	14 c0       	rjmp	.+40     	; 0x3110 <HLCD_voidinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e8:	69 a9       	ldd	r22, Y+49	; 0x31
    30ea:	7a a9       	ldd	r23, Y+50	; 0x32
    30ec:	8b a9       	ldd	r24, Y+51	; 0x33
    30ee:	9c a9       	ldd	r25, Y+52	; 0x34
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	98 ab       	std	Y+48, r25	; 0x30
    30fa:	8f a7       	std	Y+47, r24	; 0x2f
    30fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3100:	9c a7       	std	Y+44, r25	; 0x2c
    3102:	8b a7       	std	Y+43, r24	; 0x2b
    3104:	8b a5       	ldd	r24, Y+43	; 0x2b
    3106:	9c a5       	ldd	r25, Y+44	; 0x2c
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <HLCD_voidinit+0x116>
    310c:	9c a7       	std	Y+44, r25	; 0x2c
    310e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(30);
	HLCD_voidCommand(LCD_Function_set1);
    3110:	88 e3       	ldi	r24, 0x38	; 56
    3112:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	a0 e8       	ldi	r26, 0x80	; 128
    311c:	bf e3       	ldi	r27, 0x3F	; 63
    311e:	8f a3       	std	Y+39, r24	; 0x27
    3120:	98 a7       	std	Y+40, r25	; 0x28
    3122:	a9 a7       	std	Y+41, r26	; 0x29
    3124:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3126:	6f a1       	ldd	r22, Y+39	; 0x27
    3128:	78 a5       	ldd	r23, Y+40	; 0x28
    312a:	89 a5       	ldd	r24, Y+41	; 0x29
    312c:	9a a5       	ldd	r25, Y+42	; 0x2a
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	4a ef       	ldi	r20, 0xFA	; 250
    3134:	54 e4       	ldi	r21, 0x44	; 68
    3136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	8b a3       	std	Y+35, r24	; 0x23
    3140:	9c a3       	std	Y+36, r25	; 0x24
    3142:	ad a3       	std	Y+37, r26	; 0x25
    3144:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3146:	6b a1       	ldd	r22, Y+35	; 0x23
    3148:	7c a1       	ldd	r23, Y+36	; 0x24
    314a:	8d a1       	ldd	r24, Y+37	; 0x25
    314c:	9e a1       	ldd	r25, Y+38	; 0x26
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e8       	ldi	r20, 0x80	; 128
    3154:	5f e3       	ldi	r21, 0x3F	; 63
    3156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    315a:	88 23       	and	r24, r24
    315c:	2c f4       	brge	.+10     	; 0x3168 <HLCD_voidinit+0x176>
		__ticks = 1;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	9a a3       	std	Y+34, r25	; 0x22
    3164:	89 a3       	std	Y+33, r24	; 0x21
    3166:	3f c0       	rjmp	.+126    	; 0x31e6 <HLCD_voidinit+0x1f4>
	else if (__tmp > 65535)
    3168:	6b a1       	ldd	r22, Y+35	; 0x23
    316a:	7c a1       	ldd	r23, Y+36	; 0x24
    316c:	8d a1       	ldd	r24, Y+37	; 0x25
    316e:	9e a1       	ldd	r25, Y+38	; 0x26
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	3f ef       	ldi	r19, 0xFF	; 255
    3174:	4f e7       	ldi	r20, 0x7F	; 127
    3176:	57 e4       	ldi	r21, 0x47	; 71
    3178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    317c:	18 16       	cp	r1, r24
    317e:	4c f5       	brge	.+82     	; 0x31d2 <HLCD_voidinit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3180:	6f a1       	ldd	r22, Y+39	; 0x27
    3182:	78 a5       	ldd	r23, Y+40	; 0x28
    3184:	89 a5       	ldd	r24, Y+41	; 0x29
    3186:	9a a5       	ldd	r25, Y+42	; 0x2a
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e2       	ldi	r20, 0x20	; 32
    318e:	51 e4       	ldi	r21, 0x41	; 65
    3190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	bc 01       	movw	r22, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	9a a3       	std	Y+34, r25	; 0x22
    31a6:	89 a3       	std	Y+33, r24	; 0x21
    31a8:	0f c0       	rjmp	.+30     	; 0x31c8 <HLCD_voidinit+0x1d6>
    31aa:	88 ec       	ldi	r24, 0xC8	; 200
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	98 a3       	std	Y+32, r25	; 0x20
    31b0:	8f 8f       	std	Y+31, r24	; 0x1f
    31b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b4:	98 a1       	ldd	r25, Y+32	; 0x20
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <HLCD_voidinit+0x1c4>
    31ba:	98 a3       	std	Y+32, r25	; 0x20
    31bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31be:	89 a1       	ldd	r24, Y+33	; 0x21
    31c0:	9a a1       	ldd	r25, Y+34	; 0x22
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	9a a3       	std	Y+34, r25	; 0x22
    31c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c8:	89 a1       	ldd	r24, Y+33	; 0x21
    31ca:	9a a1       	ldd	r25, Y+34	; 0x22
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	69 f7       	brne	.-38     	; 0x31aa <HLCD_voidinit+0x1b8>
    31d0:	14 c0       	rjmp	.+40     	; 0x31fa <HLCD_voidinit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d2:	6b a1       	ldd	r22, Y+35	; 0x23
    31d4:	7c a1       	ldd	r23, Y+36	; 0x24
    31d6:	8d a1       	ldd	r24, Y+37	; 0x25
    31d8:	9e a1       	ldd	r25, Y+38	; 0x26
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9a a3       	std	Y+34, r25	; 0x22
    31e4:	89 a3       	std	Y+33, r24	; 0x21
    31e6:	89 a1       	ldd	r24, Y+33	; 0x21
    31e8:	9a a1       	ldd	r25, Y+34	; 0x22
    31ea:	9e 8f       	std	Y+30, r25	; 0x1e
    31ec:	8d 8f       	std	Y+29, r24	; 0x1d
    31ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	f1 f7       	brne	.-4      	; 0x31f2 <HLCD_voidinit+0x200>
    31f6:	9e 8f       	std	Y+30, r25	; 0x1e
    31f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_voidCommand(LCD_Display_Mode1);
    31fa:	8f e0       	ldi	r24, 0x0F	; 15
    31fc:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	a0 e8       	ldi	r26, 0x80	; 128
    3206:	bf e3       	ldi	r27, 0x3F	; 63
    3208:	89 8f       	std	Y+25, r24	; 0x19
    320a:	9a 8f       	std	Y+26, r25	; 0x1a
    320c:	ab 8f       	std	Y+27, r26	; 0x1b
    320e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3210:	69 8d       	ldd	r22, Y+25	; 0x19
    3212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	4a ef       	ldi	r20, 0xFA	; 250
    321e:	54 e4       	ldi	r21, 0x44	; 68
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	8d 8b       	std	Y+21, r24	; 0x15
    322a:	9e 8b       	std	Y+22, r25	; 0x16
    322c:	af 8b       	std	Y+23, r26	; 0x17
    322e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3230:	6d 89       	ldd	r22, Y+21	; 0x15
    3232:	7e 89       	ldd	r23, Y+22	; 0x16
    3234:	8f 89       	ldd	r24, Y+23	; 0x17
    3236:	98 8d       	ldd	r25, Y+24	; 0x18
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e8       	ldi	r20, 0x80	; 128
    323e:	5f e3       	ldi	r21, 0x3F	; 63
    3240:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3244:	88 23       	and	r24, r24
    3246:	2c f4       	brge	.+10     	; 0x3252 <HLCD_voidinit+0x260>
		__ticks = 1;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	9c 8b       	std	Y+20, r25	; 0x14
    324e:	8b 8b       	std	Y+19, r24	; 0x13
    3250:	3f c0       	rjmp	.+126    	; 0x32d0 <HLCD_voidinit+0x2de>
	else if (__tmp > 65535)
    3252:	6d 89       	ldd	r22, Y+21	; 0x15
    3254:	7e 89       	ldd	r23, Y+22	; 0x16
    3256:	8f 89       	ldd	r24, Y+23	; 0x17
    3258:	98 8d       	ldd	r25, Y+24	; 0x18
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	3f ef       	ldi	r19, 0xFF	; 255
    325e:	4f e7       	ldi	r20, 0x7F	; 127
    3260:	57 e4       	ldi	r21, 0x47	; 71
    3262:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3266:	18 16       	cp	r1, r24
    3268:	4c f5       	brge	.+82     	; 0x32bc <HLCD_voidinit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326a:	69 8d       	ldd	r22, Y+25	; 0x19
    326c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    326e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3270:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e2       	ldi	r20, 0x20	; 32
    3278:	51 e4       	ldi	r21, 0x41	; 65
    327a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	bc 01       	movw	r22, r24
    3284:	cd 01       	movw	r24, r26
    3286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	0f c0       	rjmp	.+30     	; 0x32b2 <HLCD_voidinit+0x2c0>
    3294:	88 ec       	ldi	r24, 0xC8	; 200
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	9a 8b       	std	Y+18, r25	; 0x12
    329a:	89 8b       	std	Y+17, r24	; 0x11
    329c:	89 89       	ldd	r24, Y+17	; 0x11
    329e:	9a 89       	ldd	r25, Y+18	; 0x12
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <HLCD_voidinit+0x2ae>
    32a4:	9a 8b       	std	Y+18, r25	; 0x12
    32a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a8:	8b 89       	ldd	r24, Y+19	; 0x13
    32aa:	9c 89       	ldd	r25, Y+20	; 0x14
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	9c 8b       	std	Y+20, r25	; 0x14
    32b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b2:	8b 89       	ldd	r24, Y+19	; 0x13
    32b4:	9c 89       	ldd	r25, Y+20	; 0x14
    32b6:	00 97       	sbiw	r24, 0x00	; 0
    32b8:	69 f7       	brne	.-38     	; 0x3294 <HLCD_voidinit+0x2a2>
    32ba:	14 c0       	rjmp	.+40     	; 0x32e4 <HLCD_voidinit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32bc:	6d 89       	ldd	r22, Y+21	; 0x15
    32be:	7e 89       	ldd	r23, Y+22	; 0x16
    32c0:	8f 89       	ldd	r24, Y+23	; 0x17
    32c2:	98 8d       	ldd	r25, Y+24	; 0x18
    32c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	9c 8b       	std	Y+20, r25	; 0x14
    32ce:	8b 8b       	std	Y+19, r24	; 0x13
    32d0:	8b 89       	ldd	r24, Y+19	; 0x13
    32d2:	9c 89       	ldd	r25, Y+20	; 0x14
    32d4:	98 8b       	std	Y+16, r25	; 0x10
    32d6:	8f 87       	std	Y+15, r24	; 0x0f
    32d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32da:	98 89       	ldd	r25, Y+16	; 0x10
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	f1 f7       	brne	.-4      	; 0x32dc <HLCD_voidinit+0x2ea>
    32e0:	98 8b       	std	Y+16, r25	; 0x10
    32e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_voidCommand(LCD_Clear_Screen);
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a0 e0       	ldi	r26, 0x00	; 0
    32f0:	b0 e4       	ldi	r27, 0x40	; 64
    32f2:	8b 87       	std	Y+11, r24	; 0x0b
    32f4:	9c 87       	std	Y+12, r25	; 0x0c
    32f6:	ad 87       	std	Y+13, r26	; 0x0d
    32f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3300:	9e 85       	ldd	r25, Y+14	; 0x0e
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8f 83       	std	Y+7, r24	; 0x07
    3314:	98 87       	std	Y+8, r25	; 0x08
    3316:	a9 87       	std	Y+9, r26	; 0x09
    3318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <HLCD_voidinit+0x34a>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <HLCD_voidinit+0x3c8>
	else if (__tmp > 65535)
    333c:	6f 81       	ldd	r22, Y+7	; 0x07
    333e:	78 85       	ldd	r23, Y+8	; 0x08
    3340:	89 85       	ldd	r24, Y+9	; 0x09
    3342:	9a 85       	ldd	r25, Y+10	; 0x0a
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <HLCD_voidinit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	6b 85       	ldd	r22, Y+11	; 0x0b
    3356:	7c 85       	ldd	r23, Y+12	; 0x0c
    3358:	8d 85       	ldd	r24, Y+13	; 0x0d
    335a:	9e 85       	ldd	r25, Y+14	; 0x0e
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9e 83       	std	Y+6, r25	; 0x06
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	0f c0       	rjmp	.+30     	; 0x339c <HLCD_voidinit+0x3aa>
    337e:	88 ec       	ldi	r24, 0xC8	; 200
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9c 83       	std	Y+4, r25	; 0x04
    3384:	8b 83       	std	Y+3, r24	; 0x03
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	9c 81       	ldd	r25, Y+4	; 0x04
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <HLCD_voidinit+0x398>
    338e:	9c 83       	std	Y+4, r25	; 0x04
    3390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	8d 81       	ldd	r24, Y+5	; 0x05
    3394:	9e 81       	ldd	r25, Y+6	; 0x06
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9e 83       	std	Y+6, r25	; 0x06
    339a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	8d 81       	ldd	r24, Y+5	; 0x05
    339e:	9e 81       	ldd	r25, Y+6	; 0x06
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <HLCD_voidinit+0x38c>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <HLCD_voidinit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6f 81       	ldd	r22, Y+7	; 0x07
    33a8:	78 85       	ldd	r23, Y+8	; 0x08
    33aa:	89 85       	ldd	r24, Y+9	; 0x09
    33ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	9a 83       	std	Y+2, r25	; 0x02
    33c0:	89 83       	std	Y+1, r24	; 0x01
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	9a 81       	ldd	r25, Y+2	; 0x02
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <HLCD_voidinit+0x3d4>
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidCommand(LCD_Entry_Mode1);
    33ce:	86 e0       	ldi	r24, 0x06	; 6
    33d0:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>


}
    33d4:	e8 96       	adiw	r28, 0x38	; 56
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <HLCD_voidCommand>:

void HLCD_voidCommand(u8 command)
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	0f 92       	push	r0
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,LOW );
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	63 e0       	ldi	r22, 0x03	; 3
    33f6:	40 e0       	ldi	r20, 0x00	; 0
    33f8:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW );
    33fc:	82 e0       	ldi	r24, 0x02	; 2
    33fe:	64 e0       	ldi	r22, 0x04	; 4
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT ,command );
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	b9 01       	movw	r22, r18
    3412:	0e 94 68 13 	call	0x26d0	; 0x26d0 <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    3416:	0e 94 21 1a 	call	0x3442	; 0x3442 <HLCD_voidSendPulse>
}
    341a:	0f 90       	pop	r0
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <HLCD_voidSetDDRAM_Address>:
void HLCD_voidSetDDRAM_Address(u8 address)
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	0f 92       	push	r0
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(address,7);
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	80 68       	ori	r24, 0x80	; 128
    3432:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidCommand(address);
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
}
    343a:	0f 90       	pop	r0
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <HLCD_voidSendPulse>:

void static HLCD_voidSendPulse(void)
{
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	6c 97       	sbiw	r28, 0x1c	; 28
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,HIGH);
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	65 e0       	ldi	r22, 0x05	; 5
    345a:	41 e0       	ldi	r20, 0x01	; 1
    345c:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a0 e8       	ldi	r26, 0x80	; 128
    3466:	bf e3       	ldi	r27, 0x3F	; 63
    3468:	89 8f       	std	Y+25, r24	; 0x19
    346a:	9a 8f       	std	Y+26, r25	; 0x1a
    346c:	ab 8f       	std	Y+27, r26	; 0x1b
    346e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3470:	69 8d       	ldd	r22, Y+25	; 0x19
    3472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4a ef       	ldi	r20, 0xFA	; 250
    347e:	54 e4       	ldi	r21, 0x44	; 68
    3480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8d 8b       	std	Y+21, r24	; 0x15
    348a:	9e 8b       	std	Y+22, r25	; 0x16
    348c:	af 8b       	std	Y+23, r26	; 0x17
    348e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3490:	6d 89       	ldd	r22, Y+21	; 0x15
    3492:	7e 89       	ldd	r23, Y+22	; 0x16
    3494:	8f 89       	ldd	r24, Y+23	; 0x17
    3496:	98 8d       	ldd	r25, Y+24	; 0x18
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e8       	ldi	r20, 0x80	; 128
    349e:	5f e3       	ldi	r21, 0x3F	; 63
    34a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a4:	88 23       	and	r24, r24
    34a6:	2c f4       	brge	.+10     	; 0x34b2 <HLCD_voidSendPulse+0x70>
		__ticks = 1;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9c 8b       	std	Y+20, r25	; 0x14
    34ae:	8b 8b       	std	Y+19, r24	; 0x13
    34b0:	3f c0       	rjmp	.+126    	; 0x3530 <HLCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    34b2:	6d 89       	ldd	r22, Y+21	; 0x15
    34b4:	7e 89       	ldd	r23, Y+22	; 0x16
    34b6:	8f 89       	ldd	r24, Y+23	; 0x17
    34b8:	98 8d       	ldd	r25, Y+24	; 0x18
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	3f ef       	ldi	r19, 0xFF	; 255
    34be:	4f e7       	ldi	r20, 0x7F	; 127
    34c0:	57 e4       	ldi	r21, 0x47	; 71
    34c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c6:	18 16       	cp	r1, r24
    34c8:	4c f5       	brge	.+82     	; 0x351c <HLCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ca:	69 8d       	ldd	r22, Y+25	; 0x19
    34cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e2       	ldi	r20, 0x20	; 32
    34d8:	51 e4       	ldi	r21, 0x41	; 65
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	9c 8b       	std	Y+20, r25	; 0x14
    34f0:	8b 8b       	std	Y+19, r24	; 0x13
    34f2:	0f c0       	rjmp	.+30     	; 0x3512 <HLCD_voidSendPulse+0xd0>
    34f4:	88 ec       	ldi	r24, 0xC8	; 200
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	9a 8b       	std	Y+18, r25	; 0x12
    34fa:	89 8b       	std	Y+17, r24	; 0x11
    34fc:	89 89       	ldd	r24, Y+17	; 0x11
    34fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	f1 f7       	brne	.-4      	; 0x3500 <HLCD_voidSendPulse+0xbe>
    3504:	9a 8b       	std	Y+18, r25	; 0x12
    3506:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3508:	8b 89       	ldd	r24, Y+19	; 0x13
    350a:	9c 89       	ldd	r25, Y+20	; 0x14
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	9c 8b       	std	Y+20, r25	; 0x14
    3510:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3512:	8b 89       	ldd	r24, Y+19	; 0x13
    3514:	9c 89       	ldd	r25, Y+20	; 0x14
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	69 f7       	brne	.-38     	; 0x34f4 <HLCD_voidSendPulse+0xb2>
    351a:	14 c0       	rjmp	.+40     	; 0x3544 <HLCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351c:	6d 89       	ldd	r22, Y+21	; 0x15
    351e:	7e 89       	ldd	r23, Y+22	; 0x16
    3520:	8f 89       	ldd	r24, Y+23	; 0x17
    3522:	98 8d       	ldd	r25, Y+24	; 0x18
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9c 8b       	std	Y+20, r25	; 0x14
    352e:	8b 8b       	std	Y+19, r24	; 0x13
    3530:	8b 89       	ldd	r24, Y+19	; 0x13
    3532:	9c 89       	ldd	r25, Y+20	; 0x14
    3534:	98 8b       	std	Y+16, r25	; 0x10
    3536:	8f 87       	std	Y+15, r24	; 0x0f
    3538:	8f 85       	ldd	r24, Y+15	; 0x0f
    353a:	98 89       	ldd	r25, Y+16	; 0x10
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <HLCD_voidSendPulse+0xfa>
    3540:	98 8b       	std	Y+16, r25	; 0x10
    3542:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,LOW);
    3544:	82 e0       	ldi	r24, 0x02	; 2
    3546:	65 e0       	ldi	r22, 0x05	; 5
    3548:	40 e0       	ldi	r20, 0x00	; 0
    354a:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	a0 e8       	ldi	r26, 0x80	; 128
    3554:	bf e3       	ldi	r27, 0x3F	; 63
    3556:	8b 87       	std	Y+11, r24	; 0x0b
    3558:	9c 87       	std	Y+12, r25	; 0x0c
    355a:	ad 87       	std	Y+13, r26	; 0x0d
    355c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    355e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3560:	7c 85       	ldd	r23, Y+12	; 0x0c
    3562:	8d 85       	ldd	r24, Y+13	; 0x0d
    3564:	9e 85       	ldd	r25, Y+14	; 0x0e
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	4a ef       	ldi	r20, 0xFA	; 250
    356c:	54 e4       	ldi	r21, 0x44	; 68
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	8f 83       	std	Y+7, r24	; 0x07
    3578:	98 87       	std	Y+8, r25	; 0x08
    357a:	a9 87       	std	Y+9, r26	; 0x09
    357c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    357e:	6f 81       	ldd	r22, Y+7	; 0x07
    3580:	78 85       	ldd	r23, Y+8	; 0x08
    3582:	89 85       	ldd	r24, Y+9	; 0x09
    3584:	9a 85       	ldd	r25, Y+10	; 0x0a
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e8       	ldi	r20, 0x80	; 128
    358c:	5f e3       	ldi	r21, 0x3F	; 63
    358e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3592:	88 23       	and	r24, r24
    3594:	2c f4       	brge	.+10     	; 0x35a0 <HLCD_voidSendPulse+0x15e>
		__ticks = 1;
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	9e 83       	std	Y+6, r25	; 0x06
    359c:	8d 83       	std	Y+5, r24	; 0x05
    359e:	3f c0       	rjmp	.+126    	; 0x361e <HLCD_voidSendPulse+0x1dc>
	else if (__tmp > 65535)
    35a0:	6f 81       	ldd	r22, Y+7	; 0x07
    35a2:	78 85       	ldd	r23, Y+8	; 0x08
    35a4:	89 85       	ldd	r24, Y+9	; 0x09
    35a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	3f ef       	ldi	r19, 0xFF	; 255
    35ac:	4f e7       	ldi	r20, 0x7F	; 127
    35ae:	57 e4       	ldi	r21, 0x47	; 71
    35b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35b4:	18 16       	cp	r1, r24
    35b6:	4c f5       	brge	.+82     	; 0x360a <HLCD_voidSendPulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    35bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35be:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	40 e2       	ldi	r20, 0x20	; 32
    35c6:	51 e4       	ldi	r21, 0x41	; 65
    35c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	bc 01       	movw	r22, r24
    35d2:	cd 01       	movw	r24, r26
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9e 83       	std	Y+6, r25	; 0x06
    35de:	8d 83       	std	Y+5, r24	; 0x05
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <HLCD_voidSendPulse+0x1be>
    35e2:	88 ec       	ldi	r24, 0xC8	; 200
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9c 83       	std	Y+4, r25	; 0x04
    35e8:	8b 83       	std	Y+3, r24	; 0x03
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	9c 81       	ldd	r25, Y+4	; 0x04
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <HLCD_voidSendPulse+0x1ac>
    35f2:	9c 83       	std	Y+4, r25	; 0x04
    35f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f6:	8d 81       	ldd	r24, Y+5	; 0x05
    35f8:	9e 81       	ldd	r25, Y+6	; 0x06
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	9e 83       	std	Y+6, r25	; 0x06
    35fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3600:	8d 81       	ldd	r24, Y+5	; 0x05
    3602:	9e 81       	ldd	r25, Y+6	; 0x06
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	69 f7       	brne	.-38     	; 0x35e2 <HLCD_voidSendPulse+0x1a0>
    3608:	14 c0       	rjmp	.+40     	; 0x3632 <HLCD_voidSendPulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360a:	6f 81       	ldd	r22, Y+7	; 0x07
    360c:	78 85       	ldd	r23, Y+8	; 0x08
    360e:	89 85       	ldd	r24, Y+9	; 0x09
    3610:	9a 85       	ldd	r25, Y+10	; 0x0a
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	9e 83       	std	Y+6, r25	; 0x06
    361c:	8d 83       	std	Y+5, r24	; 0x05
    361e:	8d 81       	ldd	r24, Y+5	; 0x05
    3620:	9e 81       	ldd	r25, Y+6	; 0x06
    3622:	9a 83       	std	Y+2, r25	; 0x02
    3624:	89 83       	std	Y+1, r24	; 0x01
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	f1 f7       	brne	.-4      	; 0x362a <HLCD_voidSendPulse+0x1e8>
    362e:	9a 83       	std	Y+2, r25	; 0x02
    3630:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3632:	6c 96       	adiw	r28, 0x1c	; 28
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <HLCD_SendData>:

void HLCD_SendData(u8 data)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	0f 92       	push	r0
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,HIGH);
    3650:	82 e0       	ldi	r24, 0x02	; 2
    3652:	63 e0       	ldi	r22, 0x03	; 3
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW);
    365a:	82 e0       	ldi	r24, 0x02	; 2
    365c:	64 e0       	ldi	r22, 0x04	; 4
    365e:	40 e0       	ldi	r20, 0x00	; 0
    3660:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_DATA_PORT ,data);
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	b9 01       	movw	r22, r18
    3670:	0e 94 68 13 	call	0x26d0	; 0x26d0 <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    3674:	0e 94 21 1a 	call	0x3442	; 0x3442 <HLCD_voidSendPulse>
}
    3678:	0f 90       	pop	r0
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	08 95       	ret

00003680 <HLCD_PrintString>:

void HLCD_PrintString(u8 *string)
{
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	00 d0       	rcall	.+0      	; 0x3686 <HLCD_PrintString+0x6>
    3686:	00 d0       	rcall	.+0      	; 0x3688 <HLCD_PrintString+0x8>
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	9c 83       	std	Y+4, r25	; 0x04
    368e:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    3690:	1a 82       	std	Y+2, r1	; 0x02
    3692:	19 82       	std	Y+1, r1	; 0x01
    3694:	26 c0       	rjmp	.+76     	; 0x36e2 <HLCD_PrintString+0x62>
	while (*string > 0) {
		count++;
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	9a 81       	ldd	r25, Y+2	; 0x02
    369a:	01 96       	adiw	r24, 0x01	; 1
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
		HLCD_SendData(*string++);
    36a0:	eb 81       	ldd	r30, Y+3	; 0x03
    36a2:	fc 81       	ldd	r31, Y+4	; 0x04
    36a4:	20 81       	ld	r18, Z
    36a6:	8b 81       	ldd	r24, Y+3	; 0x03
    36a8:	9c 81       	ldd	r25, Y+4	; 0x04
    36aa:	01 96       	adiw	r24, 0x01	; 1
    36ac:	9c 83       	std	Y+4, r25	; 0x04
    36ae:	8b 83       	std	Y+3, r24	; 0x03
    36b0:	82 2f       	mov	r24, r18
    36b2:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_SendData>
		if (count == 16) {
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ba:	80 31       	cpi	r24, 0x10	; 16
    36bc:	91 05       	cpc	r25, r1
    36be:	21 f4       	brne	.+8      	; 0x36c8 <HLCD_PrintString+0x48>
			HLCD_voidSetDDRAM_Address(0x40);
    36c0:	80 e4       	ldi	r24, 0x40	; 64
    36c2:	0e 94 11 1a 	call	0x3422	; 0x3422 <HLCD_voidSetDDRAM_Address>
    36c6:	0d c0       	rjmp	.+26     	; 0x36e2 <HLCD_PrintString+0x62>
		} else if (count == 32) {
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	9a 81       	ldd	r25, Y+2	; 0x02
    36cc:	80 32       	cpi	r24, 0x20	; 32
    36ce:	91 05       	cpc	r25, r1
    36d0:	41 f4       	brne	.+16     	; 0x36e2 <HLCD_PrintString+0x62>
			HLCD_voidCommand(LCD_Clear_Screen);
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
			HLCD_voidSetDDRAM_Address(0);
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	0e 94 11 1a 	call	0x3422	; 0x3422 <HLCD_voidSetDDRAM_Address>
			count = 0;
    36de:	1a 82       	std	Y+2, r1	; 0x02
    36e0:	19 82       	std	Y+1, r1	; 0x01
}

void HLCD_PrintString(u8 *string)
{
	int count = 0;
	while (*string > 0) {
    36e2:	eb 81       	ldd	r30, Y+3	; 0x03
    36e4:	fc 81       	ldd	r31, Y+4	; 0x04
    36e6:	80 81       	ld	r24, Z
    36e8:	88 23       	and	r24, r24
    36ea:	a9 f6       	brne	.-86     	; 0x3696 <HLCD_PrintString+0x16>
			HLCD_voidCommand(LCD_Clear_Screen);
			HLCD_voidSetDDRAM_Address(0);
			count = 0;
		}
	}
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <LCD_display_number>:

void LCD_display_number(int number)
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	27 97       	sbiw	r28, 0x07	; 7
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	9f 83       	std	Y+7, r25	; 0x07
    3710:	8e 83       	std	Y+6, r24	; 0x06
	char str[5];

	itoa(number , str ,10);
    3712:	8e 81       	ldd	r24, Y+6	; 0x06
    3714:	9f 81       	ldd	r25, Y+7	; 0x07
    3716:	9e 01       	movw	r18, r28
    3718:	2f 5f       	subi	r18, 0xFF	; 255
    371a:	3f 4f       	sbci	r19, 0xFF	; 255
    371c:	b9 01       	movw	r22, r18
    371e:	4a e0       	ldi	r20, 0x0A	; 10
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	0e 94 08 27 	call	0x4e10	; 0x4e10 <itoa>
	HLCD_PrintString(str);
    3726:	ce 01       	movw	r24, r28
    3728:	01 96       	adiw	r24, 0x01	; 1
    372a:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
}
    372e:	27 96       	adiw	r28, 0x07	; 7
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret

00003740 <HLCD_GOTO_XY>:
void HLCD_GOTO_XY(u8 line, u8 position) {
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	00 d0       	rcall	.+0      	; 0x3746 <HLCD_GOTO_XY+0x6>
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1) {
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	81 30       	cpi	r24, 0x01	; 1
    3752:	39 f4       	brne	.+14     	; 0x3762 <HLCD_GOTO_XY+0x22>
		if (position < 16 && position >= 0) {
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	80 31       	cpi	r24, 0x10	; 16
    3758:	20 f4       	brcc	.+8      	; 0x3762 <HLCD_GOTO_XY+0x22>
			HLCD_voidSetDDRAM_Address(LCD_FIRST_ROW + position-1);
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	81 58       	subi	r24, 0x81	; 129
    375e:	0e 94 11 1a 	call	0x3422	; 0x3422 <HLCD_voidSetDDRAM_Address>
		}
	}
	if (line == 2) {
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	82 30       	cpi	r24, 0x02	; 2
    3766:	39 f4       	brne	.+14     	; 0x3776 <HLCD_GOTO_XY+0x36>
		if (position < 16 && position >= 0) {
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	80 31       	cpi	r24, 0x10	; 16
    376c:	20 f4       	brcc	.+8      	; 0x3776 <HLCD_GOTO_XY+0x36>
			HLCD_voidSetDDRAM_Address(LCD_SECOND_ROW + position -1);
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	81 54       	subi	r24, 0x41	; 65
    3772:	0e 94 11 1a 	call	0x3422	; 0x3422 <HLCD_voidSetDDRAM_Address>
		}
	}
}
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <Keypad_init>:
#include "KeyPade_interface.h"
#include "KeyPade_private.h"


void Keypad_init()
{
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(KeyPade_PORT , R1 ,INPUT);
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	40 e0       	ldi	r20, 0x00	; 0
    378e:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R1 ,HIGH);
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	41 e0       	ldi	r20, 0x01	; 1
    3798:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R2 ,INPUT);
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	61 e0       	ldi	r22, 0x01	; 1
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R2 ,HIGH);
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	61 e0       	ldi	r22, 0x01	; 1
    37aa:	41 e0       	ldi	r20, 0x01	; 1
    37ac:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R3 ,INPUT);
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	62 e0       	ldi	r22, 0x02	; 2
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R3 ,HIGH);
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	62 e0       	ldi	r22, 0x02	; 2
    37be:	41 e0       	ldi	r20, 0x01	; 1
    37c0:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R4 ,INPUT);
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	63 e0       	ldi	r22, 0x03	; 3
    37c8:	40 e0       	ldi	r20, 0x00	; 0
    37ca:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R4 ,HIGH);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	63 e0       	ldi	r22, 0x03	; 3
    37d2:	41 e0       	ldi	r20, 0x01	; 1
    37d4:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , C1 ,OUTPUT);
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	64 e0       	ldi	r22, 0x04	; 4
    37dc:	41 e0       	ldi	r20, 0x01	; 1
    37de:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C2 ,OUTPUT);
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	65 e0       	ldi	r22, 0x05	; 5
    37e6:	41 e0       	ldi	r20, 0x01	; 1
    37e8:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C3 ,OUTPUT);
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	66 e0       	ldi	r22, 0x06	; 6
    37f0:	41 e0       	ldi	r20, 0x01	; 1
    37f2:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C4 ,OUTPUT);
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	67 e0       	ldi	r22, 0x07	; 7
    37fa:	41 e0       	ldi	r20, 0x01	; 1
    37fc:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>


}
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <Keypad_getkey>:

u8 Keypad_getkey(void)
{
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	00 d0       	rcall	.+0      	; 0x380c <Keypad_getkey+0x6>
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
	for(u8 COL = 0 ; COL<4 ;COL++)
    3810:	1a 82       	std	Y+2, r1	; 0x02
    3812:	2b c0       	rjmp	.+86     	; 0x386a <Keypad_getkey+0x64>
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	88 2f       	mov	r24, r24
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	fc 01       	movw	r30, r24
    3820:	e8 5b       	subi	r30, 0xB8	; 184
    3822:	fe 4f       	sbci	r31, 0xFE	; 254
    3824:	80 81       	ld	r24, Z
    3826:	91 81       	ldd	r25, Z+1	; 0x01
    3828:	98 2f       	mov	r25, r24
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	69 2f       	mov	r22, r25
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

		for(u8 ROW = 0 ; ROW<4 ;ROW++)
    3834:	19 82       	std	Y+1, r1	; 0x01
    3836:	03 c0       	rjmp	.+6      	; 0x383e <Keypad_getkey+0x38>
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	8f 5f       	subi	r24, 0xFF	; 255
    383c:	89 83       	std	Y+1, r24	; 0x01
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	84 30       	cpi	r24, 0x04	; 4
    3842:	d0 f3       	brcs	.-12     	; 0x3838 <Keypad_getkey+0x32>
//			{
//				while(DIO_u8GetPinValue(KeyPade_PORT ,Key_padRow[ROW])==0);
//				return digit[ROW][COL] ;
//			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
    3844:	8a 81       	ldd	r24, Y+2	; 0x02
    3846:	88 2f       	mov	r24, r24
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	88 0f       	add	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	fc 01       	movw	r30, r24
    3850:	e8 5b       	subi	r30, 0xB8	; 184
    3852:	fe 4f       	sbci	r31, 0xFE	; 254
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	98 2f       	mov	r25, r24
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	69 2f       	mov	r22, r25
    385e:	41 e0       	ldi	r20, 0x01	; 1
    3860:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

}

u8 Keypad_getkey(void)
{
	for(u8 COL = 0 ; COL<4 ;COL++)
    3864:	8a 81       	ldd	r24, Y+2	; 0x02
    3866:	8f 5f       	subi	r24, 0xFF	; 255
    3868:	8a 83       	std	Y+2, r24	; 0x02
    386a:	8a 81       	ldd	r24, Y+2	; 0x02
    386c:	84 30       	cpi	r24, 0x04	; 4
    386e:	90 f2       	brcs	.-92     	; 0x3814 <Keypad_getkey+0xe>
//				return digit[ROW][COL] ;
//			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
	}
	return -1;
    3870:	8f ef       	ldi	r24, 0xFF	; 255
}
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <ICU_Init>:
#include "ICU_private.h"
#include "ICU_config.h"
#include "ICU_interface.h"

void ICU_Init(void)
{
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
#if ICU_EXTI_CHANNEL == EXTI0
	DIO_u8SetPinDirection(PORTD, PIN2, INPUT);
    3884:	83 e0       	ldi	r24, 0x03	; 3
    3886:	62 e0       	ldi	r22, 0x02	; 2
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTD, PIN3, INPUT);
#elif ICU_EXTI_CHANNEL == EXTI2
	DIO_u8SetPinDirection(PORTB, PIN2, INPUT);
#endif

	EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	63 e0       	ldi	r22, 0x03	; 3
    3892:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <EXTI_SetMode>
	EXTI_SetCallback(ICU_EXTI_CHANNEL, EXTI_Callback);
    3896:	2e e9       	ldi	r18, 0x9E	; 158
    3898:	3c e1       	ldi	r19, 0x1C	; 28
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	b9 01       	movw	r22, r18
    389e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <EXTI_SetCallback>
	EXTI_Enable(ICU_EXTI_CHANNEL);
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <EXTI_Enable>

	TIM1_voidInit();
    38a8:	0e 94 a2 09 	call	0x1344	; 0x1344 <TIM1_voidInit>
	TIM1_ClearCounterValue();
    38ac:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIM1_ClearCounterValue>
}
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	08 95       	ret

000038b6 <ICU_GetOnTimeUs>:

u16 ICU_GetOnTimeUs(void)
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	cd b7       	in	r28, 0x3d	; 61
    38bc:	de b7       	in	r29, 0x3e	; 62
	return t_on;
    38be:	80 91 81 01 	lds	r24, 0x0181
    38c2:	90 91 82 01 	lds	r25, 0x0182
}
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	08 95       	ret

000038cc <ICU_GetPeriodUs>:

u16 ICU_GetPeriodUs(void)
{
    38cc:	df 93       	push	r29
    38ce:	cf 93       	push	r28
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
	return period;
    38d4:	80 91 83 01 	lds	r24, 0x0183
    38d8:	90 91 84 01 	lds	r25, 0x0184
}
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <ICU_GetDutyCycle>:

u8 ICU_GetDutyCycle(void)
{
    38e2:	ef 92       	push	r14
    38e4:	ff 92       	push	r15
    38e6:	0f 93       	push	r16
    38e8:	1f 93       	push	r17
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	return (((u32)t_on * 100) / period);
    38f2:	80 91 81 01 	lds	r24, 0x0181
    38f6:	90 91 82 01 	lds	r25, 0x0182
    38fa:	cc 01       	movw	r24, r24
    38fc:	a0 e0       	ldi	r26, 0x00	; 0
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	24 e6       	ldi	r18, 0x64	; 100
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	40 e0       	ldi	r20, 0x00	; 0
    3906:	50 e0       	ldi	r21, 0x00	; 0
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <__mulsi3>
    3910:	7b 01       	movw	r14, r22
    3912:	8c 01       	movw	r16, r24
    3914:	80 91 83 01 	lds	r24, 0x0183
    3918:	90 91 84 01 	lds	r25, 0x0184
    391c:	9c 01       	movw	r18, r24
    391e:	40 e0       	ldi	r20, 0x00	; 0
    3920:	50 e0       	ldi	r21, 0x00	; 0
    3922:	c8 01       	movw	r24, r16
    3924:	b7 01       	movw	r22, r14
    3926:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
    392a:	da 01       	movw	r26, r20
    392c:	c9 01       	movw	r24, r18
}
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	1f 91       	pop	r17
    3934:	0f 91       	pop	r16
    3936:	ff 90       	pop	r15
    3938:	ef 90       	pop	r14
    393a:	08 95       	ret

0000393c <EXTI_Callback>:

void EXTI_Callback(void)
{
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	00 d0       	rcall	.+0      	; 0x3942 <EXTI_Callback+0x6>
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
	static u8 state = ICU_STATE_WAIT_FOR_RISINGEDGE1;

	switch(state)
    3946:	80 91 85 01 	lds	r24, 0x0185
    394a:	28 2f       	mov	r18, r24
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	3a 83       	std	Y+2, r19	; 0x02
    3950:	29 83       	std	Y+1, r18	; 0x01
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	9a 81       	ldd	r25, Y+2	; 0x02
    3956:	81 30       	cpi	r24, 0x01	; 1
    3958:	91 05       	cpc	r25, r1
    395a:	99 f0       	breq	.+38     	; 0x3982 <EXTI_Callback+0x46>
    395c:	29 81       	ldd	r18, Y+1	; 0x01
    395e:	3a 81       	ldd	r19, Y+2	; 0x02
    3960:	22 30       	cpi	r18, 0x02	; 2
    3962:	31 05       	cpc	r19, r1
    3964:	e1 f0       	breq	.+56     	; 0x399e <EXTI_Callback+0x62>
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	9a 81       	ldd	r25, Y+2	; 0x02
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	21 f5       	brne	.+72     	; 0x39b6 <EXTI_Callback+0x7a>
	{
	case ICU_STATE_WAIT_FOR_RISINGEDGE1:
		TIM1_ClearCounterValue();
    396e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIM1_ClearCounterValue>
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_FALLING);
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	62 e0       	ldi	r22, 0x02	; 2
    3976:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <EXTI_SetMode>
		state = ICU_STATE_WAIT_FOR_FALLINGEDGE;
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	80 93 85 01 	sts	0x0185, r24
    3980:	1a c0       	rjmp	.+52     	; 0x39b6 <EXTI_Callback+0x7a>
		break;
	case ICU_STATE_WAIT_FOR_FALLINGEDGE:
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	63 e0       	ldi	r22, 0x03	; 3
    3986:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <EXTI_SetMode>
		t_on = TIM1_GetCounterValueUs();
    398a:	0e 94 95 0a 	call	0x152a	; 0x152a <TIM1_GetCounterValueUs>
    398e:	90 93 82 01 	sts	0x0182, r25
    3992:	80 93 81 01 	sts	0x0181, r24
		state = ICU_STATE_WAIT_FOR_RISINGEDGE2;
    3996:	82 e0       	ldi	r24, 0x02	; 2
    3998:	80 93 85 01 	sts	0x0185, r24
    399c:	0c c0       	rjmp	.+24     	; 0x39b6 <EXTI_Callback+0x7a>
		break;
	case ICU_STATE_WAIT_FOR_RISINGEDGE2:
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	63 e0       	ldi	r22, 0x03	; 3
    39a2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <EXTI_SetMode>
		period = TIM1_GetCounterValueUs();
    39a6:	0e 94 95 0a 	call	0x152a	; 0x152a <TIM1_GetCounterValueUs>
    39aa:	90 93 84 01 	sts	0x0184, r25
    39ae:	80 93 83 01 	sts	0x0183, r24
		state = ICU_STATE_WAIT_FOR_RISINGEDGE1;
    39b2:	10 92 85 01 	sts	0x0185, r1
		break;
	}
}
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	08 95       	ret

000039c0 <EEPROM_Init>:
#include "EEPROM_config.h"
#include "EEPROM_interface.h"


void EEPROM_Init()
{
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTC , PIN0 , INPUT);
    39c8:	82 e0       	ldi	r24, 0x02	; 2
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	40 e0       	ldi	r20, 0x00	; 0
    39ce:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTC , PIN1 , INPUT);
    39d2:	82 e0       	ldi	r24, 0x02	; 2
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	40 e0       	ldi	r20, 0x00	; 0
    39d8:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(PORTC , PIN0 , LOW);
    39dc:	82 e0       	ldi	r24, 0x02	; 2
    39de:	60 e0       	ldi	r22, 0x00	; 0
    39e0:	40 e0       	ldi	r20, 0x00	; 0
    39e2:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORTC , PIN1 , LOW);
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	61 e0       	ldi	r22, 0x01	; 1
    39ea:	40 e0       	ldi	r20, 0x00	; 0
    39ec:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

	I2C_InitMaster(10000);
    39f0:	80 e1       	ldi	r24, 0x10	; 16
    39f2:	97 e2       	ldi	r25, 0x27	; 39
    39f4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <I2C_InitMaster>

}
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	08 95       	ret

000039fe <EEPROM_SendByte>:
u8 EEPROM_SendByte(u8 byte ,u16 Address)
{
    39fe:	df 93       	push	r29
    3a00:	cf 93       	push	r28
    3a02:	cd b7       	in	r28, 0x3d	; 61
    3a04:	de b7       	in	r29, 0x3e	; 62
    3a06:	27 97       	sbiw	r28, 0x07	; 7
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	8c 83       	std	Y+4, r24	; 0x04
    3a14:	7e 83       	std	Y+6, r23	; 0x06
    3a16:	6d 83       	std	Y+5, r22	; 0x05
	u8 state = 1 ;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	8b 83       	std	Y+3, r24	; 0x03
	//1 0 1 0 A2 DA1 DA2  RW
	u8 DevAddress  =((0b1010<<4) |(EEPROM_A2_VAL <<3 )|(((Address >> 8)&3)<<1)&(~1));
    3a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a20:	89 2f       	mov	r24, r25
    3a22:	99 27       	eor	r25, r25
    3a24:	83 70       	andi	r24, 0x03	; 3
    3a26:	88 0f       	add	r24, r24
    3a28:	80 6a       	ori	r24, 0xA0	; 160
    3a2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 DaAdress = ((u8)Address );
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	89 83       	std	Y+1, r24	; 0x01

	//send start
	state = I2C_SendStart();
    3a30:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <I2C_SendStart>
    3a34:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_STA) return state ;
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	88 30       	cpi	r24, 0x08	; 8
    3a3a:	19 f0       	breq	.+6      	; 0x3a42 <EEPROM_SendByte+0x44>
    3a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3e:	8f 83       	std	Y+7, r24	; 0x07
    3a40:	2c c0       	rjmp	.+88     	; 0x3a9a <EEPROM_SendByte+0x9c>
	//send device address

	DevAddress >>= 1 ;
    3a42:	8a 81       	ldd	r24, Y+2	; 0x02
    3a44:	86 95       	lsr	r24
    3a46:	8a 83       	std	Y+2, r24	; 0x02
	state = I2C_SendAddress(DevAddress , I2C_WRITE_OPP);
    3a48:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4a:	60 e0       	ldi	r22, 0x00	; 0
    3a4c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <I2C_SendAddress>
    3a50:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_ADDRESS_ACK)
    3a52:	8b 81       	ldd	r24, Y+3	; 0x03
    3a54:	88 31       	cpi	r24, 0x18	; 24
    3a56:	29 f0       	breq	.+10     	; 0x3a62 <EEPROM_SendByte+0x64>
	{
		I2C_SendStop();
    3a58:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <I2C_SendStop>
		return state ;
    3a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5e:	8f 83       	std	Y+7, r24	; 0x07
    3a60:	1c c0       	rjmp	.+56     	; 0x3a9a <EEPROM_SendByte+0x9c>
	}

	state = I2C_SendData(DaAdress);
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <I2C_SendData>
    3a68:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_DATA_ACK)
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	88 32       	cpi	r24, 0x28	; 40
    3a6e:	29 f0       	breq	.+10     	; 0x3a7a <EEPROM_SendByte+0x7c>
	{
		I2C_SendStop();
    3a70:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <I2C_SendStop>
		return state ;
    3a74:	8b 81       	ldd	r24, Y+3	; 0x03
    3a76:	8f 83       	std	Y+7, r24	; 0x07
    3a78:	10 c0       	rjmp	.+32     	; 0x3a9a <EEPROM_SendByte+0x9c>
	}

	state = I2C_SendData(byte);
    3a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a7c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <I2C_SendData>
    3a80:	8b 83       	std	Y+3, r24	; 0x03
	if(state != I2C_STAT_DATA_ACK)
    3a82:	8b 81       	ldd	r24, Y+3	; 0x03
    3a84:	88 32       	cpi	r24, 0x28	; 40
    3a86:	29 f0       	breq	.+10     	; 0x3a92 <EEPROM_SendByte+0x94>
	{
		I2C_SendStop();
    3a88:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <I2C_SendStop>
		return state ;
    3a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8e:	8f 83       	std	Y+7, r24	; 0x07
    3a90:	04 c0       	rjmp	.+8      	; 0x3a9a <EEPROM_SendByte+0x9c>
	}

	I2C_SendStop();
    3a92:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <I2C_SendStop>

	return state ;
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	8f 83       	std	Y+7, r24	; 0x07
    3a9a:	8f 81       	ldd	r24, Y+7	; 0x07

}
    3a9c:	27 96       	adiw	r28, 0x07	; 7
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	f8 94       	cli
    3aa2:	de bf       	out	0x3e, r29	; 62
    3aa4:	0f be       	out	0x3f, r0	; 63
    3aa6:	cd bf       	out	0x3d, r28	; 61
    3aa8:	cf 91       	pop	r28
    3aaa:	df 91       	pop	r29
    3aac:	08 95       	ret

00003aae <EEPROM_SendFram>:

u8 EEPROM_SendFram(u8 byte ,u16 Address)
{
    3aae:	df 93       	push	r29
    3ab0:	cf 93       	push	r28
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	27 97       	sbiw	r28, 0x07	; 7
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	f8 94       	cli
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	0f be       	out	0x3f, r0	; 63
    3ac0:	cd bf       	out	0x3d, r28	; 61
    3ac2:	8d 83       	std	Y+5, r24	; 0x05
    3ac4:	7f 83       	std	Y+7, r23	; 0x07
    3ac6:	6e 83       	std	Y+6, r22	; 0x06
	u8 state =1;
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	8a 83       	std	Y+2, r24	; 0x02
	u8 DevAddress  =((0b1010<<4) |(EEPROM_A2_VAL <<3 )|(((Address >> 8)&3)<<1)&(~1));
    3acc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ace:	9f 81       	ldd	r25, Y+7	; 0x07
    3ad0:	89 2f       	mov	r24, r25
    3ad2:	99 27       	eor	r25, r25
    3ad4:	83 70       	andi	r24, 0x03	; 3
    3ad6:	88 0f       	add	r24, r24
    3ad8:	80 6a       	ori	r24, 0xA0	; 160
    3ada:	89 83       	std	Y+1, r24	; 0x01

	u8 arr[2] = {0} ;
    3adc:	1c 82       	std	Y+4, r1	; 0x04
    3ade:	1b 82       	std	Y+3, r1	; 0x03

	arr[0] = (u8)Address ;
    3ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ae2:	8b 83       	std	Y+3, r24	; 0x03
	arr[1]= byte ;
    3ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae6:	8c 83       	std	Y+4, r24	; 0x04

	state = I2C_SendFram((DevAddress>>1) , arr ,2);
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	86 95       	lsr	r24
    3aec:	9e 01       	movw	r18, r28
    3aee:	2d 5f       	subi	r18, 0xFD	; 253
    3af0:	3f 4f       	sbci	r19, 0xFF	; 255
    3af2:	b9 01       	movw	r22, r18
    3af4:	42 e0       	ldi	r20, 0x02	; 2
    3af6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <I2C_SendFram>
    3afa:	8a 83       	std	Y+2, r24	; 0x02

	return state ;
    3afc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3afe:	27 96       	adiw	r28, 0x07	; 7
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u8 *buff ,u16 Address)
{
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	28 97       	sbiw	r28, 0x08	; 8
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	9d 83       	std	Y+5, r25	; 0x05
    3b26:	8c 83       	std	Y+4, r24	; 0x04
    3b28:	7f 83       	std	Y+7, r23	; 0x07
    3b2a:	6e 83       	std	Y+6, r22	; 0x06
	u8 state = 1 ;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	8b 83       	std	Y+3, r24	; 0x03
	//1 0 1 0 A2 DA1 DA2  RW
	u8 DevAddress  =((0b1010<<4) |(EEPROM_A2_VAL <<3 )|(((Address >> 8)&3)<<1)&(~1));
    3b30:	8e 81       	ldd	r24, Y+6	; 0x06
    3b32:	9f 81       	ldd	r25, Y+7	; 0x07
    3b34:	89 2f       	mov	r24, r25
    3b36:	99 27       	eor	r25, r25
    3b38:	83 70       	andi	r24, 0x03	; 3
    3b3a:	88 0f       	add	r24, r24
    3b3c:	80 6a       	ori	r24, 0xA0	; 160
    3b3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 DaAdress = ((u8)Address );
    3b40:	8e 81       	ldd	r24, Y+6	; 0x06
    3b42:	89 83       	std	Y+1, r24	; 0x01

	//send start
	I2C_SendStart();
    3b44:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <I2C_SendStart>

	//send device address

	DevAddress >>= 1 ;
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	86 95       	lsr	r24
    3b4c:	8a 83       	std	Y+2, r24	; 0x02
	state = I2C_SendAddress(DevAddress , I2C_WRITE_OPP);
    3b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b50:	60 e0       	ldi	r22, 0x00	; 0
    3b52:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <I2C_SendAddress>
    3b56:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_ADDRESS_ACK)
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	88 31       	cpi	r24, 0x18	; 24
    3b5c:	29 f0       	breq	.+10     	; 0x3b68 <EEPROM_ReadByte+0x58>
	{
		I2C_SendStop();
    3b5e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <I2C_SendStop>
		return state ;
    3b62:	8b 81       	ldd	r24, Y+3	; 0x03
    3b64:	88 87       	std	Y+8, r24	; 0x08
    3b66:	22 c0       	rjmp	.+68     	; 0x3bac <EEPROM_ReadByte+0x9c>
	}

	state = I2C_SendData(DaAdress);
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <I2C_SendData>
    3b6e:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_DATA_ACK)
    3b70:	8b 81       	ldd	r24, Y+3	; 0x03
    3b72:	88 32       	cpi	r24, 0x28	; 40
    3b74:	29 f0       	breq	.+10     	; 0x3b80 <EEPROM_ReadByte+0x70>
	{
		I2C_SendStop();
    3b76:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <I2C_SendStop>
		return state ;
    3b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7c:	88 87       	std	Y+8, r24	; 0x08
    3b7e:	16 c0       	rjmp	.+44     	; 0x3bac <EEPROM_ReadByte+0x9c>
	}

	//DevAddress >>= 1 ;

	state = I2C_SendRepStart();
    3b80:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <I2C_SendRepStart>
    3b84:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_STA) return state ;
    3b86:	8b 81       	ldd	r24, Y+3	; 0x03
    3b88:	88 30       	cpi	r24, 0x08	; 8
    3b8a:	19 f0       	breq	.+6      	; 0x3b92 <EEPROM_ReadByte+0x82>
    3b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8e:	88 87       	std	Y+8, r24	; 0x08
    3b90:	0d c0       	rjmp	.+26     	; 0x3bac <EEPROM_ReadByte+0x9c>


	state = I2C_SendAddress(DevAddress , I2C_READ_OPP);
    3b92:	8a 81       	ldd	r24, Y+2	; 0x02
    3b94:	61 e0       	ldi	r22, 0x01	; 1
    3b96:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <I2C_SendAddress>
    3b9a:	8b 83       	std	Y+3, r24	; 0x03


	*buff = I2C_ReceiveWithoutAck();
    3b9c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <I2C_ReceiveWithoutAck>
    3ba0:	ec 81       	ldd	r30, Y+4	; 0x04
    3ba2:	fd 81       	ldd	r31, Y+5	; 0x05
    3ba4:	80 83       	st	Z, r24

	I2C_SendStop();
    3ba6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <I2C_SendStop>

	return 0 ;
    3baa:	18 86       	std	Y+8, r1	; 0x08
    3bac:	88 85       	ldd	r24, Y+8	; 0x08

}
    3bae:	28 96       	adiw	r28, 0x08	; 8
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	08 95       	ret

00003bc0 <Bluetooth_Init>:
#include "Bluetooth_interface.h"
#include "Bluetooth_private.h"


void Bluetooth_Init(void)
{
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
 USART_enuInit();
    3bc8:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_enuInit>
}
    3bcc:	cf 91       	pop	r28
    3bce:	df 91       	pop	r29
    3bd0:	08 95       	ret

00003bd2 <Bluetooth_SendData>:
void Bluetooth_SendData(u8 data)
{
    3bd2:	df 93       	push	r29
    3bd4:	cf 93       	push	r28
    3bd6:	0f 92       	push	r0
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
    3bdc:	89 83       	std	Y+1, r24	; 0x01
	 USART_enuSendCharacter( data);
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	0e 94 00 06 	call	0xc00	; 0xc00 <USART_enuSendCharacter>
}
    3be4:	0f 90       	pop	r0
    3be6:	cf 91       	pop	r28
    3be8:	df 91       	pop	r29
    3bea:	08 95       	ret

00003bec <Bluetooth_RecieveData>:
void  Bluetooth_RecieveData(u8 *Copy_Pu8ReceivedChar )
{
    3bec:	df 93       	push	r29
    3bee:	cf 93       	push	r28
    3bf0:	00 d0       	rcall	.+0      	; 0x3bf2 <Bluetooth_RecieveData+0x6>
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	9a 83       	std	Y+2, r25	; 0x02
    3bf8:	89 83       	std	Y+1, r24	; 0x01
	USART_enuReceiveCharacter(Copy_Pu8ReceivedChar );
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfe:	0e 94 1f 06 	call	0xc3e	; 0xc3e <USART_enuReceiveCharacter>
}
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <BUZZER_voidInit>:

#include "BUZZER_interface.h"
#include "BUZZER_private.h"

void BUZZER_voidInit(u8 L_u8Buzzer)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <BUZZER_voidInit+0x6>
    3c12:	0f 92       	push	r0
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8Buzzer)
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	28 2f       	mov	r18, r24
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	3b 83       	std	Y+3, r19	; 0x03
    3c22:	2a 83       	std	Y+2, r18	; 0x02
    3c24:	8a 81       	ldd	r24, Y+2	; 0x02
    3c26:	9b 81       	ldd	r25, Y+3	; 0x03
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	91 05       	cpc	r25, r1
    3c2c:	31 f0       	breq	.+12     	; 0x3c3a <BUZZER_voidInit+0x2e>
    3c2e:	2a 81       	ldd	r18, Y+2	; 0x02
    3c30:	3b 81       	ldd	r19, Y+3	; 0x03
    3c32:	22 30       	cpi	r18, 0x02	; 2
    3c34:	31 05       	cpc	r19, r1
    3c36:	39 f0       	breq	.+14     	; 0x3c46 <BUZZER_voidInit+0x3a>
    3c38:	0b c0       	rjmp	.+22     	; 0x3c50 <BUZZER_voidInit+0x44>
	{
	case BUZZER1 :DIO_u8SetPinDirection(BUZZER1_PORT, BUZZER1_PIN, OUTPUT); break ;
    3c3a:	83 e0       	ldi	r24, 0x03	; 3
    3c3c:	62 e0       	ldi	r22, 0x02	; 2
    3c3e:	41 e0       	ldi	r20, 0x01	; 1
    3c40:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>
    3c44:	05 c0       	rjmp	.+10     	; 0x3c50 <BUZZER_voidInit+0x44>
	case BUZZER2 :DIO_u8SetPinDirection(BUZZER2_PORT, BUZZER2_PIN, OUTPUT); break ;
    3c46:	83 e0       	ldi	r24, 0x03	; 3
    3c48:	63 e0       	ldi	r22, 0x03	; 3
    3c4a:	41 e0       	ldi	r20, 0x01	; 1
    3c4c:	0e 94 97 11 	call	0x232e	; 0x232e <DIO_u8SetPinDirection>

	}
}
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	cf 91       	pop	r28
    3c58:	df 91       	pop	r29
    3c5a:	08 95       	ret

00003c5c <BUZZER_voidSetBuzzerHigh>:
void BUZZER_voidSetBuzzerHigh(u8 L_u8Buzzer)
{
    3c5c:	df 93       	push	r29
    3c5e:	cf 93       	push	r28
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <BUZZER_voidSetBuzzerHigh+0x6>
    3c62:	0f 92       	push	r0
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
    3c68:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8Buzzer){
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	3b 83       	std	Y+3, r19	; 0x03
    3c72:	2a 83       	std	Y+2, r18	; 0x02
    3c74:	8a 81       	ldd	r24, Y+2	; 0x02
    3c76:	9b 81       	ldd	r25, Y+3	; 0x03
    3c78:	81 30       	cpi	r24, 0x01	; 1
    3c7a:	91 05       	cpc	r25, r1
    3c7c:	31 f0       	breq	.+12     	; 0x3c8a <BUZZER_voidSetBuzzerHigh+0x2e>
    3c7e:	2a 81       	ldd	r18, Y+2	; 0x02
    3c80:	3b 81       	ldd	r19, Y+3	; 0x03
    3c82:	22 30       	cpi	r18, 0x02	; 2
    3c84:	31 05       	cpc	r19, r1
    3c86:	39 f0       	breq	.+14     	; 0x3c96 <BUZZER_voidSetBuzzerHigh+0x3a>
    3c88:	0b c0       	rjmp	.+22     	; 0x3ca0 <BUZZER_voidSetBuzzerHigh+0x44>
	case BUZZER1: DIO_u8SetPinValue(BUZZER1_PORT, BUZZER1_PIN, HIGH); break;
    3c8a:	83 e0       	ldi	r24, 0x03	; 3
    3c8c:	62 e0       	ldi	r22, 0x02	; 2
    3c8e:	41 e0       	ldi	r20, 0x01	; 1
    3c90:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    3c94:	05 c0       	rjmp	.+10     	; 0x3ca0 <BUZZER_voidSetBuzzerHigh+0x44>
	case BUZZER2: DIO_u8SetPinValue(BUZZER2_PORT, BUZZER2_PIN, HIGH); break;
    3c96:	83 e0       	ldi	r24, 0x03	; 3
    3c98:	63 e0       	ldi	r22, 0x03	; 3
    3c9a:	41 e0       	ldi	r20, 0x01	; 1
    3c9c:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

	}
}
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	08 95       	ret

00003cac <BUZZER_voidSetBuzzerLow>:
void BUZZER_voidSetBuzzerLow(u8 L_u8Buzzer)
{
    3cac:	df 93       	push	r29
    3cae:	cf 93       	push	r28
    3cb0:	00 d0       	rcall	.+0      	; 0x3cb2 <BUZZER_voidSetBuzzerLow+0x6>
    3cb2:	0f 92       	push	r0
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8Buzzer){
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	28 2f       	mov	r18, r24
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	3b 83       	std	Y+3, r19	; 0x03
    3cc2:	2a 83       	std	Y+2, r18	; 0x02
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc8:	81 30       	cpi	r24, 0x01	; 1
    3cca:	91 05       	cpc	r25, r1
    3ccc:	31 f0       	breq	.+12     	; 0x3cda <BUZZER_voidSetBuzzerLow+0x2e>
    3cce:	2a 81       	ldd	r18, Y+2	; 0x02
    3cd0:	3b 81       	ldd	r19, Y+3	; 0x03
    3cd2:	22 30       	cpi	r18, 0x02	; 2
    3cd4:	31 05       	cpc	r19, r1
    3cd6:	39 f0       	breq	.+14     	; 0x3ce6 <BUZZER_voidSetBuzzerLow+0x3a>
    3cd8:	0b c0       	rjmp	.+22     	; 0x3cf0 <BUZZER_voidSetBuzzerLow+0x44>
	case BUZZER1: DIO_u8SetPinValue(BUZZER1_PORT, BUZZER1_PIN, LOW); break;
    3cda:	83 e0       	ldi	r24, 0x03	; 3
    3cdc:	62 e0       	ldi	r22, 0x02	; 2
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>
    3ce4:	05 c0       	rjmp	.+10     	; 0x3cf0 <BUZZER_voidSetBuzzerLow+0x44>
	case BUZZER2: DIO_u8SetPinValue(BUZZER2_PORT, BUZZER2_PIN, LOW); break;
    3ce6:	83 e0       	ldi	r24, 0x03	; 3
    3ce8:	63 e0       	ldi	r22, 0x03	; 3
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_u8SetPinValue>

	}
}
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <Get_Password>:


u8  byte= 0 ,address = 0;
u8 data ;
void Get_Password()
{
    3cfc:	df 93       	push	r29
    3cfe:	cf 93       	push	r28
    3d00:	0f 92       	push	r0
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
	byte = 0 ;
    3d06:	10 92 8a 01 	sts	0x018A, r1
	PASSWORD = 0 ;
    3d0a:	10 92 86 01 	sts	0x0186, r1
    3d0e:	10 92 87 01 	sts	0x0187, r1
    3d12:	10 92 88 01 	sts	0x0188, r1
    3d16:	10 92 89 01 	sts	0x0189, r1
	u8 data ;
	address++ ;
    3d1a:	80 91 8b 01 	lds	r24, 0x018B
    3d1e:	8f 5f       	subi	r24, 0xFF	; 255
    3d20:	80 93 8b 01 	sts	0x018B, r24
    3d24:	53 c0       	rjmp	.+166    	; 0x3dcc <Get_Password+0xd0>
	while(data != '='&& data !=0x0D)
	{
		//data = Keypad_getkey();
		 Bluetooth_RecieveData(&data);
    3d26:	ce 01       	movw	r24, r28
    3d28:	01 96       	adiw	r24, 0x01	; 1
    3d2a:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <Bluetooth_RecieveData>
		if(data != -1 && data != '=' && data !=0x0D)
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	8d 33       	cpi	r24, 0x3D	; 61
    3d32:	09 f4       	brne	.+2      	; 0x3d36 <Get_Password+0x3a>
    3d34:	4b c0       	rjmp	.+150    	; 0x3dcc <Get_Password+0xd0>
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	8d 30       	cpi	r24, 0x0D	; 13
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <Get_Password+0x42>
    3d3c:	47 c0       	rjmp	.+142    	; 0x3dcc <Get_Password+0xd0>
		{
			HLCD_SendData('*');
    3d3e:	8a e2       	ldi	r24, 0x2A	; 42
    3d40:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_SendData>
			data-=48 ;
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	80 53       	subi	r24, 0x30	; 48
    3d48:	89 83       	std	Y+1, r24	; 0x01
			EEPROM_SendByte(data ,address);
    3d4a:	99 81       	ldd	r25, Y+1	; 0x01
    3d4c:	80 91 8b 01 	lds	r24, 0x018B
    3d50:	28 2f       	mov	r18, r24
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	89 2f       	mov	r24, r25
    3d56:	b9 01       	movw	r22, r18
    3d58:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <EEPROM_SendByte>
			PASSWORD+=data ;
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	28 2f       	mov	r18, r24
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	80 91 86 01 	lds	r24, 0x0186
    3d6a:	90 91 87 01 	lds	r25, 0x0187
    3d6e:	a0 91 88 01 	lds	r26, 0x0188
    3d72:	b0 91 89 01 	lds	r27, 0x0189
    3d76:	82 0f       	add	r24, r18
    3d78:	93 1f       	adc	r25, r19
    3d7a:	a4 1f       	adc	r26, r20
    3d7c:	b5 1f       	adc	r27, r21
    3d7e:	80 93 86 01 	sts	0x0186, r24
    3d82:	90 93 87 01 	sts	0x0187, r25
    3d86:	a0 93 88 01 	sts	0x0188, r26
    3d8a:	b0 93 89 01 	sts	0x0189, r27
			PASSWORD*=10;
    3d8e:	80 91 86 01 	lds	r24, 0x0186
    3d92:	90 91 87 01 	lds	r25, 0x0187
    3d96:	a0 91 88 01 	lds	r26, 0x0188
    3d9a:	b0 91 89 01 	lds	r27, 0x0189
    3d9e:	2a e0       	ldi	r18, 0x0A	; 10
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	40 e0       	ldi	r20, 0x00	; 0
    3da4:	50 e0       	ldi	r21, 0x00	; 0
    3da6:	bc 01       	movw	r22, r24
    3da8:	cd 01       	movw	r24, r26
    3daa:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <__mulsi3>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	80 93 86 01 	sts	0x0186, r24
    3db6:	90 93 87 01 	sts	0x0187, r25
    3dba:	a0 93 88 01 	sts	0x0188, r26
    3dbe:	b0 93 89 01 	sts	0x0189, r27
			address++ ;
    3dc2:	80 91 8b 01 	lds	r24, 0x018B
    3dc6:	8f 5f       	subi	r24, 0xFF	; 255
    3dc8:	80 93 8b 01 	sts	0x018B, r24
{
	byte = 0 ;
	PASSWORD = 0 ;
	u8 data ;
	address++ ;
	while(data != '='&& data !=0x0D)
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	8d 33       	cpi	r24, 0x3D	; 61
    3dd0:	21 f0       	breq	.+8      	; 0x3dda <Get_Password+0xde>
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	8d 30       	cpi	r24, 0x0D	; 13
    3dd6:	09 f0       	breq	.+2      	; 0x3dda <Get_Password+0xde>
    3dd8:	a6 cf       	rjmp	.-180    	; 0x3d26 <Get_Password+0x2a>
			PASSWORD+=data ;
			PASSWORD*=10;
			address++ ;
		}
	}
	PASSWORD/=10 ;
    3dda:	80 91 86 01 	lds	r24, 0x0186
    3dde:	90 91 87 01 	lds	r25, 0x0187
    3de2:	a0 91 88 01 	lds	r26, 0x0188
    3de6:	b0 91 89 01 	lds	r27, 0x0189
    3dea:	2a e0       	ldi	r18, 0x0A	; 10
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
    3dfa:	da 01       	movw	r26, r20
    3dfc:	c9 01       	movw	r24, r18
    3dfe:	80 93 86 01 	sts	0x0186, r24
    3e02:	90 93 87 01 	sts	0x0187, r25
    3e06:	a0 93 88 01 	sts	0x0188, r26
    3e0a:	b0 93 89 01 	sts	0x0189, r27
	EEPROM_SendByte(0xFF ,address);
    3e0e:	80 91 8b 01 	lds	r24, 0x018B
    3e12:	28 2f       	mov	r18, r24
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	8f ef       	ldi	r24, 0xFF	; 255
    3e18:	b9 01       	movw	r22, r18
    3e1a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <EEPROM_SendByte>
}
    3e1e:	0f 90       	pop	r0
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	08 95       	ret

00003e26 <Get_name>:

void Get_name()
{
    3e26:	df 93       	push	r29
    3e28:	cf 93       	push	r28
    3e2a:	0f 92       	push	r0
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
	address = 0 ;
    3e30:	10 92 8b 01 	sts	0x018B, r1
	byte = 0 ;
    3e34:	10 92 8a 01 	sts	0x018A, r1
	PASSWORD = 0 ;
    3e38:	10 92 86 01 	sts	0x0186, r1
    3e3c:	10 92 87 01 	sts	0x0187, r1
    3e40:	10 92 88 01 	sts	0x0188, r1
    3e44:	10 92 89 01 	sts	0x0189, r1
	u8 index=0 ;
    3e48:	19 82       	std	Y+1, r1	; 0x01
    3e4a:	2b c0       	rjmp	.+86     	; 0x3ea2 <Get_name+0x7c>
	while(data != '='&& data !=0x0D)
	{

		//data = Keypad_getkey();
		 Bluetooth_RecieveData(&data);
    3e4c:	84 eb       	ldi	r24, 0xB4	; 180
    3e4e:	91 e0       	ldi	r25, 0x01	; 1
    3e50:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <Bluetooth_RecieveData>
		if(data != -1 && data != '=' && data !=0x0D)
    3e54:	80 91 b4 01 	lds	r24, 0x01B4
    3e58:	8d 33       	cpi	r24, 0x3D	; 61
    3e5a:	19 f1       	breq	.+70     	; 0x3ea2 <Get_name+0x7c>
    3e5c:	80 91 b4 01 	lds	r24, 0x01B4
    3e60:	8d 30       	cpi	r24, 0x0D	; 13
    3e62:	f9 f0       	breq	.+62     	; 0x3ea2 <Get_name+0x7c>
		{
			HLCD_SendData(data);
    3e64:	80 91 b4 01 	lds	r24, 0x01B4
    3e68:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_SendData>
			EEPROM_SendByte(data ,address);
    3e6c:	90 91 b4 01 	lds	r25, 0x01B4
    3e70:	80 91 8b 01 	lds	r24, 0x018B
    3e74:	28 2f       	mov	r18, r24
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	89 2f       	mov	r24, r25
    3e7a:	b9 01       	movw	r22, r18
    3e7c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <EEPROM_SendByte>
			NAME[index] = data ;
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	88 2f       	mov	r24, r24
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	20 91 b4 01 	lds	r18, 0x01B4
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	e0 56       	subi	r30, 0x60	; 96
    3e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e90:	20 83       	st	Z, r18
			address++ ;
    3e92:	80 91 8b 01 	lds	r24, 0x018B
    3e96:	8f 5f       	subi	r24, 0xFF	; 255
    3e98:	80 93 8b 01 	sts	0x018B, r24
			index++ ;
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ea0:	89 83       	std	Y+1, r24	; 0x01
{
	address = 0 ;
	byte = 0 ;
	PASSWORD = 0 ;
	u8 index=0 ;
	while(data != '='&& data !=0x0D)
    3ea2:	80 91 b4 01 	lds	r24, 0x01B4
    3ea6:	8d 33       	cpi	r24, 0x3D	; 61
    3ea8:	21 f0       	breq	.+8      	; 0x3eb2 <Get_name+0x8c>
    3eaa:	80 91 b4 01 	lds	r24, 0x01B4
    3eae:	8d 30       	cpi	r24, 0x0D	; 13
    3eb0:	69 f6       	brne	.-102    	; 0x3e4c <Get_name+0x26>
			NAME[index] = data ;
			address++ ;
			index++ ;
		}
	}
	NAME[index] = '\0' ;
    3eb2:	89 81       	ldd	r24, Y+1	; 0x01
    3eb4:	88 2f       	mov	r24, r24
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	fc 01       	movw	r30, r24
    3eba:	e0 56       	subi	r30, 0x60	; 96
    3ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebe:	10 82       	st	Z, r1
	EEPROM_SendByte(0xFF ,address);
    3ec0:	80 91 8b 01 	lds	r24, 0x018B
    3ec4:	28 2f       	mov	r18, r24
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	8f ef       	ldi	r24, 0xFF	; 255
    3eca:	b9 01       	movw	r22, r18
    3ecc:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <EEPROM_SendByte>
}
    3ed0:	0f 90       	pop	r0
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	08 95       	ret

00003ed8 <main>:
int main()
{
    3ed8:	0f 93       	push	r16
    3eda:	1f 93       	push	r17
    3edc:	df 93       	push	r29
    3ede:	cf 93       	push	r28
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	cc 58       	subi	r28, 0x8C	; 140
    3ee6:	d0 40       	sbci	r29, 0x00	; 0
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	f8 94       	cli
    3eec:	de bf       	out	0x3e, r29	; 62
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	cd bf       	out	0x3d, r28	; 61

	u8 count=3 ,flage = 0;
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	e9 58       	subi	r30, 0x89	; 137
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	83 e0       	ldi	r24, 0x03	; 3
    3efa:	80 83       	st	Z, r24
    3efc:	fe 01       	movw	r30, r28
    3efe:	ea 58       	subi	r30, 0x8A	; 138
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	10 82       	st	Z, r1
	u32 input_Pass =0;
    3f04:	fe 01       	movw	r30, r28
    3f06:	ee 58       	subi	r30, 0x8E	; 142
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	10 82       	st	Z, r1
    3f0c:	11 82       	std	Z+1, r1	; 0x01
    3f0e:	12 82       	std	Z+2, r1	; 0x02
    3f10:	13 82       	std	Z+3, r1	; 0x03
	u8 input_name[20];
	u8 index=0 ;
    3f12:	fe 01       	movw	r30, r28
    3f14:	ef 58       	subi	r30, 0x8F	; 143
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	10 82       	st	Z, r1

	HLCD_voidinit();
    3f1a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <HLCD_voidinit>
	//Keypad_init();
	Servo_Init();
    3f1e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Servo_Init>
	EEPROM_Init();
    3f22:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <EEPROM_Init>
	Bluetooth_Init();
    3f26:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <Bluetooth_Init>
	BUZZER_voidInit(BUZZER1);
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <BUZZER_voidInit>
	LED_voidInit(LED1);
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LED_voidInit>


	Servo_SetAngle(SERVO1 ,0);
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	0e 94 6d 15 	call	0x2ada	; 0x2ada <Servo_SetAngle>
	HLCD_GOTO_XY(1,1);
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	61 e0       	ldi	r22, 0x01	; 1
    3f42:	0e 94 a0 1b 	call	0x3740	; 0x3740 <HLCD_GOTO_XY>
	HLCD_PrintString(" Wellcome");
    3f46:	80 e6       	ldi	r24, 0x60	; 96
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e3 59       	subi	r30, 0x93	; 147
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	aa e7       	ldi	r26, 0x7A	; 122
    3f5a:	b4 e4       	ldi	r27, 0x44	; 68
    3f5c:	80 83       	st	Z, r24
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	a2 83       	std	Z+2, r26	; 0x02
    3f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f64:	8e 01       	movw	r16, r28
    3f66:	07 59       	subi	r16, 0x97	; 151
    3f68:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e3 59       	subi	r30, 0x93	; 147
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	60 81       	ld	r22, Z
    3f72:	71 81       	ldd	r23, Z+1	; 0x01
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	4a ef       	ldi	r20, 0xFA	; 250
    3f7e:	54 e4       	ldi	r21, 0x44	; 68
    3f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	f8 01       	movw	r30, r16
    3f8a:	80 83       	st	Z, r24
    3f8c:	91 83       	std	Z+1, r25	; 0x01
    3f8e:	a2 83       	std	Z+2, r26	; 0x02
    3f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f92:	fe 01       	movw	r30, r28
    3f94:	e7 59       	subi	r30, 0x97	; 151
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	60 81       	ld	r22, Z
    3f9a:	71 81       	ldd	r23, Z+1	; 0x01
    3f9c:	82 81       	ldd	r24, Z+2	; 0x02
    3f9e:	93 81       	ldd	r25, Z+3	; 0x03
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e8       	ldi	r20, 0x80	; 128
    3fa6:	5f e3       	ldi	r21, 0x3F	; 63
    3fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fac:	88 23       	and	r24, r24
    3fae:	44 f4       	brge	.+16     	; 0x3fc0 <main+0xe8>
		__ticks = 1;
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e9 59       	subi	r30, 0x99	; 153
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	91 83       	std	Z+1, r25	; 0x01
    3fbc:	80 83       	st	Z, r24
    3fbe:	64 c0       	rjmp	.+200    	; 0x4088 <main+0x1b0>
	else if (__tmp > 65535)
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e7 59       	subi	r30, 0x97	; 151
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	60 81       	ld	r22, Z
    3fc8:	71 81       	ldd	r23, Z+1	; 0x01
    3fca:	82 81       	ldd	r24, Z+2	; 0x02
    3fcc:	93 81       	ldd	r25, Z+3	; 0x03
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	3f ef       	ldi	r19, 0xFF	; 255
    3fd2:	4f e7       	ldi	r20, 0x7F	; 127
    3fd4:	57 e4       	ldi	r21, 0x47	; 71
    3fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fda:	18 16       	cp	r1, r24
    3fdc:	0c f0       	brlt	.+2      	; 0x3fe0 <main+0x108>
    3fde:	43 c0       	rjmp	.+134    	; 0x4066 <main+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	e3 59       	subi	r30, 0x93	; 147
    3fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe6:	60 81       	ld	r22, Z
    3fe8:	71 81       	ldd	r23, Z+1	; 0x01
    3fea:	82 81       	ldd	r24, Z+2	; 0x02
    3fec:	93 81       	ldd	r25, Z+3	; 0x03
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e2       	ldi	r20, 0x20	; 32
    3ff4:	51 e4       	ldi	r21, 0x41	; 65
    3ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	8e 01       	movw	r16, r28
    4000:	09 59       	subi	r16, 0x99	; 153
    4002:	1f 4f       	sbci	r17, 0xFF	; 255
    4004:	bc 01       	movw	r22, r24
    4006:	cd 01       	movw	r24, r26
    4008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	f8 01       	movw	r30, r16
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	80 83       	st	Z, r24
    4016:	1f c0       	rjmp	.+62     	; 0x4056 <main+0x17e>
    4018:	fe 01       	movw	r30, r28
    401a:	eb 59       	subi	r30, 0x9B	; 155
    401c:	ff 4f       	sbci	r31, 0xFF	; 255
    401e:	88 ec       	ldi	r24, 0xC8	; 200
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	91 83       	std	Z+1, r25	; 0x01
    4024:	80 83       	st	Z, r24
    4026:	fe 01       	movw	r30, r28
    4028:	eb 59       	subi	r30, 0x9B	; 155
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	80 81       	ld	r24, Z
    402e:	91 81       	ldd	r25, Z+1	; 0x01
    4030:	01 97       	sbiw	r24, 0x01	; 1
    4032:	f1 f7       	brne	.-4      	; 0x4030 <main+0x158>
    4034:	fe 01       	movw	r30, r28
    4036:	eb 59       	subi	r30, 0x9B	; 155
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	91 83       	std	Z+1, r25	; 0x01
    403c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    403e:	de 01       	movw	r26, r28
    4040:	a9 59       	subi	r26, 0x99	; 153
    4042:	bf 4f       	sbci	r27, 0xFF	; 255
    4044:	fe 01       	movw	r30, r28
    4046:	e9 59       	subi	r30, 0x99	; 153
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	80 81       	ld	r24, Z
    404c:	91 81       	ldd	r25, Z+1	; 0x01
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	11 96       	adiw	r26, 0x01	; 1
    4052:	9c 93       	st	X, r25
    4054:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4056:	fe 01       	movw	r30, r28
    4058:	e9 59       	subi	r30, 0x99	; 153
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	00 97       	sbiw	r24, 0x00	; 0
    4062:	d1 f6       	brne	.-76     	; 0x4018 <main+0x140>
    4064:	27 c0       	rjmp	.+78     	; 0x40b4 <main+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4066:	8e 01       	movw	r16, r28
    4068:	09 59       	subi	r16, 0x99	; 153
    406a:	1f 4f       	sbci	r17, 0xFF	; 255
    406c:	fe 01       	movw	r30, r28
    406e:	e7 59       	subi	r30, 0x97	; 151
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	60 81       	ld	r22, Z
    4074:	71 81       	ldd	r23, Z+1	; 0x01
    4076:	82 81       	ldd	r24, Z+2	; 0x02
    4078:	93 81       	ldd	r25, Z+3	; 0x03
    407a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	f8 01       	movw	r30, r16
    4084:	91 83       	std	Z+1, r25	; 0x01
    4086:	80 83       	st	Z, r24
    4088:	de 01       	movw	r26, r28
    408a:	ad 59       	subi	r26, 0x9D	; 157
    408c:	bf 4f       	sbci	r27, 0xFF	; 255
    408e:	fe 01       	movw	r30, r28
    4090:	e9 59       	subi	r30, 0x99	; 153
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	80 81       	ld	r24, Z
    4096:	91 81       	ldd	r25, Z+1	; 0x01
    4098:	8d 93       	st	X+, r24
    409a:	9c 93       	st	X, r25
    409c:	fe 01       	movw	r30, r28
    409e:	ed 59       	subi	r30, 0x9D	; 157
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	80 81       	ld	r24, Z
    40a4:	91 81       	ldd	r25, Z+1	; 0x01
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	f1 f7       	brne	.-4      	; 0x40a6 <main+0x1ce>
    40aa:	fe 01       	movw	r30, r28
    40ac:	ed 59       	subi	r30, 0x9D	; 157
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	91 83       	std	Z+1, r25	; 0x01
    40b2:	80 83       	st	Z, r24
	_delay_ms(1000);
	HLCD_voidCommand(LCD_Clear_Screen);
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>


	//EEPROM_SendByte(0xFF ,address);
	EEPROM_ReadByte(&byte , address);
    40ba:	80 91 8b 01 	lds	r24, 0x018B
    40be:	28 2f       	mov	r18, r24
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	8a e8       	ldi	r24, 0x8A	; 138
    40c4:	91 e0       	ldi	r25, 0x01	; 1
    40c6:	b9 01       	movw	r22, r18
    40c8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <EEPROM_ReadByte>
	if(byte == 0xFF)
    40cc:	80 91 8a 01 	lds	r24, 0x018A
    40d0:	8f 3f       	cpi	r24, 0xFF	; 255
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <main+0x1fe>
    40d4:	a8 c1       	rjmp	.+848    	; 0x4426 <main+0x54e>
	{


		HLCD_PrintString("for first time");
    40d6:	8a e6       	ldi	r24, 0x6A	; 106
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
    40de:	fe 01       	movw	r30, r28
    40e0:	e1 5a       	subi	r30, 0xA1	; 161
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	90 e8       	ldi	r25, 0x80	; 128
    40e8:	ab eb       	ldi	r26, 0xBB	; 187
    40ea:	b4 e4       	ldi	r27, 0x44	; 68
    40ec:	80 83       	st	Z, r24
    40ee:	91 83       	std	Z+1, r25	; 0x01
    40f0:	a2 83       	std	Z+2, r26	; 0x02
    40f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f4:	8e 01       	movw	r16, r28
    40f6:	05 5a       	subi	r16, 0xA5	; 165
    40f8:	1f 4f       	sbci	r17, 0xFF	; 255
    40fa:	fe 01       	movw	r30, r28
    40fc:	e1 5a       	subi	r30, 0xA1	; 161
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	60 81       	ld	r22, Z
    4102:	71 81       	ldd	r23, Z+1	; 0x01
    4104:	82 81       	ldd	r24, Z+2	; 0x02
    4106:	93 81       	ldd	r25, Z+3	; 0x03
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	4a ef       	ldi	r20, 0xFA	; 250
    410e:	54 e4       	ldi	r21, 0x44	; 68
    4110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	f8 01       	movw	r30, r16
    411a:	80 83       	st	Z, r24
    411c:	91 83       	std	Z+1, r25	; 0x01
    411e:	a2 83       	std	Z+2, r26	; 0x02
    4120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4122:	fe 01       	movw	r30, r28
    4124:	e5 5a       	subi	r30, 0xA5	; 165
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	60 81       	ld	r22, Z
    412a:	71 81       	ldd	r23, Z+1	; 0x01
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	93 81       	ldd	r25, Z+3	; 0x03
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	40 e8       	ldi	r20, 0x80	; 128
    4136:	5f e3       	ldi	r21, 0x3F	; 63
    4138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    413c:	88 23       	and	r24, r24
    413e:	44 f4       	brge	.+16     	; 0x4150 <main+0x278>
		__ticks = 1;
    4140:	fe 01       	movw	r30, r28
    4142:	e7 5a       	subi	r30, 0xA7	; 167
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	91 83       	std	Z+1, r25	; 0x01
    414c:	80 83       	st	Z, r24
    414e:	64 c0       	rjmp	.+200    	; 0x4218 <main+0x340>
	else if (__tmp > 65535)
    4150:	fe 01       	movw	r30, r28
    4152:	e5 5a       	subi	r30, 0xA5	; 165
    4154:	ff 4f       	sbci	r31, 0xFF	; 255
    4156:	60 81       	ld	r22, Z
    4158:	71 81       	ldd	r23, Z+1	; 0x01
    415a:	82 81       	ldd	r24, Z+2	; 0x02
    415c:	93 81       	ldd	r25, Z+3	; 0x03
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	3f ef       	ldi	r19, 0xFF	; 255
    4162:	4f e7       	ldi	r20, 0x7F	; 127
    4164:	57 e4       	ldi	r21, 0x47	; 71
    4166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    416a:	18 16       	cp	r1, r24
    416c:	0c f0       	brlt	.+2      	; 0x4170 <main+0x298>
    416e:	43 c0       	rjmp	.+134    	; 0x41f6 <main+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4170:	fe 01       	movw	r30, r28
    4172:	e1 5a       	subi	r30, 0xA1	; 161
    4174:	ff 4f       	sbci	r31, 0xFF	; 255
    4176:	60 81       	ld	r22, Z
    4178:	71 81       	ldd	r23, Z+1	; 0x01
    417a:	82 81       	ldd	r24, Z+2	; 0x02
    417c:	93 81       	ldd	r25, Z+3	; 0x03
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e2       	ldi	r20, 0x20	; 32
    4184:	51 e4       	ldi	r21, 0x41	; 65
    4186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	8e 01       	movw	r16, r28
    4190:	07 5a       	subi	r16, 0xA7	; 167
    4192:	1f 4f       	sbci	r17, 0xFF	; 255
    4194:	bc 01       	movw	r22, r24
    4196:	cd 01       	movw	r24, r26
    4198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	f8 01       	movw	r30, r16
    41a2:	91 83       	std	Z+1, r25	; 0x01
    41a4:	80 83       	st	Z, r24
    41a6:	1f c0       	rjmp	.+62     	; 0x41e6 <main+0x30e>
    41a8:	fe 01       	movw	r30, r28
    41aa:	e9 5a       	subi	r30, 0xA9	; 169
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	88 ec       	ldi	r24, 0xC8	; 200
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	91 83       	std	Z+1, r25	; 0x01
    41b4:	80 83       	st	Z, r24
    41b6:	fe 01       	movw	r30, r28
    41b8:	e9 5a       	subi	r30, 0xA9	; 169
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 81       	ld	r24, Z
    41be:	91 81       	ldd	r25, Z+1	; 0x01
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	f1 f7       	brne	.-4      	; 0x41c0 <main+0x2e8>
    41c4:	fe 01       	movw	r30, r28
    41c6:	e9 5a       	subi	r30, 0xA9	; 169
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	91 83       	std	Z+1, r25	; 0x01
    41cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ce:	de 01       	movw	r26, r28
    41d0:	a7 5a       	subi	r26, 0xA7	; 167
    41d2:	bf 4f       	sbci	r27, 0xFF	; 255
    41d4:	fe 01       	movw	r30, r28
    41d6:	e7 5a       	subi	r30, 0xA7	; 167
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	80 81       	ld	r24, Z
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	01 97       	sbiw	r24, 0x01	; 1
    41e0:	11 96       	adiw	r26, 0x01	; 1
    41e2:	9c 93       	st	X, r25
    41e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e6:	fe 01       	movw	r30, r28
    41e8:	e7 5a       	subi	r30, 0xA7	; 167
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	80 81       	ld	r24, Z
    41ee:	91 81       	ldd	r25, Z+1	; 0x01
    41f0:	00 97       	sbiw	r24, 0x00	; 0
    41f2:	d1 f6       	brne	.-76     	; 0x41a8 <main+0x2d0>
    41f4:	27 c0       	rjmp	.+78     	; 0x4244 <main+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f6:	8e 01       	movw	r16, r28
    41f8:	07 5a       	subi	r16, 0xA7	; 167
    41fa:	1f 4f       	sbci	r17, 0xFF	; 255
    41fc:	fe 01       	movw	r30, r28
    41fe:	e5 5a       	subi	r30, 0xA5	; 165
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	60 81       	ld	r22, Z
    4204:	71 81       	ldd	r23, Z+1	; 0x01
    4206:	82 81       	ldd	r24, Z+2	; 0x02
    4208:	93 81       	ldd	r25, Z+3	; 0x03
    420a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	f8 01       	movw	r30, r16
    4214:	91 83       	std	Z+1, r25	; 0x01
    4216:	80 83       	st	Z, r24
    4218:	de 01       	movw	r26, r28
    421a:	ab 5a       	subi	r26, 0xAB	; 171
    421c:	bf 4f       	sbci	r27, 0xFF	; 255
    421e:	fe 01       	movw	r30, r28
    4220:	e7 5a       	subi	r30, 0xA7	; 167
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	80 81       	ld	r24, Z
    4226:	91 81       	ldd	r25, Z+1	; 0x01
    4228:	8d 93       	st	X+, r24
    422a:	9c 93       	st	X, r25
    422c:	fe 01       	movw	r30, r28
    422e:	eb 5a       	subi	r30, 0xAB	; 171
    4230:	ff 4f       	sbci	r31, 0xFF	; 255
    4232:	80 81       	ld	r24, Z
    4234:	91 81       	ldd	r25, Z+1	; 0x01
    4236:	01 97       	sbiw	r24, 0x01	; 1
    4238:	f1 f7       	brne	.-4      	; 0x4236 <main+0x35e>
    423a:	fe 01       	movw	r30, r28
    423c:	eb 5a       	subi	r30, 0xAB	; 171
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	91 83       	std	Z+1, r25	; 0x01
    4242:	80 83       	st	Z, r24
		_delay_ms(1500);
		HLCD_voidCommand(LCD_Clear_Screen);
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
		HLCD_PrintString("Enter name");
    424a:	89 e7       	ldi	r24, 0x79	; 121
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
		HLCD_GOTO_XY(2,1);
    4252:	82 e0       	ldi	r24, 0x02	; 2
    4254:	61 e0       	ldi	r22, 0x01	; 1
    4256:	0e 94 a0 1b 	call	0x3740	; 0x3740 <HLCD_GOTO_XY>
		Get_name();
    425a:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <Get_name>
		HLCD_voidCommand(LCD_Clear_Screen);
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
    4264:	fe 01       	movw	r30, r28
    4266:	ef 5a       	subi	r30, 0xAF	; 175
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	a8 e4       	ldi	r26, 0x48	; 72
    4270:	b2 e4       	ldi	r27, 0x42	; 66
    4272:	80 83       	st	Z, r24
    4274:	91 83       	std	Z+1, r25	; 0x01
    4276:	a2 83       	std	Z+2, r26	; 0x02
    4278:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    427a:	8e 01       	movw	r16, r28
    427c:	03 5b       	subi	r16, 0xB3	; 179
    427e:	1f 4f       	sbci	r17, 0xFF	; 255
    4280:	fe 01       	movw	r30, r28
    4282:	ef 5a       	subi	r30, 0xAF	; 175
    4284:	ff 4f       	sbci	r31, 0xFF	; 255
    4286:	60 81       	ld	r22, Z
    4288:	71 81       	ldd	r23, Z+1	; 0x01
    428a:	82 81       	ldd	r24, Z+2	; 0x02
    428c:	93 81       	ldd	r25, Z+3	; 0x03
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	4a ef       	ldi	r20, 0xFA	; 250
    4294:	54 e4       	ldi	r21, 0x44	; 68
    4296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429a:	dc 01       	movw	r26, r24
    429c:	cb 01       	movw	r24, r22
    429e:	f8 01       	movw	r30, r16
    42a0:	80 83       	st	Z, r24
    42a2:	91 83       	std	Z+1, r25	; 0x01
    42a4:	a2 83       	std	Z+2, r26	; 0x02
    42a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42a8:	fe 01       	movw	r30, r28
    42aa:	e3 5b       	subi	r30, 0xB3	; 179
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	60 81       	ld	r22, Z
    42b0:	71 81       	ldd	r23, Z+1	; 0x01
    42b2:	82 81       	ldd	r24, Z+2	; 0x02
    42b4:	93 81       	ldd	r25, Z+3	; 0x03
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	40 e8       	ldi	r20, 0x80	; 128
    42bc:	5f e3       	ldi	r21, 0x3F	; 63
    42be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42c2:	88 23       	and	r24, r24
    42c4:	44 f4       	brge	.+16     	; 0x42d6 <main+0x3fe>
		__ticks = 1;
    42c6:	fe 01       	movw	r30, r28
    42c8:	e5 5b       	subi	r30, 0xB5	; 181
    42ca:	ff 4f       	sbci	r31, 0xFF	; 255
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	91 83       	std	Z+1, r25	; 0x01
    42d2:	80 83       	st	Z, r24
    42d4:	64 c0       	rjmp	.+200    	; 0x439e <main+0x4c6>
	else if (__tmp > 65535)
    42d6:	fe 01       	movw	r30, r28
    42d8:	e3 5b       	subi	r30, 0xB3	; 179
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	60 81       	ld	r22, Z
    42de:	71 81       	ldd	r23, Z+1	; 0x01
    42e0:	82 81       	ldd	r24, Z+2	; 0x02
    42e2:	93 81       	ldd	r25, Z+3	; 0x03
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	3f ef       	ldi	r19, 0xFF	; 255
    42e8:	4f e7       	ldi	r20, 0x7F	; 127
    42ea:	57 e4       	ldi	r21, 0x47	; 71
    42ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42f0:	18 16       	cp	r1, r24
    42f2:	0c f0       	brlt	.+2      	; 0x42f6 <main+0x41e>
    42f4:	43 c0       	rjmp	.+134    	; 0x437c <main+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f6:	fe 01       	movw	r30, r28
    42f8:	ef 5a       	subi	r30, 0xAF	; 175
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e2       	ldi	r20, 0x20	; 32
    430a:	51 e4       	ldi	r21, 0x41	; 65
    430c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	8e 01       	movw	r16, r28
    4316:	05 5b       	subi	r16, 0xB5	; 181
    4318:	1f 4f       	sbci	r17, 0xFF	; 255
    431a:	bc 01       	movw	r22, r24
    431c:	cd 01       	movw	r24, r26
    431e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	f8 01       	movw	r30, r16
    4328:	91 83       	std	Z+1, r25	; 0x01
    432a:	80 83       	st	Z, r24
    432c:	1f c0       	rjmp	.+62     	; 0x436c <main+0x494>
    432e:	fe 01       	movw	r30, r28
    4330:	e7 5b       	subi	r30, 0xB7	; 183
    4332:	ff 4f       	sbci	r31, 0xFF	; 255
    4334:	88 ec       	ldi	r24, 0xC8	; 200
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	91 83       	std	Z+1, r25	; 0x01
    433a:	80 83       	st	Z, r24
    433c:	fe 01       	movw	r30, r28
    433e:	e7 5b       	subi	r30, 0xB7	; 183
    4340:	ff 4f       	sbci	r31, 0xFF	; 255
    4342:	80 81       	ld	r24, Z
    4344:	91 81       	ldd	r25, Z+1	; 0x01
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	f1 f7       	brne	.-4      	; 0x4346 <main+0x46e>
    434a:	fe 01       	movw	r30, r28
    434c:	e7 5b       	subi	r30, 0xB7	; 183
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	91 83       	std	Z+1, r25	; 0x01
    4352:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4354:	de 01       	movw	r26, r28
    4356:	a5 5b       	subi	r26, 0xB5	; 181
    4358:	bf 4f       	sbci	r27, 0xFF	; 255
    435a:	fe 01       	movw	r30, r28
    435c:	e5 5b       	subi	r30, 0xB5	; 181
    435e:	ff 4f       	sbci	r31, 0xFF	; 255
    4360:	80 81       	ld	r24, Z
    4362:	91 81       	ldd	r25, Z+1	; 0x01
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	11 96       	adiw	r26, 0x01	; 1
    4368:	9c 93       	st	X, r25
    436a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    436c:	fe 01       	movw	r30, r28
    436e:	e5 5b       	subi	r30, 0xB5	; 181
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	00 97       	sbiw	r24, 0x00	; 0
    4378:	d1 f6       	brne	.-76     	; 0x432e <main+0x456>
    437a:	27 c0       	rjmp	.+78     	; 0x43ca <main+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    437c:	8e 01       	movw	r16, r28
    437e:	05 5b       	subi	r16, 0xB5	; 181
    4380:	1f 4f       	sbci	r17, 0xFF	; 255
    4382:	fe 01       	movw	r30, r28
    4384:	e3 5b       	subi	r30, 0xB3	; 179
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	60 81       	ld	r22, Z
    438a:	71 81       	ldd	r23, Z+1	; 0x01
    438c:	82 81       	ldd	r24, Z+2	; 0x02
    438e:	93 81       	ldd	r25, Z+3	; 0x03
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	f8 01       	movw	r30, r16
    439a:	91 83       	std	Z+1, r25	; 0x01
    439c:	80 83       	st	Z, r24
    439e:	de 01       	movw	r26, r28
    43a0:	a9 5b       	subi	r26, 0xB9	; 185
    43a2:	bf 4f       	sbci	r27, 0xFF	; 255
    43a4:	fe 01       	movw	r30, r28
    43a6:	e5 5b       	subi	r30, 0xB5	; 181
    43a8:	ff 4f       	sbci	r31, 0xFF	; 255
    43aa:	80 81       	ld	r24, Z
    43ac:	91 81       	ldd	r25, Z+1	; 0x01
    43ae:	8d 93       	st	X+, r24
    43b0:	9c 93       	st	X, r25
    43b2:	fe 01       	movw	r30, r28
    43b4:	e9 5b       	subi	r30, 0xB9	; 185
    43b6:	ff 4f       	sbci	r31, 0xFF	; 255
    43b8:	80 81       	ld	r24, Z
    43ba:	91 81       	ldd	r25, Z+1	; 0x01
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	f1 f7       	brne	.-4      	; 0x43bc <main+0x4e4>
    43c0:	fe 01       	movw	r30, r28
    43c2:	e9 5b       	subi	r30, 0xB9	; 185
    43c4:	ff 4f       	sbci	r31, 0xFF	; 255
    43c6:	91 83       	std	Z+1, r25	; 0x01
    43c8:	80 83       	st	Z, r24
		_delay_ms(50);
		HLCD_PrintString("Enter password");
    43ca:	84 e8       	ldi	r24, 0x84	; 132
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
		HLCD_GOTO_XY(2,1);
    43d2:	82 e0       	ldi	r24, 0x02	; 2
    43d4:	61 e0       	ldi	r22, 0x01	; 1
    43d6:	0e 94 a0 1b 	call	0x3740	; 0x3740 <HLCD_GOTO_XY>
		Get_Password();
    43da:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <Get_Password>
    43de:	97 c0       	rjmp	.+302    	; 0x450e <main+0x636>
	}
	else
	{
		while(byte != 0xFF)
		{
			NAME[index] = byte ;
    43e0:	fe 01       	movw	r30, r28
    43e2:	ef 58       	subi	r30, 0x8F	; 143
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	80 81       	ld	r24, Z
    43e8:	88 2f       	mov	r24, r24
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	20 91 8a 01 	lds	r18, 0x018A
    43f0:	fc 01       	movw	r30, r24
    43f2:	e0 56       	subi	r30, 0x60	; 96
    43f4:	fe 4f       	sbci	r31, 0xFE	; 254
    43f6:	20 83       	st	Z, r18
			address++ ;
    43f8:	80 91 8b 01 	lds	r24, 0x018B
    43fc:	8f 5f       	subi	r24, 0xFF	; 255
    43fe:	80 93 8b 01 	sts	0x018B, r24
			EEPROM_ReadByte(&byte ,address);
    4402:	80 91 8b 01 	lds	r24, 0x018B
    4406:	28 2f       	mov	r18, r24
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	8a e8       	ldi	r24, 0x8A	; 138
    440c:	91 e0       	ldi	r25, 0x01	; 1
    440e:	b9 01       	movw	r22, r18
    4410:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <EEPROM_ReadByte>
			index++ ;
    4414:	de 01       	movw	r26, r28
    4416:	af 58       	subi	r26, 0x8F	; 143
    4418:	bf 4f       	sbci	r27, 0xFF	; 255
    441a:	fe 01       	movw	r30, r28
    441c:	ef 58       	subi	r30, 0x8F	; 143
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	80 81       	ld	r24, Z
    4422:	8f 5f       	subi	r24, 0xFF	; 255
    4424:	8c 93       	st	X, r24
		HLCD_GOTO_XY(2,1);
		Get_Password();
	}
	else
	{
		while(byte != 0xFF)
    4426:	80 91 8a 01 	lds	r24, 0x018A
    442a:	8f 3f       	cpi	r24, 0xFF	; 255
    442c:	c9 f6       	brne	.-78     	; 0x43e0 <main+0x508>
			address++ ;
			EEPROM_ReadByte(&byte ,address);
			index++ ;
		}

		address++ ;
    442e:	80 91 8b 01 	lds	r24, 0x018B
    4432:	8f 5f       	subi	r24, 0xFF	; 255
    4434:	80 93 8b 01 	sts	0x018B, r24
		EEPROM_ReadByte(&byte ,address);
    4438:	80 91 8b 01 	lds	r24, 0x018B
    443c:	28 2f       	mov	r18, r24
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	8a e8       	ldi	r24, 0x8A	; 138
    4442:	91 e0       	ldi	r25, 0x01	; 1
    4444:	b9 01       	movw	r22, r18
    4446:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <EEPROM_ReadByte>
    444a:	42 c0       	rjmp	.+132    	; 0x44d0 <main+0x5f8>
		while(byte != 0xFF)
		{
			PASSWORD+=byte ;
    444c:	80 91 8a 01 	lds	r24, 0x018A
    4450:	28 2f       	mov	r18, r24
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e0       	ldi	r20, 0x00	; 0
    4456:	50 e0       	ldi	r21, 0x00	; 0
    4458:	80 91 86 01 	lds	r24, 0x0186
    445c:	90 91 87 01 	lds	r25, 0x0187
    4460:	a0 91 88 01 	lds	r26, 0x0188
    4464:	b0 91 89 01 	lds	r27, 0x0189
    4468:	82 0f       	add	r24, r18
    446a:	93 1f       	adc	r25, r19
    446c:	a4 1f       	adc	r26, r20
    446e:	b5 1f       	adc	r27, r21
    4470:	80 93 86 01 	sts	0x0186, r24
    4474:	90 93 87 01 	sts	0x0187, r25
    4478:	a0 93 88 01 	sts	0x0188, r26
    447c:	b0 93 89 01 	sts	0x0189, r27
			PASSWORD*=10;
    4480:	80 91 86 01 	lds	r24, 0x0186
    4484:	90 91 87 01 	lds	r25, 0x0187
    4488:	a0 91 88 01 	lds	r26, 0x0188
    448c:	b0 91 89 01 	lds	r27, 0x0189
    4490:	2a e0       	ldi	r18, 0x0A	; 10
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	50 e0       	ldi	r21, 0x00	; 0
    4498:	bc 01       	movw	r22, r24
    449a:	cd 01       	movw	r24, r26
    449c:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <__mulsi3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	80 93 86 01 	sts	0x0186, r24
    44a8:	90 93 87 01 	sts	0x0187, r25
    44ac:	a0 93 88 01 	sts	0x0188, r26
    44b0:	b0 93 89 01 	sts	0x0189, r27
			address++ ;
    44b4:	80 91 8b 01 	lds	r24, 0x018B
    44b8:	8f 5f       	subi	r24, 0xFF	; 255
    44ba:	80 93 8b 01 	sts	0x018B, r24
			EEPROM_ReadByte(&byte ,address);
    44be:	80 91 8b 01 	lds	r24, 0x018B
    44c2:	28 2f       	mov	r18, r24
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	8a e8       	ldi	r24, 0x8A	; 138
    44c8:	91 e0       	ldi	r25, 0x01	; 1
    44ca:	b9 01       	movw	r22, r18
    44cc:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <EEPROM_ReadByte>
			index++ ;
		}

		address++ ;
		EEPROM_ReadByte(&byte ,address);
		while(byte != 0xFF)
    44d0:	80 91 8a 01 	lds	r24, 0x018A
    44d4:	8f 3f       	cpi	r24, 0xFF	; 255
    44d6:	09 f0       	breq	.+2      	; 0x44da <main+0x602>
    44d8:	b9 cf       	rjmp	.-142    	; 0x444c <main+0x574>
			PASSWORD+=byte ;
			PASSWORD*=10;
			address++ ;
			EEPROM_ReadByte(&byte ,address);
		}
		PASSWORD/=10 ;
    44da:	80 91 86 01 	lds	r24, 0x0186
    44de:	90 91 87 01 	lds	r25, 0x0187
    44e2:	a0 91 88 01 	lds	r26, 0x0188
    44e6:	b0 91 89 01 	lds	r27, 0x0189
    44ea:	2a e0       	ldi	r18, 0x0A	; 10
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	40 e0       	ldi	r20, 0x00	; 0
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	bc 01       	movw	r22, r24
    44f4:	cd 01       	movw	r24, r26
    44f6:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
    44fa:	da 01       	movw	r26, r20
    44fc:	c9 01       	movw	r24, r18
    44fe:	80 93 86 01 	sts	0x0186, r24
    4502:	90 93 87 01 	sts	0x0187, r25
    4506:	a0 93 88 01 	sts	0x0188, r26
    450a:	b0 93 89 01 	sts	0x0189, r27
	}

	while(1)
	{
		data = 0 ;
    450e:	10 92 b4 01 	sts	0x01B4, r1
		input_Pass = 0 ;
    4512:	fe 01       	movw	r30, r28
    4514:	ee 58       	subi	r30, 0x8E	; 142
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	10 82       	st	Z, r1
    451a:	11 82       	std	Z+1, r1	; 0x01
    451c:	12 82       	std	Z+2, r1	; 0x02
    451e:	13 82       	std	Z+3, r1	; 0x03
		flage = 0;
    4520:	fe 01       	movw	r30, r28
    4522:	ea 58       	subi	r30, 0x8A	; 138
    4524:	ff 4f       	sbci	r31, 0xFF	; 255
    4526:	10 82       	st	Z, r1
		count= 3 ;
    4528:	fe 01       	movw	r30, r28
    452a:	e9 58       	subi	r30, 0x89	; 137
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	83 e0       	ldi	r24, 0x03	; 3
    4530:	80 83       	st	Z, r24
		index =  0 ;
    4532:	fe 01       	movw	r30, r28
    4534:	ef 58       	subi	r30, 0x8F	; 143
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	10 82       	st	Z, r1
		HLCD_voidCommand(LCD_Clear_Screen);
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
		HLCD_PrintString(" Enter User name");
    4540:	83 e9       	ldi	r24, 0x93	; 147
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
		HLCD_GOTO_XY(2,1);
    4548:	82 e0       	ldi	r24, 0x02	; 2
    454a:	61 e0       	ldi	r22, 0x01	; 1
    454c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <HLCD_GOTO_XY>
    4550:	28 c0       	rjmp	.+80     	; 0x45a2 <main+0x6ca>
		while(data != '=' && data !=0x0D  )
		{
			//data = Keypad_getkey();
			 Bluetooth_RecieveData(&data);
    4552:	84 eb       	ldi	r24, 0xB4	; 180
    4554:	91 e0       	ldi	r25, 0x01	; 1
    4556:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <Bluetooth_RecieveData>
			if(data != -1 && data != '='&&data !=0x0D )
    455a:	80 91 b4 01 	lds	r24, 0x01B4
    455e:	8d 33       	cpi	r24, 0x3D	; 61
    4560:	01 f1       	breq	.+64     	; 0x45a2 <main+0x6ca>
    4562:	80 91 b4 01 	lds	r24, 0x01B4
    4566:	8d 30       	cpi	r24, 0x0D	; 13
    4568:	e1 f0       	breq	.+56     	; 0x45a2 <main+0x6ca>
			{
				HLCD_SendData(data);
    456a:	80 91 b4 01 	lds	r24, 0x01B4
    456e:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_SendData>
				input_name[index] = data ;
    4572:	fe 01       	movw	r30, r28
    4574:	ef 58       	subi	r30, 0x8F	; 143
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	80 81       	ld	r24, Z
    457a:	28 2f       	mov	r18, r24
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	40 91 b4 01 	lds	r20, 0x01B4
    4582:	ce 01       	movw	r24, r28
    4584:	88 58       	subi	r24, 0x88	; 136
    4586:	9f 4f       	sbci	r25, 0xFF	; 255
    4588:	fc 01       	movw	r30, r24
    458a:	e2 0f       	add	r30, r18
    458c:	f3 1f       	adc	r31, r19
    458e:	40 83       	st	Z, r20
				index++ ;
    4590:	de 01       	movw	r26, r28
    4592:	af 58       	subi	r26, 0x8F	; 143
    4594:	bf 4f       	sbci	r27, 0xFF	; 255
    4596:	fe 01       	movw	r30, r28
    4598:	ef 58       	subi	r30, 0x8F	; 143
    459a:	ff 4f       	sbci	r31, 0xFF	; 255
    459c:	80 81       	ld	r24, Z
    459e:	8f 5f       	subi	r24, 0xFF	; 255
    45a0:	8c 93       	st	X, r24
		count= 3 ;
		index =  0 ;
		HLCD_voidCommand(LCD_Clear_Screen);
		HLCD_PrintString(" Enter User name");
		HLCD_GOTO_XY(2,1);
		while(data != '=' && data !=0x0D  )
    45a2:	80 91 b4 01 	lds	r24, 0x01B4
    45a6:	8d 33       	cpi	r24, 0x3D	; 61
    45a8:	21 f0       	breq	.+8      	; 0x45b2 <main+0x6da>
    45aa:	80 91 b4 01 	lds	r24, 0x01B4
    45ae:	8d 30       	cpi	r24, 0x0D	; 13
    45b0:	81 f6       	brne	.-96     	; 0x4552 <main+0x67a>
				HLCD_SendData(data);
				input_name[index] = data ;
				index++ ;
			}
		}
		input_name[index] = '\0' ;
    45b2:	fe 01       	movw	r30, r28
    45b4:	ef 58       	subi	r30, 0x8F	; 143
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	80 81       	ld	r24, Z
    45ba:	28 2f       	mov	r18, r24
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	ce 01       	movw	r24, r28
    45c0:	88 58       	subi	r24, 0x88	; 136
    45c2:	9f 4f       	sbci	r25, 0xFF	; 255
    45c4:	fc 01       	movw	r30, r24
    45c6:	e2 0f       	add	r30, r18
    45c8:	f3 1f       	adc	r31, r19
    45ca:	10 82       	st	Z, r1

		if(!strcmp(input_name ,NAME))
    45cc:	ce 01       	movw	r24, r28
    45ce:	88 58       	subi	r24, 0x88	; 136
    45d0:	9f 4f       	sbci	r25, 0xFF	; 255
    45d2:	20 ea       	ldi	r18, 0xA0	; 160
    45d4:	31 e0       	ldi	r19, 0x01	; 1
    45d6:	b9 01       	movw	r22, r18
    45d8:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <strcmp>
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	09 f0       	breq	.+2      	; 0x45e2 <main+0x70a>
    45e0:	15 c3       	rjmp	.+1578   	; 0x4c0c <main+0xd34>
		{
			HLCD_voidCommand(LCD_Clear_Screen);
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
			HLCD_PrintString(" Enter Password");
    45e8:	84 ea       	ldi	r24, 0xA4	; 164
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
    45f0:	a6 c1       	rjmp	.+844    	; 0x493e <main+0xa66>
			while(count--)
			{
				data = 0 ;
    45f2:	10 92 b4 01 	sts	0x01B4, r1
				HLCD_GOTO_XY(2,1);
    45f6:	82 e0       	ldi	r24, 0x02	; 2
    45f8:	61 e0       	ldi	r22, 0x01	; 1
    45fa:	0e 94 a0 1b 	call	0x3740	; 0x3740 <HLCD_GOTO_XY>
    45fe:	45 c0       	rjmp	.+138    	; 0x468a <main+0x7b2>
				while(data != '=' && data !=0x0D  )
				{
					//data = Keypad_getkey();
					  Bluetooth_RecieveData(&data);
    4600:	84 eb       	ldi	r24, 0xB4	; 180
    4602:	91 e0       	ldi	r25, 0x01	; 1
    4604:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <Bluetooth_RecieveData>
					if(data != -1 && data != '='&&data !=0x0D )
    4608:	80 91 b4 01 	lds	r24, 0x01B4
    460c:	8d 33       	cpi	r24, 0x3D	; 61
    460e:	e9 f1       	breq	.+122    	; 0x468a <main+0x7b2>
    4610:	80 91 b4 01 	lds	r24, 0x01B4
    4614:	8d 30       	cpi	r24, 0x0D	; 13
    4616:	c9 f1       	breq	.+114    	; 0x468a <main+0x7b2>
					{
						HLCD_SendData('*');
    4618:	8a e2       	ldi	r24, 0x2A	; 42
    461a:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_SendData>
						input_Pass += data-48 ;
    461e:	80 91 b4 01 	lds	r24, 0x01B4
    4622:	88 2f       	mov	r24, r24
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	c0 97       	sbiw	r24, 0x30	; 48
    4628:	9c 01       	movw	r18, r24
    462a:	44 27       	eor	r20, r20
    462c:	37 fd       	sbrc	r19, 7
    462e:	40 95       	com	r20
    4630:	54 2f       	mov	r21, r20
    4632:	be 01       	movw	r22, r28
    4634:	6e 58       	subi	r22, 0x8E	; 142
    4636:	7f 4f       	sbci	r23, 0xFF	; 255
    4638:	fe 01       	movw	r30, r28
    463a:	ee 58       	subi	r30, 0x8E	; 142
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	80 81       	ld	r24, Z
    4640:	91 81       	ldd	r25, Z+1	; 0x01
    4642:	a2 81       	ldd	r26, Z+2	; 0x02
    4644:	b3 81       	ldd	r27, Z+3	; 0x03
    4646:	82 0f       	add	r24, r18
    4648:	93 1f       	adc	r25, r19
    464a:	a4 1f       	adc	r26, r20
    464c:	b5 1f       	adc	r27, r21
    464e:	fb 01       	movw	r30, r22
    4650:	80 83       	st	Z, r24
    4652:	91 83       	std	Z+1, r25	; 0x01
    4654:	a2 83       	std	Z+2, r26	; 0x02
    4656:	b3 83       	std	Z+3, r27	; 0x03
						input_Pass*=10 ;
    4658:	8e 01       	movw	r16, r28
    465a:	0e 58       	subi	r16, 0x8E	; 142
    465c:	1f 4f       	sbci	r17, 0xFF	; 255
    465e:	fe 01       	movw	r30, r28
    4660:	ee 58       	subi	r30, 0x8E	; 142
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	80 81       	ld	r24, Z
    4666:	91 81       	ldd	r25, Z+1	; 0x01
    4668:	a2 81       	ldd	r26, Z+2	; 0x02
    466a:	b3 81       	ldd	r27, Z+3	; 0x03
    466c:	2a e0       	ldi	r18, 0x0A	; 10
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	40 e0       	ldi	r20, 0x00	; 0
    4672:	50 e0       	ldi	r21, 0x00	; 0
    4674:	bc 01       	movw	r22, r24
    4676:	cd 01       	movw	r24, r26
    4678:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <__mulsi3>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	f8 01       	movw	r30, r16
    4682:	80 83       	st	Z, r24
    4684:	91 83       	std	Z+1, r25	; 0x01
    4686:	a2 83       	std	Z+2, r26	; 0x02
    4688:	b3 83       	std	Z+3, r27	; 0x03
			HLCD_PrintString(" Enter Password");
			while(count--)
			{
				data = 0 ;
				HLCD_GOTO_XY(2,1);
				while(data != '=' && data !=0x0D  )
    468a:	80 91 b4 01 	lds	r24, 0x01B4
    468e:	8d 33       	cpi	r24, 0x3D	; 61
    4690:	29 f0       	breq	.+10     	; 0x469c <main+0x7c4>
    4692:	80 91 b4 01 	lds	r24, 0x01B4
    4696:	8d 30       	cpi	r24, 0x0D	; 13
    4698:	09 f0       	breq	.+2      	; 0x469c <main+0x7c4>
    469a:	b2 cf       	rjmp	.-156    	; 0x4600 <main+0x728>
						HLCD_SendData('*');
						input_Pass += data-48 ;
						input_Pass*=10 ;
					}
				}
				input_Pass/=10 ;
    469c:	8e 01       	movw	r16, r28
    469e:	0e 58       	subi	r16, 0x8E	; 142
    46a0:	1f 4f       	sbci	r17, 0xFF	; 255
    46a2:	fe 01       	movw	r30, r28
    46a4:	ee 58       	subi	r30, 0x8E	; 142
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	80 81       	ld	r24, Z
    46aa:	91 81       	ldd	r25, Z+1	; 0x01
    46ac:	a2 81       	ldd	r26, Z+2	; 0x02
    46ae:	b3 81       	ldd	r27, Z+3	; 0x03
    46b0:	2a e0       	ldi	r18, 0x0A	; 10
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	40 e0       	ldi	r20, 0x00	; 0
    46b6:	50 e0       	ldi	r21, 0x00	; 0
    46b8:	bc 01       	movw	r22, r24
    46ba:	cd 01       	movw	r24, r26
    46bc:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__udivmodsi4>
    46c0:	da 01       	movw	r26, r20
    46c2:	c9 01       	movw	r24, r18
    46c4:	f8 01       	movw	r30, r16
    46c6:	80 83       	st	Z, r24
    46c8:	91 83       	std	Z+1, r25	; 0x01
    46ca:	a2 83       	std	Z+2, r26	; 0x02
    46cc:	b3 83       	std	Z+3, r27	; 0x03
				HLCD_voidCommand(LCD_Clear_Screen);
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
				if(input_Pass == PASSWORD)
    46d4:	20 91 86 01 	lds	r18, 0x0186
    46d8:	30 91 87 01 	lds	r19, 0x0187
    46dc:	40 91 88 01 	lds	r20, 0x0188
    46e0:	50 91 89 01 	lds	r21, 0x0189
    46e4:	fe 01       	movw	r30, r28
    46e6:	ee 58       	subi	r30, 0x8E	; 142
    46e8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ea:	80 81       	ld	r24, Z
    46ec:	91 81       	ldd	r25, Z+1	; 0x01
    46ee:	a2 81       	ldd	r26, Z+2	; 0x02
    46f0:	b3 81       	ldd	r27, Z+3	; 0x03
    46f2:	82 17       	cp	r24, r18
    46f4:	93 07       	cpc	r25, r19
    46f6:	a4 07       	cpc	r26, r20
    46f8:	b5 07       	cpc	r27, r21
    46fa:	09 f0       	breq	.+2      	; 0x46fe <main+0x826>
    46fc:	93 c0       	rjmp	.+294    	; 0x4824 <main+0x94c>
				{
					flage  = 1 ;
    46fe:	fe 01       	movw	r30, r28
    4700:	ea 58       	subi	r30, 0x8A	; 138
    4702:	ff 4f       	sbci	r31, 0xFF	; 255
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	80 83       	st	Z, r24
					HLCD_PrintString(" Correct PASS");
    4708:	84 eb       	ldi	r24, 0xB4	; 180
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
					Servo_SetAngle(SERVO1 ,90);
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	6a e5       	ldi	r22, 0x5A	; 90
    4714:	0e 94 6d 15 	call	0x2ada	; 0x2ada <Servo_SetAngle>
    4718:	fe 01       	movw	r30, r28
    471a:	ed 5b       	subi	r30, 0xBD	; 189
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	80 e0       	ldi	r24, 0x00	; 0
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	aa e7       	ldi	r26, 0x7A	; 122
    4724:	b4 e4       	ldi	r27, 0x44	; 68
    4726:	80 83       	st	Z, r24
    4728:	91 83       	std	Z+1, r25	; 0x01
    472a:	a2 83       	std	Z+2, r26	; 0x02
    472c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    472e:	8e 01       	movw	r16, r28
    4730:	01 5c       	subi	r16, 0xC1	; 193
    4732:	1f 4f       	sbci	r17, 0xFF	; 255
    4734:	fe 01       	movw	r30, r28
    4736:	ed 5b       	subi	r30, 0xBD	; 189
    4738:	ff 4f       	sbci	r31, 0xFF	; 255
    473a:	60 81       	ld	r22, Z
    473c:	71 81       	ldd	r23, Z+1	; 0x01
    473e:	82 81       	ldd	r24, Z+2	; 0x02
    4740:	93 81       	ldd	r25, Z+3	; 0x03
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	4a ef       	ldi	r20, 0xFA	; 250
    4748:	54 e4       	ldi	r21, 0x44	; 68
    474a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	f8 01       	movw	r30, r16
    4754:	80 83       	st	Z, r24
    4756:	91 83       	std	Z+1, r25	; 0x01
    4758:	a2 83       	std	Z+2, r26	; 0x02
    475a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    475c:	fe 01       	movw	r30, r28
    475e:	ff 96       	adiw	r30, 0x3f	; 63
    4760:	60 81       	ld	r22, Z
    4762:	71 81       	ldd	r23, Z+1	; 0x01
    4764:	82 81       	ldd	r24, Z+2	; 0x02
    4766:	93 81       	ldd	r25, Z+3	; 0x03
    4768:	20 e0       	ldi	r18, 0x00	; 0
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	40 e8       	ldi	r20, 0x80	; 128
    476e:	5f e3       	ldi	r21, 0x3F	; 63
    4770:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4774:	88 23       	and	r24, r24
    4776:	2c f4       	brge	.+10     	; 0x4782 <main+0x8aa>
		__ticks = 1;
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	9e af       	std	Y+62, r25	; 0x3e
    477e:	8d af       	std	Y+61, r24	; 0x3d
    4780:	46 c0       	rjmp	.+140    	; 0x480e <main+0x936>
	else if (__tmp > 65535)
    4782:	fe 01       	movw	r30, r28
    4784:	ff 96       	adiw	r30, 0x3f	; 63
    4786:	60 81       	ld	r22, Z
    4788:	71 81       	ldd	r23, Z+1	; 0x01
    478a:	82 81       	ldd	r24, Z+2	; 0x02
    478c:	93 81       	ldd	r25, Z+3	; 0x03
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	3f ef       	ldi	r19, 0xFF	; 255
    4792:	4f e7       	ldi	r20, 0x7F	; 127
    4794:	57 e4       	ldi	r21, 0x47	; 71
    4796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    479a:	18 16       	cp	r1, r24
    479c:	64 f5       	brge	.+88     	; 0x47f6 <main+0x91e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    479e:	fe 01       	movw	r30, r28
    47a0:	ed 5b       	subi	r30, 0xBD	; 189
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	60 81       	ld	r22, Z
    47a6:	71 81       	ldd	r23, Z+1	; 0x01
    47a8:	82 81       	ldd	r24, Z+2	; 0x02
    47aa:	93 81       	ldd	r25, Z+3	; 0x03
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	40 e2       	ldi	r20, 0x20	; 32
    47b2:	51 e4       	ldi	r21, 0x41	; 65
    47b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b8:	dc 01       	movw	r26, r24
    47ba:	cb 01       	movw	r24, r22
    47bc:	bc 01       	movw	r22, r24
    47be:	cd 01       	movw	r24, r26
    47c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c4:	dc 01       	movw	r26, r24
    47c6:	cb 01       	movw	r24, r22
    47c8:	9e af       	std	Y+62, r25	; 0x3e
    47ca:	8d af       	std	Y+61, r24	; 0x3d
    47cc:	0f c0       	rjmp	.+30     	; 0x47ec <main+0x914>
    47ce:	88 ec       	ldi	r24, 0xC8	; 200
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	9c af       	std	Y+60, r25	; 0x3c
    47d4:	8b af       	std	Y+59, r24	; 0x3b
    47d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    47d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    47da:	01 97       	sbiw	r24, 0x01	; 1
    47dc:	f1 f7       	brne	.-4      	; 0x47da <main+0x902>
    47de:	9c af       	std	Y+60, r25	; 0x3c
    47e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    47e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    47e6:	01 97       	sbiw	r24, 0x01	; 1
    47e8:	9e af       	std	Y+62, r25	; 0x3e
    47ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    47ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    47f0:	00 97       	sbiw	r24, 0x00	; 0
    47f2:	69 f7       	brne	.-38     	; 0x47ce <main+0x8f6>
    47f4:	cb c0       	rjmp	.+406    	; 0x498c <main+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47f6:	fe 01       	movw	r30, r28
    47f8:	ff 96       	adiw	r30, 0x3f	; 63
    47fa:	60 81       	ld	r22, Z
    47fc:	71 81       	ldd	r23, Z+1	; 0x01
    47fe:	82 81       	ldd	r24, Z+2	; 0x02
    4800:	93 81       	ldd	r25, Z+3	; 0x03
    4802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	9e af       	std	Y+62, r25	; 0x3e
    480c:	8d af       	std	Y+61, r24	; 0x3d
    480e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4810:	9e ad       	ldd	r25, Y+62	; 0x3e
    4812:	9a af       	std	Y+58, r25	; 0x3a
    4814:	89 af       	std	Y+57, r24	; 0x39
    4816:	89 ad       	ldd	r24, Y+57	; 0x39
    4818:	9a ad       	ldd	r25, Y+58	; 0x3a
    481a:	01 97       	sbiw	r24, 0x01	; 1
    481c:	f1 f7       	brne	.-4      	; 0x481a <main+0x942>
    481e:	9a af       	std	Y+58, r25	; 0x3a
    4820:	89 af       	std	Y+57, r24	; 0x39
    4822:	b4 c0       	rjmp	.+360    	; 0x498c <main+0xab4>

					break ;
				}
				else
				{
					HLCD_PrintString(" Incorrect PASS");
    4824:	82 ec       	ldi	r24, 0xC2	; 194
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
					if(count)
    482c:	fe 01       	movw	r30, r28
    482e:	e9 58       	subi	r30, 0x89	; 137
    4830:	ff 4f       	sbci	r31, 0xFF	; 255
    4832:	80 81       	ld	r24, Z
    4834:	88 23       	and	r24, r24
    4836:	09 f4       	brne	.+2      	; 0x483a <main+0x962>
    4838:	79 c0       	rjmp	.+242    	; 0x492c <main+0xa54>
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	90 e8       	ldi	r25, 0x80	; 128
    483e:	ab eb       	ldi	r26, 0xBB	; 187
    4840:	b4 e4       	ldi	r27, 0x44	; 68
    4842:	8d ab       	std	Y+53, r24	; 0x35
    4844:	9e ab       	std	Y+54, r25	; 0x36
    4846:	af ab       	std	Y+55, r26	; 0x37
    4848:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    484a:	6d a9       	ldd	r22, Y+53	; 0x35
    484c:	7e a9       	ldd	r23, Y+54	; 0x36
    484e:	8f a9       	ldd	r24, Y+55	; 0x37
    4850:	98 ad       	ldd	r25, Y+56	; 0x38
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	4a ef       	ldi	r20, 0xFA	; 250
    4858:	54 e4       	ldi	r21, 0x44	; 68
    485a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	89 ab       	std	Y+49, r24	; 0x31
    4864:	9a ab       	std	Y+50, r25	; 0x32
    4866:	ab ab       	std	Y+51, r26	; 0x33
    4868:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    486a:	69 a9       	ldd	r22, Y+49	; 0x31
    486c:	7a a9       	ldd	r23, Y+50	; 0x32
    486e:	8b a9       	ldd	r24, Y+51	; 0x33
    4870:	9c a9       	ldd	r25, Y+52	; 0x34
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	40 e8       	ldi	r20, 0x80	; 128
    4878:	5f e3       	ldi	r21, 0x3F	; 63
    487a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    487e:	88 23       	and	r24, r24
    4880:	2c f4       	brge	.+10     	; 0x488c <main+0x9b4>
		__ticks = 1;
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	98 ab       	std	Y+48, r25	; 0x30
    4888:	8f a7       	std	Y+47, r24	; 0x2f
    488a:	3f c0       	rjmp	.+126    	; 0x490a <main+0xa32>
	else if (__tmp > 65535)
    488c:	69 a9       	ldd	r22, Y+49	; 0x31
    488e:	7a a9       	ldd	r23, Y+50	; 0x32
    4890:	8b a9       	ldd	r24, Y+51	; 0x33
    4892:	9c a9       	ldd	r25, Y+52	; 0x34
    4894:	20 e0       	ldi	r18, 0x00	; 0
    4896:	3f ef       	ldi	r19, 0xFF	; 255
    4898:	4f e7       	ldi	r20, 0x7F	; 127
    489a:	57 e4       	ldi	r21, 0x47	; 71
    489c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48a0:	18 16       	cp	r1, r24
    48a2:	4c f5       	brge	.+82     	; 0x48f6 <main+0xa1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48a4:	6d a9       	ldd	r22, Y+53	; 0x35
    48a6:	7e a9       	ldd	r23, Y+54	; 0x36
    48a8:	8f a9       	ldd	r24, Y+55	; 0x37
    48aa:	98 ad       	ldd	r25, Y+56	; 0x38
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	40 e2       	ldi	r20, 0x20	; 32
    48b2:	51 e4       	ldi	r21, 0x41	; 65
    48b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	bc 01       	movw	r22, r24
    48be:	cd 01       	movw	r24, r26
    48c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	98 ab       	std	Y+48, r25	; 0x30
    48ca:	8f a7       	std	Y+47, r24	; 0x2f
    48cc:	0f c0       	rjmp	.+30     	; 0x48ec <main+0xa14>
    48ce:	88 ec       	ldi	r24, 0xC8	; 200
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	9e a7       	std	Y+46, r25	; 0x2e
    48d4:	8d a7       	std	Y+45, r24	; 0x2d
    48d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    48d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    48da:	01 97       	sbiw	r24, 0x01	; 1
    48dc:	f1 f7       	brne	.-4      	; 0x48da <main+0xa02>
    48de:	9e a7       	std	Y+46, r25	; 0x2e
    48e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    48e4:	98 a9       	ldd	r25, Y+48	; 0x30
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	98 ab       	std	Y+48, r25	; 0x30
    48ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    48ee:	98 a9       	ldd	r25, Y+48	; 0x30
    48f0:	00 97       	sbiw	r24, 0x00	; 0
    48f2:	69 f7       	brne	.-38     	; 0x48ce <main+0x9f6>
    48f4:	14 c0       	rjmp	.+40     	; 0x491e <main+0xa46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48f6:	69 a9       	ldd	r22, Y+49	; 0x31
    48f8:	7a a9       	ldd	r23, Y+50	; 0x32
    48fa:	8b a9       	ldd	r24, Y+51	; 0x33
    48fc:	9c a9       	ldd	r25, Y+52	; 0x34
    48fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4902:	dc 01       	movw	r26, r24
    4904:	cb 01       	movw	r24, r22
    4906:	98 ab       	std	Y+48, r25	; 0x30
    4908:	8f a7       	std	Y+47, r24	; 0x2f
    490a:	8f a5       	ldd	r24, Y+47	; 0x2f
    490c:	98 a9       	ldd	r25, Y+48	; 0x30
    490e:	9c a7       	std	Y+44, r25	; 0x2c
    4910:	8b a7       	std	Y+43, r24	; 0x2b
    4912:	8b a5       	ldd	r24, Y+43	; 0x2b
    4914:	9c a5       	ldd	r25, Y+44	; 0x2c
    4916:	01 97       	sbiw	r24, 0x01	; 1
    4918:	f1 f7       	brne	.-4      	; 0x4916 <main+0xa3e>
    491a:	9c a7       	std	Y+44, r25	; 0x2c
    491c:	8b a7       	std	Y+43, r24	; 0x2b
					{
						_delay_ms(1500);
						HLCD_voidCommand(LCD_Clear_Screen);
    491e:	81 e0       	ldi	r24, 0x01	; 1
    4920:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
						HLCD_PrintString(" Try again");
    4924:	82 ed       	ldi	r24, 0xD2	; 210
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
					}
				}
				data = 0 ;
    492c:	10 92 b4 01 	sts	0x01B4, r1
				input_Pass = 0 ;
    4930:	fe 01       	movw	r30, r28
    4932:	ee 58       	subi	r30, 0x8E	; 142
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	10 82       	st	Z, r1
    4938:	11 82       	std	Z+1, r1	; 0x01
    493a:	12 82       	std	Z+2, r1	; 0x02
    493c:	13 82       	std	Z+3, r1	; 0x03

		if(!strcmp(input_name ,NAME))
		{
			HLCD_voidCommand(LCD_Clear_Screen);
			HLCD_PrintString(" Enter Password");
			while(count--)
    493e:	fe 01       	movw	r30, r28
    4940:	e9 58       	subi	r30, 0x89	; 137
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	80 81       	ld	r24, Z
    4946:	c4 57       	subi	r28, 0x74	; 116
    4948:	df 4f       	sbci	r29, 0xFF	; 255
    494a:	88 83       	st	Y, r24
    494c:	cc 58       	subi	r28, 0x8C	; 140
    494e:	d0 40       	sbci	r29, 0x00	; 0
    4950:	c4 57       	subi	r28, 0x74	; 116
    4952:	df 4f       	sbci	r29, 0xFF	; 255
    4954:	e8 81       	ld	r30, Y
    4956:	cc 58       	subi	r28, 0x8C	; 140
    4958:	d0 40       	sbci	r29, 0x00	; 0
    495a:	ee 23       	and	r30, r30
    495c:	31 f0       	breq	.+12     	; 0x496a <main+0xa92>
    495e:	f1 e0       	ldi	r31, 0x01	; 1
    4960:	c4 57       	subi	r28, 0x74	; 116
    4962:	df 4f       	sbci	r29, 0xFF	; 255
    4964:	f8 83       	st	Y, r31
    4966:	cc 58       	subi	r28, 0x8C	; 140
    4968:	d0 40       	sbci	r29, 0x00	; 0
    496a:	c4 57       	subi	r28, 0x74	; 116
    496c:	df 4f       	sbci	r29, 0xFF	; 255
    496e:	98 81       	ld	r25, Y
    4970:	cc 58       	subi	r28, 0x8C	; 140
    4972:	d0 40       	sbci	r29, 0x00	; 0
    4974:	de 01       	movw	r26, r28
    4976:	a9 58       	subi	r26, 0x89	; 137
    4978:	bf 4f       	sbci	r27, 0xFF	; 255
    497a:	fe 01       	movw	r30, r28
    497c:	e9 58       	subi	r30, 0x89	; 137
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	80 81       	ld	r24, Z
    4982:	81 50       	subi	r24, 0x01	; 1
    4984:	8c 93       	st	X, r24
    4986:	99 23       	and	r25, r25
    4988:	09 f0       	breq	.+2      	; 0x498c <main+0xab4>
    498a:	33 ce       	rjmp	.-922    	; 0x45f2 <main+0x71a>
				}
				data = 0 ;
				input_Pass = 0 ;
			}

			if(flage)
    498c:	fe 01       	movw	r30, r28
    498e:	ea 58       	subi	r30, 0x8A	; 138
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	80 81       	ld	r24, Z
    4994:	88 23       	and	r24, r24
    4996:	09 f4       	brne	.+2      	; 0x499a <main+0xac2>
    4998:	ba c0       	rjmp	.+372    	; 0x4b0e <main+0xc36>
			{
				HLCD_voidCommand(LCD_Clear_Screen);
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
				Servo_SetAngle(SERVO1 ,0);
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	60 e0       	ldi	r22, 0x00	; 0
    49a4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <Servo_SetAngle>
				HLCD_voidCommand(LCD_Clear_Screen);
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
				HLCD_PrintString(" Change Password");
    49ae:	8d ed       	ldi	r24, 0xDD	; 221
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
				HLCD_GOTO_XY(2,1);
    49b6:	82 e0       	ldi	r24, 0x02	; 2
    49b8:	61 e0       	ldi	r22, 0x01	; 1
    49ba:	0e 94 a0 1b 	call	0x3740	; 0x3740 <HLCD_GOTO_XY>
				HLCD_PrintString(" 1-Y or 2-N : ");
    49be:	8e ee       	ldi	r24, 0xEE	; 238
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
				data = 0 ;
    49c6:	10 92 b4 01 	sts	0x01B4, r1
				while(1)
				{
					//data = Keypad_getkey();
					 Bluetooth_RecieveData(&data);
    49ca:	84 eb       	ldi	r24, 0xB4	; 180
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <Bluetooth_RecieveData>
					if(data == '1')
    49d2:	80 91 b4 01 	lds	r24, 0x01B4
    49d6:	81 33       	cpi	r24, 0x31	; 49
    49d8:	09 f0       	breq	.+2      	; 0x49dc <main+0xb04>
    49da:	90 c0       	rjmp	.+288    	; 0x4afc <main+0xc24>
					{
						HLCD_SendData('1');
    49dc:	81 e3       	ldi	r24, 0x31	; 49
    49de:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_SendData>
    49e2:	80 e0       	ldi	r24, 0x00	; 0
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	aa ef       	ldi	r26, 0xFA	; 250
    49e8:	b3 e4       	ldi	r27, 0x43	; 67
    49ea:	8f a3       	std	Y+39, r24	; 0x27
    49ec:	98 a7       	std	Y+40, r25	; 0x28
    49ee:	a9 a7       	std	Y+41, r26	; 0x29
    49f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f2:	6f a1       	ldd	r22, Y+39	; 0x27
    49f4:	78 a5       	ldd	r23, Y+40	; 0x28
    49f6:	89 a5       	ldd	r24, Y+41	; 0x29
    49f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	4a ef       	ldi	r20, 0xFA	; 250
    4a00:	54 e4       	ldi	r21, 0x44	; 68
    4a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	8b a3       	std	Y+35, r24	; 0x23
    4a0c:	9c a3       	std	Y+36, r25	; 0x24
    4a0e:	ad a3       	std	Y+37, r26	; 0x25
    4a10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a12:	6b a1       	ldd	r22, Y+35	; 0x23
    4a14:	7c a1       	ldd	r23, Y+36	; 0x24
    4a16:	8d a1       	ldd	r24, Y+37	; 0x25
    4a18:	9e a1       	ldd	r25, Y+38	; 0x26
    4a1a:	20 e0       	ldi	r18, 0x00	; 0
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	40 e8       	ldi	r20, 0x80	; 128
    4a20:	5f e3       	ldi	r21, 0x3F	; 63
    4a22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a26:	88 23       	and	r24, r24
    4a28:	2c f4       	brge	.+10     	; 0x4a34 <main+0xb5c>
		__ticks = 1;
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	9a a3       	std	Y+34, r25	; 0x22
    4a30:	89 a3       	std	Y+33, r24	; 0x21
    4a32:	3f c0       	rjmp	.+126    	; 0x4ab2 <main+0xbda>
	else if (__tmp > 65535)
    4a34:	6b a1       	ldd	r22, Y+35	; 0x23
    4a36:	7c a1       	ldd	r23, Y+36	; 0x24
    4a38:	8d a1       	ldd	r24, Y+37	; 0x25
    4a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	3f ef       	ldi	r19, 0xFF	; 255
    4a40:	4f e7       	ldi	r20, 0x7F	; 127
    4a42:	57 e4       	ldi	r21, 0x47	; 71
    4a44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a48:	18 16       	cp	r1, r24
    4a4a:	4c f5       	brge	.+82     	; 0x4a9e <main+0xbc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a4c:	6f a1       	ldd	r22, Y+39	; 0x27
    4a4e:	78 a5       	ldd	r23, Y+40	; 0x28
    4a50:	89 a5       	ldd	r24, Y+41	; 0x29
    4a52:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a54:	20 e0       	ldi	r18, 0x00	; 0
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	40 e2       	ldi	r20, 0x20	; 32
    4a5a:	51 e4       	ldi	r21, 0x41	; 65
    4a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	bc 01       	movw	r22, r24
    4a66:	cd 01       	movw	r24, r26
    4a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	9a a3       	std	Y+34, r25	; 0x22
    4a72:	89 a3       	std	Y+33, r24	; 0x21
    4a74:	0f c0       	rjmp	.+30     	; 0x4a94 <main+0xbbc>
    4a76:	88 ec       	ldi	r24, 0xC8	; 200
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	98 a3       	std	Y+32, r25	; 0x20
    4a7c:	8f 8f       	std	Y+31, r24	; 0x1f
    4a7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a80:	98 a1       	ldd	r25, Y+32	; 0x20
    4a82:	01 97       	sbiw	r24, 0x01	; 1
    4a84:	f1 f7       	brne	.-4      	; 0x4a82 <main+0xbaa>
    4a86:	98 a3       	std	Y+32, r25	; 0x20
    4a88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    4a8c:	9a a1       	ldd	r25, Y+34	; 0x22
    4a8e:	01 97       	sbiw	r24, 0x01	; 1
    4a90:	9a a3       	std	Y+34, r25	; 0x22
    4a92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a94:	89 a1       	ldd	r24, Y+33	; 0x21
    4a96:	9a a1       	ldd	r25, Y+34	; 0x22
    4a98:	00 97       	sbiw	r24, 0x00	; 0
    4a9a:	69 f7       	brne	.-38     	; 0x4a76 <main+0xb9e>
    4a9c:	14 c0       	rjmp	.+40     	; 0x4ac6 <main+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a9e:	6b a1       	ldd	r22, Y+35	; 0x23
    4aa0:	7c a1       	ldd	r23, Y+36	; 0x24
    4aa2:	8d a1       	ldd	r24, Y+37	; 0x25
    4aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    4aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	9a a3       	std	Y+34, r25	; 0x22
    4ab0:	89 a3       	std	Y+33, r24	; 0x21
    4ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    4ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    4ab6:	9e 8f       	std	Y+30, r25	; 0x1e
    4ab8:	8d 8f       	std	Y+29, r24	; 0x1d
    4aba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4abc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4abe:	01 97       	sbiw	r24, 0x01	; 1
    4ac0:	f1 f7       	brne	.-4      	; 0x4abe <main+0xbe6>
    4ac2:	9e 8f       	std	Y+30, r25	; 0x1e
    4ac4:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500);
						HLCD_voidCommand(LCD_Clear_Screen);
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
    4ac8:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
						HLCD_PrintString("Enter new name");
    4acc:	8d ef       	ldi	r24, 0xFD	; 253
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
						HLCD_GOTO_XY(2,1);
    4ad4:	82 e0       	ldi	r24, 0x02	; 2
    4ad6:	61 e0       	ldi	r22, 0x01	; 1
    4ad8:	0e 94 a0 1b 	call	0x3740	; 0x3740 <HLCD_GOTO_XY>
						Get_name();
    4adc:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <Get_name>
						HLCD_voidCommand(LCD_Clear_Screen);
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
						HLCD_PrintString("Enter new password");
    4ae6:	8c e0       	ldi	r24, 0x0C	; 12
    4ae8:	91 e0       	ldi	r25, 0x01	; 1
    4aea:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
						HLCD_GOTO_XY(2,1);
    4aee:	82 e0       	ldi	r24, 0x02	; 2
    4af0:	61 e0       	ldi	r22, 0x01	; 1
    4af2:	0e 94 a0 1b 	call	0x3740	; 0x3740 <HLCD_GOTO_XY>
						Get_Password();
    4af6:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <Get_Password>
    4afa:	01 c1       	rjmp	.+514    	; 0x4cfe <main+0xe26>
						break ;
					}
					else if(data == '2')
    4afc:	80 91 b4 01 	lds	r24, 0x01B4
    4b00:	82 33       	cpi	r24, 0x32	; 50
    4b02:	09 f0       	breq	.+2      	; 0x4b06 <main+0xc2e>
    4b04:	62 cf       	rjmp	.-316    	; 0x49ca <main+0xaf2>
					{
						HLCD_SendData('2');
    4b06:	82 e3       	ldi	r24, 0x32	; 50
    4b08:	0e 94 22 1b 	call	0x3644	; 0x3644 <HLCD_SendData>
    4b0c:	f8 c0       	rjmp	.+496    	; 0x4cfe <main+0xe26>

				}
			}
			else
			{
				BUZZER_voidSetBuzzerHigh(BUZZER1);
    4b0e:	81 e0       	ldi	r24, 0x01	; 1
    4b10:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <BUZZER_voidSetBuzzerHigh>
				LED_voidSetLEDHigh(LED1);
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LED_voidSetLEDHigh>
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	90 e8       	ldi	r25, 0x80	; 128
    4b1e:	ab e3       	ldi	r26, 0x3B	; 59
    4b20:	b5 e4       	ldi	r27, 0x45	; 69
    4b22:	89 8f       	std	Y+25, r24	; 0x19
    4b24:	9a 8f       	std	Y+26, r25	; 0x1a
    4b26:	ab 8f       	std	Y+27, r26	; 0x1b
    4b28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b2a:	69 8d       	ldd	r22, Y+25	; 0x19
    4b2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	4a ef       	ldi	r20, 0xFA	; 250
    4b38:	54 e4       	ldi	r21, 0x44	; 68
    4b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	8d 8b       	std	Y+21, r24	; 0x15
    4b44:	9e 8b       	std	Y+22, r25	; 0x16
    4b46:	af 8b       	std	Y+23, r26	; 0x17
    4b48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b50:	98 8d       	ldd	r25, Y+24	; 0x18
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	40 e8       	ldi	r20, 0x80	; 128
    4b58:	5f e3       	ldi	r21, 0x3F	; 63
    4b5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b5e:	88 23       	and	r24, r24
    4b60:	2c f4       	brge	.+10     	; 0x4b6c <main+0xc94>
		__ticks = 1;
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	9c 8b       	std	Y+20, r25	; 0x14
    4b68:	8b 8b       	std	Y+19, r24	; 0x13
    4b6a:	3f c0       	rjmp	.+126    	; 0x4bea <main+0xd12>
	else if (__tmp > 65535)
    4b6c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b6e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b70:	8f 89       	ldd	r24, Y+23	; 0x17
    4b72:	98 8d       	ldd	r25, Y+24	; 0x18
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	3f ef       	ldi	r19, 0xFF	; 255
    4b78:	4f e7       	ldi	r20, 0x7F	; 127
    4b7a:	57 e4       	ldi	r21, 0x47	; 71
    4b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b80:	18 16       	cp	r1, r24
    4b82:	4c f5       	brge	.+82     	; 0x4bd6 <main+0xcfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b84:	69 8d       	ldd	r22, Y+25	; 0x19
    4b86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b8c:	20 e0       	ldi	r18, 0x00	; 0
    4b8e:	30 e0       	ldi	r19, 0x00	; 0
    4b90:	40 e2       	ldi	r20, 0x20	; 32
    4b92:	51 e4       	ldi	r21, 0x41	; 65
    4b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b98:	dc 01       	movw	r26, r24
    4b9a:	cb 01       	movw	r24, r22
    4b9c:	bc 01       	movw	r22, r24
    4b9e:	cd 01       	movw	r24, r26
    4ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	9c 8b       	std	Y+20, r25	; 0x14
    4baa:	8b 8b       	std	Y+19, r24	; 0x13
    4bac:	0f c0       	rjmp	.+30     	; 0x4bcc <main+0xcf4>
    4bae:	88 ec       	ldi	r24, 0xC8	; 200
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	9a 8b       	std	Y+18, r25	; 0x12
    4bb4:	89 8b       	std	Y+17, r24	; 0x11
    4bb6:	89 89       	ldd	r24, Y+17	; 0x11
    4bb8:	9a 89       	ldd	r25, Y+18	; 0x12
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	f1 f7       	brne	.-4      	; 0x4bba <main+0xce2>
    4bbe:	9a 8b       	std	Y+18, r25	; 0x12
    4bc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc4:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc6:	01 97       	sbiw	r24, 0x01	; 1
    4bc8:	9c 8b       	std	Y+20, r25	; 0x14
    4bca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bce:	9c 89       	ldd	r25, Y+20	; 0x14
    4bd0:	00 97       	sbiw	r24, 0x00	; 0
    4bd2:	69 f7       	brne	.-38     	; 0x4bae <main+0xcd6>
    4bd4:	14 c0       	rjmp	.+40     	; 0x4bfe <main+0xd26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    4bda:	8f 89       	ldd	r24, Y+23	; 0x17
    4bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    4bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be2:	dc 01       	movw	r26, r24
    4be4:	cb 01       	movw	r24, r22
    4be6:	9c 8b       	std	Y+20, r25	; 0x14
    4be8:	8b 8b       	std	Y+19, r24	; 0x13
    4bea:	8b 89       	ldd	r24, Y+19	; 0x13
    4bec:	9c 89       	ldd	r25, Y+20	; 0x14
    4bee:	98 8b       	std	Y+16, r25	; 0x10
    4bf0:	8f 87       	std	Y+15, r24	; 0x0f
    4bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bf4:	98 89       	ldd	r25, Y+16	; 0x10
    4bf6:	01 97       	sbiw	r24, 0x01	; 1
    4bf8:	f1 f7       	brne	.-4      	; 0x4bf6 <main+0xd1e>
    4bfa:	98 8b       	std	Y+16, r25	; 0x10
    4bfc:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(3000);
				BUZZER_voidSetBuzzerLow(BUZZER1);
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	0e 94 56 1e 	call	0x3cac	; 0x3cac <BUZZER_voidSetBuzzerLow>
				LED_voidSetLEDLow(LED1);
    4c04:	80 e0       	ldi	r24, 0x00	; 0
    4c06:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LED_voidSetLEDLow>
    4c0a:	79 c0       	rjmp	.+242    	; 0x4cfe <main+0xe26>
			}
		}
		else
		{
			HLCD_voidCommand(LCD_Clear_Screen);
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
			HLCD_PrintString("Incorrect Name");
    4c12:	8f e1       	ldi	r24, 0x1F	; 31
    4c14:	91 e0       	ldi	r25, 0x01	; 1
    4c16:	0e 94 40 1b 	call	0x3680	; 0x3680 <HLCD_PrintString>
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	aa ef       	ldi	r26, 0xFA	; 250
    4c20:	b4 e4       	ldi	r27, 0x44	; 68
    4c22:	8b 87       	std	Y+11, r24	; 0x0b
    4c24:	9c 87       	std	Y+12, r25	; 0x0c
    4c26:	ad 87       	std	Y+13, r26	; 0x0d
    4c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	4a ef       	ldi	r20, 0xFA	; 250
    4c38:	54 e4       	ldi	r21, 0x44	; 68
    4c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c3e:	dc 01       	movw	r26, r24
    4c40:	cb 01       	movw	r24, r22
    4c42:	8f 83       	std	Y+7, r24	; 0x07
    4c44:	98 87       	std	Y+8, r25	; 0x08
    4c46:	a9 87       	std	Y+9, r26	; 0x09
    4c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c4c:	78 85       	ldd	r23, Y+8	; 0x08
    4c4e:	89 85       	ldd	r24, Y+9	; 0x09
    4c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	40 e8       	ldi	r20, 0x80	; 128
    4c58:	5f e3       	ldi	r21, 0x3F	; 63
    4c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c5e:	88 23       	and	r24, r24
    4c60:	2c f4       	brge	.+10     	; 0x4c6c <main+0xd94>
		__ticks = 1;
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	9e 83       	std	Y+6, r25	; 0x06
    4c68:	8d 83       	std	Y+5, r24	; 0x05
    4c6a:	3f c0       	rjmp	.+126    	; 0x4cea <main+0xe12>
	else if (__tmp > 65535)
    4c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c6e:	78 85       	ldd	r23, Y+8	; 0x08
    4c70:	89 85       	ldd	r24, Y+9	; 0x09
    4c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c74:	20 e0       	ldi	r18, 0x00	; 0
    4c76:	3f ef       	ldi	r19, 0xFF	; 255
    4c78:	4f e7       	ldi	r20, 0x7F	; 127
    4c7a:	57 e4       	ldi	r21, 0x47	; 71
    4c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c80:	18 16       	cp	r1, r24
    4c82:	4c f5       	brge	.+82     	; 0x4cd6 <main+0xdfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	40 e2       	ldi	r20, 0x20	; 32
    4c92:	51 e4       	ldi	r21, 0x41	; 65
    4c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c98:	dc 01       	movw	r26, r24
    4c9a:	cb 01       	movw	r24, r22
    4c9c:	bc 01       	movw	r22, r24
    4c9e:	cd 01       	movw	r24, r26
    4ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca4:	dc 01       	movw	r26, r24
    4ca6:	cb 01       	movw	r24, r22
    4ca8:	9e 83       	std	Y+6, r25	; 0x06
    4caa:	8d 83       	std	Y+5, r24	; 0x05
    4cac:	0f c0       	rjmp	.+30     	; 0x4ccc <main+0xdf4>
    4cae:	88 ec       	ldi	r24, 0xC8	; 200
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	9c 83       	std	Y+4, r25	; 0x04
    4cb4:	8b 83       	std	Y+3, r24	; 0x03
    4cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    4cba:	01 97       	sbiw	r24, 0x01	; 1
    4cbc:	f1 f7       	brne	.-4      	; 0x4cba <main+0xde2>
    4cbe:	9c 83       	std	Y+4, r25	; 0x04
    4cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc6:	01 97       	sbiw	r24, 0x01	; 1
    4cc8:	9e 83       	std	Y+6, r25	; 0x06
    4cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cce:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd0:	00 97       	sbiw	r24, 0x00	; 0
    4cd2:	69 f7       	brne	.-38     	; 0x4cae <main+0xdd6>
    4cd4:	14 c0       	rjmp	.+40     	; 0x4cfe <main+0xe26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    4cd8:	78 85       	ldd	r23, Y+8	; 0x08
    4cda:	89 85       	ldd	r24, Y+9	; 0x09
    4cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	9e 83       	std	Y+6, r25	; 0x06
    4ce8:	8d 83       	std	Y+5, r24	; 0x05
    4cea:	8d 81       	ldd	r24, Y+5	; 0x05
    4cec:	9e 81       	ldd	r25, Y+6	; 0x06
    4cee:	9a 83       	std	Y+2, r25	; 0x02
    4cf0:	89 83       	std	Y+1, r24	; 0x01
    4cf2:	89 81       	ldd	r24, Y+1	; 0x01
    4cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf6:	01 97       	sbiw	r24, 0x01	; 1
    4cf8:	f1 f7       	brne	.-4      	; 0x4cf6 <main+0xe1e>
    4cfa:	9a 83       	std	Y+2, r25	; 0x02
    4cfc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
		}
		HLCD_voidCommand(LCD_Clear_Screen);
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <HLCD_voidCommand>
		Servo_SetAngle(SERVO1 ,0);
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	60 e0       	ldi	r22, 0x00	; 0
    4d08:	0e 94 6d 15 	call	0x2ada	; 0x2ada <Servo_SetAngle>
    4d0c:	00 cc       	rjmp	.-2048   	; 0x450e <main+0x636>

00004d0e <__mulsi3>:
    4d0e:	62 9f       	mul	r22, r18
    4d10:	d0 01       	movw	r26, r0
    4d12:	73 9f       	mul	r23, r19
    4d14:	f0 01       	movw	r30, r0
    4d16:	82 9f       	mul	r24, r18
    4d18:	e0 0d       	add	r30, r0
    4d1a:	f1 1d       	adc	r31, r1
    4d1c:	64 9f       	mul	r22, r20
    4d1e:	e0 0d       	add	r30, r0
    4d20:	f1 1d       	adc	r31, r1
    4d22:	92 9f       	mul	r25, r18
    4d24:	f0 0d       	add	r31, r0
    4d26:	83 9f       	mul	r24, r19
    4d28:	f0 0d       	add	r31, r0
    4d2a:	74 9f       	mul	r23, r20
    4d2c:	f0 0d       	add	r31, r0
    4d2e:	65 9f       	mul	r22, r21
    4d30:	f0 0d       	add	r31, r0
    4d32:	99 27       	eor	r25, r25
    4d34:	72 9f       	mul	r23, r18
    4d36:	b0 0d       	add	r27, r0
    4d38:	e1 1d       	adc	r30, r1
    4d3a:	f9 1f       	adc	r31, r25
    4d3c:	63 9f       	mul	r22, r19
    4d3e:	b0 0d       	add	r27, r0
    4d40:	e1 1d       	adc	r30, r1
    4d42:	f9 1f       	adc	r31, r25
    4d44:	bd 01       	movw	r22, r26
    4d46:	cf 01       	movw	r24, r30
    4d48:	11 24       	eor	r1, r1
    4d4a:	08 95       	ret

00004d4c <__udivmodsi4>:
    4d4c:	a1 e2       	ldi	r26, 0x21	; 33
    4d4e:	1a 2e       	mov	r1, r26
    4d50:	aa 1b       	sub	r26, r26
    4d52:	bb 1b       	sub	r27, r27
    4d54:	fd 01       	movw	r30, r26
    4d56:	0d c0       	rjmp	.+26     	; 0x4d72 <__udivmodsi4_ep>

00004d58 <__udivmodsi4_loop>:
    4d58:	aa 1f       	adc	r26, r26
    4d5a:	bb 1f       	adc	r27, r27
    4d5c:	ee 1f       	adc	r30, r30
    4d5e:	ff 1f       	adc	r31, r31
    4d60:	a2 17       	cp	r26, r18
    4d62:	b3 07       	cpc	r27, r19
    4d64:	e4 07       	cpc	r30, r20
    4d66:	f5 07       	cpc	r31, r21
    4d68:	20 f0       	brcs	.+8      	; 0x4d72 <__udivmodsi4_ep>
    4d6a:	a2 1b       	sub	r26, r18
    4d6c:	b3 0b       	sbc	r27, r19
    4d6e:	e4 0b       	sbc	r30, r20
    4d70:	f5 0b       	sbc	r31, r21

00004d72 <__udivmodsi4_ep>:
    4d72:	66 1f       	adc	r22, r22
    4d74:	77 1f       	adc	r23, r23
    4d76:	88 1f       	adc	r24, r24
    4d78:	99 1f       	adc	r25, r25
    4d7a:	1a 94       	dec	r1
    4d7c:	69 f7       	brne	.-38     	; 0x4d58 <__udivmodsi4_loop>
    4d7e:	60 95       	com	r22
    4d80:	70 95       	com	r23
    4d82:	80 95       	com	r24
    4d84:	90 95       	com	r25
    4d86:	9b 01       	movw	r18, r22
    4d88:	ac 01       	movw	r20, r24
    4d8a:	bd 01       	movw	r22, r26
    4d8c:	cf 01       	movw	r24, r30
    4d8e:	08 95       	ret

00004d90 <__prologue_saves__>:
    4d90:	2f 92       	push	r2
    4d92:	3f 92       	push	r3
    4d94:	4f 92       	push	r4
    4d96:	5f 92       	push	r5
    4d98:	6f 92       	push	r6
    4d9a:	7f 92       	push	r7
    4d9c:	8f 92       	push	r8
    4d9e:	9f 92       	push	r9
    4da0:	af 92       	push	r10
    4da2:	bf 92       	push	r11
    4da4:	cf 92       	push	r12
    4da6:	df 92       	push	r13
    4da8:	ef 92       	push	r14
    4daa:	ff 92       	push	r15
    4dac:	0f 93       	push	r16
    4dae:	1f 93       	push	r17
    4db0:	cf 93       	push	r28
    4db2:	df 93       	push	r29
    4db4:	cd b7       	in	r28, 0x3d	; 61
    4db6:	de b7       	in	r29, 0x3e	; 62
    4db8:	ca 1b       	sub	r28, r26
    4dba:	db 0b       	sbc	r29, r27
    4dbc:	0f b6       	in	r0, 0x3f	; 63
    4dbe:	f8 94       	cli
    4dc0:	de bf       	out	0x3e, r29	; 62
    4dc2:	0f be       	out	0x3f, r0	; 63
    4dc4:	cd bf       	out	0x3d, r28	; 61
    4dc6:	09 94       	ijmp

00004dc8 <__epilogue_restores__>:
    4dc8:	2a 88       	ldd	r2, Y+18	; 0x12
    4dca:	39 88       	ldd	r3, Y+17	; 0x11
    4dcc:	48 88       	ldd	r4, Y+16	; 0x10
    4dce:	5f 84       	ldd	r5, Y+15	; 0x0f
    4dd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4dd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4dda:	b9 84       	ldd	r11, Y+9	; 0x09
    4ddc:	c8 84       	ldd	r12, Y+8	; 0x08
    4dde:	df 80       	ldd	r13, Y+7	; 0x07
    4de0:	ee 80       	ldd	r14, Y+6	; 0x06
    4de2:	fd 80       	ldd	r15, Y+5	; 0x05
    4de4:	0c 81       	ldd	r16, Y+4	; 0x04
    4de6:	1b 81       	ldd	r17, Y+3	; 0x03
    4de8:	aa 81       	ldd	r26, Y+2	; 0x02
    4dea:	b9 81       	ldd	r27, Y+1	; 0x01
    4dec:	ce 0f       	add	r28, r30
    4dee:	d1 1d       	adc	r29, r1
    4df0:	0f b6       	in	r0, 0x3f	; 63
    4df2:	f8 94       	cli
    4df4:	de bf       	out	0x3e, r29	; 62
    4df6:	0f be       	out	0x3f, r0	; 63
    4df8:	cd bf       	out	0x3d, r28	; 61
    4dfa:	ed 01       	movw	r28, r26
    4dfc:	08 95       	ret

00004dfe <strcmp>:
    4dfe:	fb 01       	movw	r30, r22
    4e00:	dc 01       	movw	r26, r24
    4e02:	8d 91       	ld	r24, X+
    4e04:	01 90       	ld	r0, Z+
    4e06:	80 19       	sub	r24, r0
    4e08:	01 10       	cpse	r0, r1
    4e0a:	d9 f3       	breq	.-10     	; 0x4e02 <strcmp+0x4>
    4e0c:	99 0b       	sbc	r25, r25
    4e0e:	08 95       	ret

00004e10 <itoa>:
    4e10:	fb 01       	movw	r30, r22
    4e12:	9f 01       	movw	r18, r30
    4e14:	e8 94       	clt
    4e16:	42 30       	cpi	r20, 0x02	; 2
    4e18:	c4 f0       	brlt	.+48     	; 0x4e4a <itoa+0x3a>
    4e1a:	45 32       	cpi	r20, 0x25	; 37
    4e1c:	b4 f4       	brge	.+44     	; 0x4e4a <itoa+0x3a>
    4e1e:	4a 30       	cpi	r20, 0x0A	; 10
    4e20:	29 f4       	brne	.+10     	; 0x4e2c <itoa+0x1c>
    4e22:	97 fb       	bst	r25, 7
    4e24:	1e f4       	brtc	.+6      	; 0x4e2c <itoa+0x1c>
    4e26:	90 95       	com	r25
    4e28:	81 95       	neg	r24
    4e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e2c:	64 2f       	mov	r22, r20
    4e2e:	77 27       	eor	r23, r23
    4e30:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__udivmodhi4>
    4e34:	80 5d       	subi	r24, 0xD0	; 208
    4e36:	8a 33       	cpi	r24, 0x3A	; 58
    4e38:	0c f0       	brlt	.+2      	; 0x4e3c <itoa+0x2c>
    4e3a:	89 5d       	subi	r24, 0xD9	; 217
    4e3c:	81 93       	st	Z+, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	00 97       	sbiw	r24, 0x00	; 0
    4e42:	a1 f7       	brne	.-24     	; 0x4e2c <itoa+0x1c>
    4e44:	16 f4       	brtc	.+4      	; 0x4e4a <itoa+0x3a>
    4e46:	5d e2       	ldi	r21, 0x2D	; 45
    4e48:	51 93       	st	Z+, r21
    4e4a:	10 82       	st	Z, r1
    4e4c:	c9 01       	movw	r24, r18
    4e4e:	0c 94 29 27 	jmp	0x4e52	; 0x4e52 <strrev>

00004e52 <strrev>:
    4e52:	dc 01       	movw	r26, r24
    4e54:	fc 01       	movw	r30, r24
    4e56:	67 2f       	mov	r22, r23
    4e58:	71 91       	ld	r23, Z+
    4e5a:	77 23       	and	r23, r23
    4e5c:	e1 f7       	brne	.-8      	; 0x4e56 <strrev+0x4>
    4e5e:	32 97       	sbiw	r30, 0x02	; 2
    4e60:	04 c0       	rjmp	.+8      	; 0x4e6a <strrev+0x18>
    4e62:	7c 91       	ld	r23, X
    4e64:	6d 93       	st	X+, r22
    4e66:	70 83       	st	Z, r23
    4e68:	62 91       	ld	r22, -Z
    4e6a:	ae 17       	cp	r26, r30
    4e6c:	bf 07       	cpc	r27, r31
    4e6e:	c8 f3       	brcs	.-14     	; 0x4e62 <strrev+0x10>
    4e70:	08 95       	ret

00004e72 <__udivmodhi4>:
    4e72:	aa 1b       	sub	r26, r26
    4e74:	bb 1b       	sub	r27, r27
    4e76:	51 e1       	ldi	r21, 0x11	; 17
    4e78:	07 c0       	rjmp	.+14     	; 0x4e88 <__udivmodhi4_ep>

00004e7a <__udivmodhi4_loop>:
    4e7a:	aa 1f       	adc	r26, r26
    4e7c:	bb 1f       	adc	r27, r27
    4e7e:	a6 17       	cp	r26, r22
    4e80:	b7 07       	cpc	r27, r23
    4e82:	10 f0       	brcs	.+4      	; 0x4e88 <__udivmodhi4_ep>
    4e84:	a6 1b       	sub	r26, r22
    4e86:	b7 0b       	sbc	r27, r23

00004e88 <__udivmodhi4_ep>:
    4e88:	88 1f       	adc	r24, r24
    4e8a:	99 1f       	adc	r25, r25
    4e8c:	5a 95       	dec	r21
    4e8e:	a9 f7       	brne	.-22     	; 0x4e7a <__udivmodhi4_loop>
    4e90:	80 95       	com	r24
    4e92:	90 95       	com	r25
    4e94:	bc 01       	movw	r22, r24
    4e96:	cd 01       	movw	r24, r26
    4e98:	08 95       	ret

00004e9a <_exit>:
    4e9a:	f8 94       	cli

00004e9c <__stop_program>:
    4e9c:	ff cf       	rjmp	.-2      	; 0x4e9c <__stop_program>
