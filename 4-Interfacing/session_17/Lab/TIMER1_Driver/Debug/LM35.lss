
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00002e4e  00002ee2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008001a2  008001a2  00003024  2**0
                  ALLOC
  3 .stab         00003e70  00000000  00000000  00003024  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000183b  00000000  00000000  00006e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000086cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000888f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00008aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000b0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000c583  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d890  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000da70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000dd77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_1>
       8:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_2>
       c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__vector_3>
      10:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <main>
      8a:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TIM2_Init>:
u32_t preload;

void (* func_ptr)(void);

void TIM2_Init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	// CTC Mode
	CleartBit(TCCR2_Register, WGM20);
     ef2:	a5 e4       	ldi	r26, 0x45	; 69
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e5 e4       	ldi	r30, 0x45	; 69
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	8c 93       	st	X, r24
	SetBit(TCCR2_Register, WGM21);
     f00:	a5 e4       	ldi	r26, 0x45	; 69
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e4       	ldi	r30, 0x45	; 69
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	8c 93       	st	X, r24

	// Enable Overflow Interrupt
	SetBit(TIMSK_Register, OCIE2);
     f0e:	a9 e5       	ldi	r26, 0x59	; 89
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	8c 93       	st	X, r24


}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <TIM2_SetValueUS>:

void TIM2_SetValueUS(u32_t us)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <TIM2_SetValueUS+0x6>
     f28:	00 d0       	rcall	.+0      	; 0xf2a <TIM2_SetValueUS+0x8>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	69 83       	std	Y+1, r22	; 0x01
     f30:	7a 83       	std	Y+2, r23	; 0x02
     f32:	8b 83       	std	Y+3, r24	; 0x03
     f34:	9c 83       	std	Y+4, r25	; 0x04
	// Prescaler 8
	// Timer Freq = 1MHz
	// Tick_Time = 1uS
	// OVF Time = 2^(8 bits) * 1uS = 256uS

	TCNT2_Register = 0;
     f36:	e4 e4       	ldi	r30, 0x44	; 68
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	10 82       	st	Z, r1
    NoCounts = 255 ;
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	80 93 ab 01 	sts	0x01AB, r24
     f48:	90 93 ac 01 	sts	0x01AC, r25
     f4c:	a0 93 ad 01 	sts	0x01AD, r26
     f50:	b0 93 ae 01 	sts	0x01AE, r27
     f54:	13 c0       	rjmp	.+38     	; 0xf7c <TIM2_SetValueUS+0x5a>
    while((us % NoCounts)!=0)
    {
    	NoCounts-- ;
     f56:	80 91 ab 01 	lds	r24, 0x01AB
     f5a:	90 91 ac 01 	lds	r25, 0x01AC
     f5e:	a0 91 ad 01 	lds	r26, 0x01AD
     f62:	b0 91 ae 01 	lds	r27, 0x01AE
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	a1 09       	sbc	r26, r1
     f6a:	b1 09       	sbc	r27, r1
     f6c:	80 93 ab 01 	sts	0x01AB, r24
     f70:	90 93 ac 01 	sts	0x01AC, r25
     f74:	a0 93 ad 01 	sts	0x01AD, r26
     f78:	b0 93 ae 01 	sts	0x01AE, r27
	// Tick_Time = 1uS
	// OVF Time = 2^(8 bits) * 1uS = 256uS

	TCNT2_Register = 0;
    NoCounts = 255 ;
    while((us % NoCounts)!=0)
     f7c:	20 91 ab 01 	lds	r18, 0x01AB
     f80:	30 91 ac 01 	lds	r19, 0x01AC
     f84:	40 91 ad 01 	lds	r20, 0x01AD
     f88:	50 91 ae 01 	lds	r21, 0x01AE
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	ab 81       	ldd	r26, Y+3	; 0x03
     f92:	bc 81       	ldd	r27, Y+4	; 0x04
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__udivmodsi4>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	a1 05       	cpc	r26, r1
     fa4:	b1 05       	cpc	r27, r1
     fa6:	b9 f6       	brne	.-82     	; 0xf56 <TIM2_SetValueUS+0x34>
    {
    	NoCounts-- ;
    }
    OCR2_Register = NoCounts ;
     fa8:	e3 e4       	ldi	r30, 0x43	; 67
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 91 ab 01 	lds	r24, 0x01AB
     fb0:	90 91 ac 01 	lds	r25, 0x01AC
     fb4:	a0 91 ad 01 	lds	r26, 0x01AD
     fb8:	b0 91 ae 01 	lds	r27, 0x01AE
     fbc:	80 83       	st	Z, r24
    NoCounts = us / NoCounts ;
     fbe:	20 91 ab 01 	lds	r18, 0x01AB
     fc2:	30 91 ac 01 	lds	r19, 0x01AC
     fc6:	40 91 ad 01 	lds	r20, 0x01AD
     fca:	50 91 ae 01 	lds	r21, 0x01AE
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	ab 81       	ldd	r26, Y+3	; 0x03
     fd4:	bc 81       	ldd	r27, Y+4	; 0x04
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__udivmodsi4>
     fde:	da 01       	movw	r26, r20
     fe0:	c9 01       	movw	r24, r18
     fe2:	80 93 ab 01 	sts	0x01AB, r24
     fe6:	90 93 ac 01 	sts	0x01AC, r25
     fea:	a0 93 ad 01 	sts	0x01AD, r26
     fee:	b0 93 ae 01 	sts	0x01AE, r27
	// Set Clock Source (Prescaler: 8)
	CleartBit(TCCR2_Register, CS20);
     ff2:	a5 e4       	ldi	r26, 0x45	; 69
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e4       	ldi	r30, 0x45	; 69
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	8e 7f       	andi	r24, 0xFE	; 254
     ffe:	8c 93       	st	X, r24
	SetBit(TCCR2_Register, CS21);
    1000:	a5 e4       	ldi	r26, 0x45	; 69
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e4       	ldi	r30, 0x45	; 69
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	82 60       	ori	r24, 0x02	; 2
    100c:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS22);
    100e:	a5 e4       	ldi	r26, 0x45	; 69
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e4       	ldi	r30, 0x45	; 69
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8b 7f       	andi	r24, 0xFB	; 251
    101a:	8c 93       	st	X, r24
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <TIM2_Disable>:

void TIM2_Disable(void)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer (No clk)
	CleartBit(TCCR2_Register, CS20);
    1032:	a5 e4       	ldi	r26, 0x45	; 69
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e5 e4       	ldi	r30, 0x45	; 69
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8e 7f       	andi	r24, 0xFE	; 254
    103e:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS21);
    1040:	a5 e4       	ldi	r26, 0x45	; 69
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e5 e4       	ldi	r30, 0x45	; 69
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8d 7f       	andi	r24, 0xFD	; 253
    104c:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS22);
    104e:	a5 e4       	ldi	r26, 0x45	; 69
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e4       	ldi	r30, 0x45	; 69
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8b 7f       	andi	r24, 0xFB	; 251
    105a:	8c 93       	st	X, r24
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <TIM2_SetOVFCallback>:

void TIM2_SetOVFCallback(void (* ptr)(void))
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <TIM2_SetOVFCallback+0x6>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
	func_ptr = ptr;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	90 93 b0 01 	sts	0x01B0, r25
    1078:	80 93 af 01 	sts	0x01AF, r24
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <__vector_4>:

void __vector_4(void)
{
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	static u32_t counter = 0;
	if(counter == NoCounts)
    10b0:	20 91 a2 01 	lds	r18, 0x01A2
    10b4:	30 91 a3 01 	lds	r19, 0x01A3
    10b8:	40 91 a4 01 	lds	r20, 0x01A4
    10bc:	50 91 a5 01 	lds	r21, 0x01A5
    10c0:	80 91 ab 01 	lds	r24, 0x01AB
    10c4:	90 91 ac 01 	lds	r25, 0x01AC
    10c8:	a0 91 ad 01 	lds	r26, 0x01AD
    10cc:	b0 91 ae 01 	lds	r27, 0x01AE
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	4a 07       	cpc	r20, r26
    10d6:	5b 07       	cpc	r21, r27
    10d8:	81 f4       	brne	.+32     	; 0x10fa <__vector_4+0x74>
	{
		func_ptr();
    10da:	e0 91 af 01 	lds	r30, 0x01AF
    10de:	f0 91 b0 01 	lds	r31, 0x01B0
    10e2:	09 95       	icall
		counter = 0;
    10e4:	10 92 a2 01 	sts	0x01A2, r1
    10e8:	10 92 a3 01 	sts	0x01A3, r1
    10ec:	10 92 a4 01 	sts	0x01A4, r1
    10f0:	10 92 a5 01 	sts	0x01A5, r1
		TCNT2_Register = 0;
    10f4:	e4 e4       	ldi	r30, 0x44	; 68
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	10 82       	st	Z, r1
	}
	counter++;
    10fa:	80 91 a2 01 	lds	r24, 0x01A2
    10fe:	90 91 a3 01 	lds	r25, 0x01A3
    1102:	a0 91 a4 01 	lds	r26, 0x01A4
    1106:	b0 91 a5 01 	lds	r27, 0x01A5
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	a1 1d       	adc	r26, r1
    110e:	b1 1d       	adc	r27, r1
    1110:	80 93 a2 01 	sts	0x01A2, r24
    1114:	90 93 a3 01 	sts	0x01A3, r25
    1118:	a0 93 a4 01 	sts	0x01A4, r26
    111c:	b0 93 a5 01 	sts	0x01A5, r27
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	7f 91       	pop	r23
    1132:	6f 91       	pop	r22
    1134:	5f 91       	pop	r21
    1136:	4f 91       	pop	r20
    1138:	3f 91       	pop	r19
    113a:	2f 91       	pop	r18
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <TIM1_InitPWM>:
#include "TIM1_interface.h"
#include "TIM1_private.h"
#include "TIM1_config.h"

void TIM1_InitPWM(void)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
  //select fast mode
  CleartBit(TCCR1A_Register , WGM10);
    114e:	af e4       	ldi	r26, 0x4F	; 79
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ef e4       	ldi	r30, 0x4F	; 79
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8e 7f       	andi	r24, 0xFE	; 254
    115a:	8c 93       	st	X, r24
  SetBit(TCCR1A_Register , WGM11);
    115c:	af e4       	ldi	r26, 0x4F	; 79
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ef e4       	ldi	r30, 0x4F	; 79
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	8c 93       	st	X, r24
  SetBit(TCCR1B_Register , WGM12);
    116a:	ae e4       	ldi	r26, 0x4E	; 78
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ee e4       	ldi	r30, 0x4E	; 78
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 60       	ori	r24, 0x08	; 8
    1176:	8c 93       	st	X, r24
  SetBit(TCCR1B_Register , WGM13);
    1178:	ae e4       	ldi	r26, 0x4E	; 78
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e4       	ldi	r30, 0x4E	; 78
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 61       	ori	r24, 0x10	; 16
    1184:	8c 93       	st	X, r24

  //set mode channel A
  CleartBit(TCCR1A_Register , COM1A0);
    1186:	af e4       	ldi	r26, 0x4F	; 79
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ef e4       	ldi	r30, 0x4F	; 79
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 7b       	andi	r24, 0xBF	; 191
    1192:	8c 93       	st	X, r24
  SetBit(TCCR1A_Register , COM1A1);
    1194:	af e4       	ldi	r26, 0x4F	; 79
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e4       	ldi	r30, 0x4F	; 79
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	80 68       	ori	r24, 0x80	; 128
    11a0:	8c 93       	st	X, r24

  //set mode channel A
  CleartBit(TCCR1A_Register , COM1B0);
    11a2:	af e4       	ldi	r26, 0x4F	; 79
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ef e4       	ldi	r30, 0x4F	; 79
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 7e       	andi	r24, 0xEF	; 239
    11ae:	8c 93       	st	X, r24
  SetBit(TCCR1A_Register , COM1B1);
    11b0:	af e4       	ldi	r26, 0x4F	; 79
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ef e4       	ldi	r30, 0x4F	; 79
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	80 62       	ori	r24, 0x20	; 32
    11bc:	8c 93       	st	X, r24

}
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <TIM1_StartPWM>:
void TIM1_StartPWM()
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
	  //select pre-scaler
	  CleartBit(TCCR1B_Register , CS10);
    11cc:	ae e4       	ldi	r26, 0x4E	; 78
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ee e4       	ldi	r30, 0x4E	; 78
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8e 7f       	andi	r24, 0xFE	; 254
    11d8:	8c 93       	st	X, r24
	  SetBit(TCCR1B_Register , CS11);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	82 60       	ori	r24, 0x02	; 2
    11e6:	8c 93       	st	X, r24
	  CleartBit(TCCR1B_Register , CS12);
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8b 7f       	andi	r24, 0xFB	; 251
    11f4:	8c 93       	st	X, r24
}
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <TIM1_SetDutyCycle>:
void TIM1_SetDutyCycle(u8_t channel , u8_t duty)
{
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	28 97       	sbiw	r28, 0x08	; 8
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	8d 83       	std	Y+5, r24	; 0x05
    121a:	6e 83       	std	Y+6, r22	; 0x06
  u32_t t_on = (u32_t) duty*ICR1_Register/100 ;
    121c:	8e 81       	ldd	r24, Y+6	; 0x06
    121e:	e8 2e       	mov	r14, r24
    1220:	ff 24       	eor	r15, r15
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	e6 e4       	ldi	r30, 0x46	; 70
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	91 81       	ldd	r25, Z+1	; 0x01
    122e:	9c 01       	movw	r18, r24
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	c8 01       	movw	r24, r16
    1236:	b7 01       	movw	r22, r14
    1238:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__mulsi3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	24 e6       	ldi	r18, 0x64	; 100
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__udivmodsi4>
    1250:	da 01       	movw	r26, r20
    1252:	c9 01       	movw	r24, r18
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	ab 83       	std	Y+3, r26	; 0x03
    125a:	bc 83       	std	Y+4, r27	; 0x04

  switch(channel)
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	38 87       	std	Y+8, r19	; 0x08
    1264:	2f 83       	std	Y+7, r18	; 0x07
    1266:	8f 81       	ldd	r24, Y+7	; 0x07
    1268:	98 85       	ldd	r25, Y+8	; 0x08
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	31 f0       	breq	.+12     	; 0x127a <TIM1_SetDutyCycle+0x7e>
    126e:	2f 81       	ldd	r18, Y+7	; 0x07
    1270:	38 85       	ldd	r19, Y+8	; 0x08
    1272:	21 30       	cpi	r18, 0x01	; 1
    1274:	31 05       	cpc	r19, r1
    1276:	41 f0       	breq	.+16     	; 0x1288 <TIM1_SetDutyCycle+0x8c>
    1278:	0d c0       	rjmp	.+26     	; 0x1294 <TIM1_SetDutyCycle+0x98>
  {
  case PWM_OCR1A : OCR1A_Register = (u16_t)t_on ;break ;
    127a:	ea e4       	ldi	r30, 0x4A	; 74
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <TIM1_SetDutyCycle+0x98>
  case PWM_OCR1B : OCR1B_Register = (u16_t)t_on ;break ;
    1288:	e8 e4       	ldi	r30, 0x48	; 72
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	80 83       	st	Z, r24
  }
  TIM1_T_ON(channel , duty);
    1294:	8e 81       	ldd	r24, Y+6	; 0x06
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	b9 01       	movw	r22, r18
    129e:	0e 94 c2 09 	call	0x1384	; 0x1384 <TIM1_T_ON>
}
    12a2:	28 96       	adiw	r28, 0x08	; 8
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	08 95       	ret

000012bc <TIM1_SetPeriod>:
void TIM1_SetPeriod(u16_t us)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <TIM1_SetPeriod+0x6>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	89 83       	std	Y+1, r24	; 0x01
  ICR1_Register =us ;
    12ca:	e6 e4       	ldi	r30, 0x46	; 70
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	80 83       	st	Z, r24
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <TIM1_PWMSetMode>:
void TIM1_PWMSetMode(u8_t mode ,u8_t channel)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <TIM1_PWMSetMode+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <TIM1_PWMSetMode+0x8>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	6a 83       	std	Y+2, r22	; 0x02
	  switch(channel)
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	31 f0       	breq	.+12     	; 0x130e <TIM1_PWMSetMode+0x2e>
    1302:	2b 81       	ldd	r18, Y+3	; 0x03
    1304:	3c 81       	ldd	r19, Y+4	; 0x04
    1306:	21 30       	cpi	r18, 0x01	; 1
    1308:	31 05       	cpc	r19, r1
    130a:	e9 f0       	breq	.+58     	; 0x1346 <TIM1_PWMSetMode+0x66>
    130c:	34 c0       	rjmp	.+104    	; 0x1376 <TIM1_PWMSetMode+0x96>
	  {
	  case PWM_OCR1A :
		  TCCR1A_Register &= ~(0b11<<COM1A0) ;
    130e:	af e4       	ldi	r26, 0x4F	; 79
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ef e4       	ldi	r30, 0x4F	; 79
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 73       	andi	r24, 0x3F	; 63
    131a:	8c 93       	st	X, r24
		  TCCR1A_Register |= (mode<<COM1A0) ;
    131c:	af e4       	ldi	r26, 0x4F	; 79
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ef e4       	ldi	r30, 0x4F	; 79
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	28 2f       	mov	r18, r24
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	00 24       	eor	r0, r0
    1330:	96 95       	lsr	r25
    1332:	87 95       	ror	r24
    1334:	07 94       	ror	r0
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	07 94       	ror	r0
    133c:	98 2f       	mov	r25, r24
    133e:	80 2d       	mov	r24, r0
    1340:	82 2b       	or	r24, r18
    1342:	8c 93       	st	X, r24
    1344:	18 c0       	rjmp	.+48     	; 0x1376 <TIM1_PWMSetMode+0x96>
	  break ;
	  case PWM_OCR1B :
		  TCCR1B_Register &= ~(0b11<<COM1B0) ;
    1346:	ae e4       	ldi	r26, 0x4E	; 78
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ee e4       	ldi	r30, 0x4E	; 78
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8f 7c       	andi	r24, 0xCF	; 207
    1352:	8c 93       	st	X, r24
		  TCCR1B_Register |= (mode<<COM1B0) ;
    1354:	ae e4       	ldi	r26, 0x4E	; 78
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ee e4       	ldi	r30, 0x4E	; 78
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	28 2f       	mov	r18, r24
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	82 95       	swap	r24
    1368:	92 95       	swap	r25
    136a:	90 7f       	andi	r25, 0xF0	; 240
    136c:	98 27       	eor	r25, r24
    136e:	80 7f       	andi	r24, 0xF0	; 240
    1370:	98 27       	eor	r25, r24
    1372:	82 2b       	or	r24, r18
    1374:	8c 93       	st	X, r24
	  break ;
	  }
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <TIM1_T_ON>:
void TIM1_T_ON(u8_t channel , u16_t value)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <TIM1_T_ON+0x6>
    138a:	00 d0       	rcall	.+0      	; 0x138c <TIM1_T_ON+0x8>
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	7b 83       	std	Y+3, r23	; 0x03
    1396:	6a 83       	std	Y+2, r22	; 0x02
	  switch(channel)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3d 83       	std	Y+5, r19	; 0x05
    13a0:	2c 83       	std	Y+4, r18	; 0x04
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	31 f0       	breq	.+12     	; 0x13b6 <TIM1_T_ON+0x32>
    13aa:	2c 81       	ldd	r18, Y+4	; 0x04
    13ac:	3d 81       	ldd	r19, Y+5	; 0x05
    13ae:	21 30       	cpi	r18, 0x01	; 1
    13b0:	31 05       	cpc	r19, r1
    13b2:	41 f0       	breq	.+16     	; 0x13c4 <TIM1_T_ON+0x40>
    13b4:	0d c0       	rjmp	.+26     	; 0x13d0 <TIM1_T_ON+0x4c>
	  {
	  case PWM_OCR1A : OCR1A_Register = (u16_t)value ;break ;
    13b6:	ea e4       	ldi	r30, 0x4A	; 74
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	80 83       	st	Z, r24
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <TIM1_T_ON+0x4c>
	  case PWM_OCR1B : OCR1B_Register = (u16_t)value ;break ;
    13c4:	e8 e4       	ldi	r30, 0x48	; 72
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	80 83       	st	Z, r24
	  }
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <GIE_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"


void GIE_Enable(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG_Register, I_Bit);
    13e8:	af e5       	ldi	r26, 0x5F	; 95
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ef e5       	ldi	r30, 0x5F	; 95
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	8c 93       	st	X, r24
}
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <GIE_Disable>:

void GIE_Disable(void)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	CleartBit(SREG_Register, I_Bit);
    1404:	af e5       	ldi	r26, 0x5F	; 95
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ef e5       	ldi	r30, 0x5F	; 95
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8f 77       	andi	r24, 0x7F	; 127
    1410:	8c 93       	st	X, r24
}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <EXTI_Init>:
#include "EXTI_pirvate.h"



void EXTI_Init()
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	CleartBit(MCUCR_Register ,ISC01);
#elif EXTI0_MODE  == EXTI_FALLING
	CleartBit(MCUCR_Register ,ISC00);
	SetBit(MCUCR_Register ,ISC01);
#elif EXTI0_MODE  == EXTI_RISING
	SetBit(MCUCR_Register ,ISC00);
    1420:	a5 e5       	ldi	r26, 0x55	; 85
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e5       	ldi	r30, 0x55	; 85
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	8c 93       	st	X, r24
	SetBit(MCUCR_Register ,ISC01);
    142e:	a5 e5       	ldi	r26, 0x55	; 85
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e5       	ldi	r30, 0x55	; 85
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	82 60       	ori	r24, 0x02	; 2
    143a:	8c 93       	st	X, r24
	CleartBit(MCUCR_Register ,ISC11);
#elif EXTI1_MODE  == EXTI_ON_CHANGE
	SetBit(MCUCR_Register ,ISC00));
	CleartBit(MCUCR_Register ,ISC11);
#elif EXTI1_MODE  == EXTI_FALLING
	CleartBit(MCUCR_Register ,ISC00);
    143c:	a5 e5       	ldi	r26, 0x55	; 85
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e5 e5       	ldi	r30, 0x55	; 85
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8e 7f       	andi	r24, 0xFE	; 254
    1448:	8c 93       	st	X, r24
	SetBit(MCUCR_Register ,ISC11);
    144a:	a5 e5       	ldi	r26, 0x55	; 85
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e5 e5       	ldi	r30, 0x55	; 85
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	88 60       	ori	r24, 0x08	; 8
    1456:	8c 93       	st	X, r24


#if EXTI2_MODE  == EXTI_FALLING
	CleartBit(MCUCSR_Register ,ISC2);
#elif EXTI2_MODE  == EXTI_RISING
	SetBit(MCUCSR_Register ,ISC2);
    1458:	a4 e5       	ldi	r26, 0x54	; 84
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e4 e5       	ldi	r30, 0x54	; 84
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 64       	ori	r24, 0x40	; 64
    1464:	8c 93       	st	X, r24

#endif

}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <EXTI_Enable>:


void EXTI_Enable(u8_t EXTI_Num)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <EXTI_Enable+0x6>
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Num)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3b 83       	std	Y+3, r19	; 0x03
    1482:	2a 83       	std	Y+2, r18	; 0x02
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	89 f0       	breq	.+34     	; 0x14b0 <EXTI_Enable+0x44>
    148e:	2a 81       	ldd	r18, Y+2	; 0x02
    1490:	3b 81       	ldd	r19, Y+3	; 0x03
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	a1 f0       	breq	.+40     	; 0x14c0 <EXTI_Enable+0x54>
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	9b 81       	ldd	r25, Y+3	; 0x03
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	b9 f4       	brne	.+46     	; 0x14ce <EXTI_Enable+0x62>
	{
	case EXTI0 : SetBit(GICR_Register ,INT0);break ;
    14a0:	ab e5       	ldi	r26, 0x5B	; 91
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	eb e5       	ldi	r30, 0x5B	; 91
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	80 64       	ori	r24, 0x40	; 64
    14ac:	8c 93       	st	X, r24
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <EXTI_Enable+0x62>
	case EXTI1 : SetBit(GICR_Register ,INT1);break ;
    14b0:	ab e5       	ldi	r26, 0x5B	; 91
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	eb e5       	ldi	r30, 0x5B	; 91
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 68       	ori	r24, 0x80	; 128
    14bc:	8c 93       	st	X, r24
    14be:	07 c0       	rjmp	.+14     	; 0x14ce <EXTI_Enable+0x62>
	case EXTI2 : SetBit(GICR_Register ,INT2);break ;
    14c0:	ab e5       	ldi	r26, 0x5B	; 91
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	eb e5       	ldi	r30, 0x5B	; 91
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	80 62       	ori	r24, 0x20	; 32
    14cc:	8c 93       	st	X, r24
	}
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <EXTI_Disable>:

void EXTI_Disable(u8_t EXTI_Num)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <EXTI_Disable+0x6>
    14e0:	0f 92       	push	r0
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Num)
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3b 83       	std	Y+3, r19	; 0x03
    14f0:	2a 83       	std	Y+2, r18	; 0x02
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	91 05       	cpc	r25, r1
    14fa:	89 f0       	breq	.+34     	; 0x151e <EXTI_Disable+0x44>
    14fc:	2a 81       	ldd	r18, Y+2	; 0x02
    14fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	a1 f0       	breq	.+40     	; 0x152e <EXTI_Disable+0x54>
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	b9 f4       	brne	.+46     	; 0x153c <EXTI_Disable+0x62>
	{
	case EXTI0 : CleartBit(GICR_Register ,INT0);break ;
    150e:	ab e5       	ldi	r26, 0x5B	; 91
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	eb e5       	ldi	r30, 0x5B	; 91
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8f 7b       	andi	r24, 0xBF	; 191
    151a:	8c 93       	st	X, r24
    151c:	0f c0       	rjmp	.+30     	; 0x153c <EXTI_Disable+0x62>
	case EXTI1 : CleartBit(GICR_Register ,INT1);break ;
    151e:	ab e5       	ldi	r26, 0x5B	; 91
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e5       	ldi	r30, 0x5B	; 91
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 77       	andi	r24, 0x7F	; 127
    152a:	8c 93       	st	X, r24
    152c:	07 c0       	rjmp	.+14     	; 0x153c <EXTI_Disable+0x62>
	case EXTI2 : CleartBit(GICR_Register ,INT2);break ;
    152e:	ab e5       	ldi	r26, 0x5B	; 91
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	eb e5       	ldi	r30, 0x5B	; 91
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8f 7d       	andi	r24, 0xDF	; 223
    153a:	8c 93       	st	X, r24
	}
}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <Exti_setCallback>:

void Exti_setCallback(u8_t EXTI_num,void (*ptr)())
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <Exti_setCallback+0x6>
    154e:	00 d0       	rcall	.+0      	; 0x1550 <Exti_setCallback+0x8>
    1550:	0f 92       	push	r0
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	7b 83       	std	Y+3, r23	; 0x03
    155a:	6a 83       	std	Y+2, r22	; 0x02
	switch(EXTI_num)
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3d 83       	std	Y+5, r19	; 0x05
    1564:	2c 83       	std	Y+4, r18	; 0x04
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	91 05       	cpc	r25, r1
    156e:	81 f0       	breq	.+32     	; 0x1590 <Exti_setCallback+0x48>
    1570:	2c 81       	ldd	r18, Y+4	; 0x04
    1572:	3d 81       	ldd	r19, Y+5	; 0x05
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	91 f0       	breq	.+36     	; 0x159e <Exti_setCallback+0x56>
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	9d 81       	ldd	r25, Y+5	; 0x05
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	a1 f4       	brne	.+40     	; 0x15aa <Exti_setCallback+0x62>
	{
	case EXTI0 : ptr1 = ptr;break ;
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	90 93 b4 01 	sts	0x01B4, r25
    158a:	80 93 b3 01 	sts	0x01B3, r24
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <Exti_setCallback+0x62>
	case EXTI1 : ptr2 = ptr;break ;
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	9b 81       	ldd	r25, Y+3	; 0x03
    1594:	90 93 b6 01 	sts	0x01B6, r25
    1598:	80 93 b5 01 	sts	0x01B5, r24
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <Exti_setCallback+0x62>
	case EXTI2 : ptr3 = ptr;break ;
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	90 93 b2 01 	sts	0x01B2, r25
    15a6:	80 93 b1 01 	sts	0x01B1, r24
	}
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <__vector_1>:
void __vector_1(void)
{
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	ptr1();
    15e4:	e0 91 b3 01 	lds	r30, 0x01B3
    15e8:	f0 91 b4 01 	lds	r31, 0x01B4
    15ec:	09 95       	icall
}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	bf 91       	pop	r27
    15f8:	af 91       	pop	r26
    15fa:	9f 91       	pop	r25
    15fc:	8f 91       	pop	r24
    15fe:	7f 91       	pop	r23
    1600:	6f 91       	pop	r22
    1602:	5f 91       	pop	r21
    1604:	4f 91       	pop	r20
    1606:	3f 91       	pop	r19
    1608:	2f 91       	pop	r18
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <__vector_2>:
void __vector_2(void)
{
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	ptr2();
    163e:	e0 91 b5 01 	lds	r30, 0x01B5
    1642:	f0 91 b6 01 	lds	r31, 0x01B6
    1646:	09 95       	icall
}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	ff 91       	pop	r31
    164e:	ef 91       	pop	r30
    1650:	bf 91       	pop	r27
    1652:	af 91       	pop	r26
    1654:	9f 91       	pop	r25
    1656:	8f 91       	pop	r24
    1658:	7f 91       	pop	r23
    165a:	6f 91       	pop	r22
    165c:	5f 91       	pop	r21
    165e:	4f 91       	pop	r20
    1660:	3f 91       	pop	r19
    1662:	2f 91       	pop	r18
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <__vector_3>:
void __vector_3(void)
{
    166e:	1f 92       	push	r1
    1670:	0f 92       	push	r0
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	0f 92       	push	r0
    1676:	11 24       	eor	r1, r1
    1678:	2f 93       	push	r18
    167a:	3f 93       	push	r19
    167c:	4f 93       	push	r20
    167e:	5f 93       	push	r21
    1680:	6f 93       	push	r22
    1682:	7f 93       	push	r23
    1684:	8f 93       	push	r24
    1686:	9f 93       	push	r25
    1688:	af 93       	push	r26
    168a:	bf 93       	push	r27
    168c:	ef 93       	push	r30
    168e:	ff 93       	push	r31
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	ptr3();
    1698:	e0 91 b1 01 	lds	r30, 0x01B1
    169c:	f0 91 b2 01 	lds	r31, 0x01B2
    16a0:	09 95       	icall
}
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	ff 91       	pop	r31
    16a8:	ef 91       	pop	r30
    16aa:	bf 91       	pop	r27
    16ac:	af 91       	pop	r26
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	7f 91       	pop	r23
    16b4:	6f 91       	pop	r22
    16b6:	5f 91       	pop	r21
    16b8:	4f 91       	pop	r20
    16ba:	3f 91       	pop	r19
    16bc:	2f 91       	pop	r18
    16be:	0f 90       	pop	r0
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	0f 90       	pop	r0
    16c4:	1f 90       	pop	r1
    16c6:	18 95       	reti

000016c8 <DIO_u8SetPinValue>:

#include "DIO_private.h"
#include "DIO_interface.h"

u8_t DIO_u8SetPinValue(u8_t L_u8Port ,u8_t L_u8Pin ,u8_t L_u8Value)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	28 97       	sbiw	r28, 0x08	; 8
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	6a 83       	std	Y+2, r22	; 0x02
    16e0:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Value == HIGH)
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	09 f0       	breq	.+2      	; 0x16ea <DIO_u8SetPinValue+0x22>
    16e8:	71 c0       	rjmp	.+226    	; 0x17cc <DIO_u8SetPinValue+0x104>
	{
		switch(L_u8Port)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	38 87       	std	Y+8, r19	; 0x08
    16f2:	2f 83       	std	Y+7, r18	; 0x07
    16f4:	8f 81       	ldd	r24, Y+7	; 0x07
    16f6:	98 85       	ldd	r25, Y+8	; 0x08
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	49 f1       	breq	.+82     	; 0x1750 <DIO_u8SetPinValue+0x88>
    16fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1700:	38 85       	ldd	r19, Y+8	; 0x08
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	2c f4       	brge	.+10     	; 0x1712 <DIO_u8SetPinValue+0x4a>
    1708:	8f 81       	ldd	r24, Y+7	; 0x07
    170a:	98 85       	ldd	r25, Y+8	; 0x08
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	61 f0       	breq	.+24     	; 0x1728 <DIO_u8SetPinValue+0x60>
    1710:	5b c0       	rjmp	.+182    	; 0x17c8 <DIO_u8SetPinValue+0x100>
    1712:	2f 81       	ldd	r18, Y+7	; 0x07
    1714:	38 85       	ldd	r19, Y+8	; 0x08
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	31 05       	cpc	r19, r1
    171a:	71 f1       	breq	.+92     	; 0x1778 <DIO_u8SetPinValue+0xb0>
    171c:	8f 81       	ldd	r24, Y+7	; 0x07
    171e:	98 85       	ldd	r25, Y+8	; 0x08
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	91 05       	cpc	r25, r1
    1724:	e9 f1       	breq	.+122    	; 0x17a0 <DIO_u8SetPinValue+0xd8>
    1726:	50 c0       	rjmp	.+160    	; 0x17c8 <DIO_u8SetPinValue+0x100>
		{
		case PORTA : SetBit(PORTA_REG , L_u8Pin); break ;
    1728:	ab e3       	ldi	r26, 0x3B	; 59
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	eb e3       	ldi	r30, 0x3B	; 59
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8SetPinValue+0x7e>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_u8SetPinValue+0x7a>
    174a:	84 2b       	or	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	ba c0       	rjmp	.+372    	; 0x18c4 <DIO_u8SetPinValue+0x1fc>
		case PORTB : SetBit(PORTB_REG , L_u8Pin); break ;
    1750:	a8 e3       	ldi	r26, 0x38	; 56
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e8 e3       	ldi	r30, 0x38	; 56
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_u8SetPinValue+0xa6>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_u8SetPinValue+0xa2>
    1772:	84 2b       	or	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	a6 c0       	rjmp	.+332    	; 0x18c4 <DIO_u8SetPinValue+0x1fc>
		case PORTC : SetBit(PORTC_REG , L_u8Pin); break ;
    1778:	a5 e3       	ldi	r26, 0x35	; 53
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e3       	ldi	r30, 0x35	; 53
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_u8SetPinValue+0xce>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_u8SetPinValue+0xca>
    179a:	84 2b       	or	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	92 c0       	rjmp	.+292    	; 0x18c4 <DIO_u8SetPinValue+0x1fc>
		case PORTD : SetBit(PORTD_REG , L_u8Pin); break ;
    17a0:	a2 e3       	ldi	r26, 0x32	; 50
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e2 e3       	ldi	r30, 0x32	; 50
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_u8SetPinValue+0xf6>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_u8SetPinValue+0xf2>
    17c2:	84 2b       	or	r24, r20
    17c4:	8c 93       	st	X, r24
    17c6:	7e c0       	rjmp	.+252    	; 0x18c4 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    17c8:	1e 82       	std	Y+6, r1	; 0x06
    17ca:	7e c0       	rjmp	.+252    	; 0x18c8 <DIO_u8SetPinValue+0x200>
		}
	}
	else if(L_u8Value == LOW)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	88 23       	and	r24, r24
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <DIO_u8SetPinValue+0x10c>
    17d2:	76 c0       	rjmp	.+236    	; 0x18c0 <DIO_u8SetPinValue+0x1f8>
	{
		switch(L_u8Port)
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	3d 83       	std	Y+5, r19	; 0x05
    17dc:	2c 83       	std	Y+4, r18	; 0x04
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	9d 81       	ldd	r25, Y+5	; 0x05
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	59 f1       	breq	.+86     	; 0x183e <DIO_u8SetPinValue+0x176>
    17e8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ea:	3d 81       	ldd	r19, Y+5	; 0x05
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	31 05       	cpc	r19, r1
    17f0:	2c f4       	brge	.+10     	; 0x17fc <DIO_u8SetPinValue+0x134>
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	9d 81       	ldd	r25, Y+5	; 0x05
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	69 f0       	breq	.+26     	; 0x1814 <DIO_u8SetPinValue+0x14c>
    17fa:	60 c0       	rjmp	.+192    	; 0x18bc <DIO_u8SetPinValue+0x1f4>
    17fc:	2c 81       	ldd	r18, Y+4	; 0x04
    17fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1800:	22 30       	cpi	r18, 0x02	; 2
    1802:	31 05       	cpc	r19, r1
    1804:	89 f1       	breq	.+98     	; 0x1868 <DIO_u8SetPinValue+0x1a0>
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	91 05       	cpc	r25, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <DIO_u8SetPinValue+0x14a>
    1810:	40 c0       	rjmp	.+128    	; 0x1892 <DIO_u8SetPinValue+0x1ca>
    1812:	54 c0       	rjmp	.+168    	; 0x18bc <DIO_u8SetPinValue+0x1f4>
		{
		case PORTA : CleartBit(PORTA_REG , L_u8Pin); break ;
    1814:	ab e3       	ldi	r26, 0x3B	; 59
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	eb e3       	ldi	r30, 0x3B	; 59
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_u8SetPinValue+0x16a>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <DIO_u8SetPinValue+0x166>
    1836:	80 95       	com	r24
    1838:	84 23       	and	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	43 c0       	rjmp	.+134    	; 0x18c4 <DIO_u8SetPinValue+0x1fc>
		case PORTB : CleartBit(PORTB_REG , L_u8Pin); break ;
    183e:	a8 e3       	ldi	r26, 0x38	; 56
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e8 e3       	ldi	r30, 0x38	; 56
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_u8SetPinValue+0x194>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_u8SetPinValue+0x190>
    1860:	80 95       	com	r24
    1862:	84 23       	and	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	2e c0       	rjmp	.+92     	; 0x18c4 <DIO_u8SetPinValue+0x1fc>
		case PORTC : CleartBit(PORTC_REG , L_u8Pin); break ;
    1868:	a5 e3       	ldi	r26, 0x35	; 53
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e3       	ldi	r30, 0x35	; 53
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_u8SetPinValue+0x1be>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_u8SetPinValue+0x1ba>
    188a:	80 95       	com	r24
    188c:	84 23       	and	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	19 c0       	rjmp	.+50     	; 0x18c4 <DIO_u8SetPinValue+0x1fc>
		case PORTD : CleartBit(PORTD_REG , L_u8Pin); break ;
    1892:	a2 e3       	ldi	r26, 0x32	; 50
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e2 e3       	ldi	r30, 0x32	; 50
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_u8SetPinValue+0x1e8>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_u8SetPinValue+0x1e4>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    18bc:	1e 82       	std	Y+6, r1	; 0x06
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <DIO_u8SetPinValue+0x200>
		}
	}
	else
	{
		return ERROR ;
    18c0:	1e 82       	std	Y+6, r1	; 0x06
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_u8SetPinValue+0x200>
	}
	return NO_ERROR ;
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    18ca:	28 96       	adiw	r28, 0x08	; 8
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <DIO_u8SetPinDirection>:
u8_t DIO_u8SetPinDirection(u8_t L_u8Port ,u8_t L_u8Pin ,u8_t L_u8Direction)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	28 97       	sbiw	r28, 0x08	; 8
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	6a 83       	std	Y+2, r22	; 0x02
    18f4:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Direction== OUTPUT)
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	09 f0       	breq	.+2      	; 0x18fe <DIO_u8SetPinDirection+0x22>
    18fc:	71 c0       	rjmp	.+226    	; 0x19e0 <DIO_u8SetPinDirection+0x104>
	{
		switch(L_u8Port)
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	38 87       	std	Y+8, r19	; 0x08
    1906:	2f 83       	std	Y+7, r18	; 0x07
    1908:	8f 81       	ldd	r24, Y+7	; 0x07
    190a:	98 85       	ldd	r25, Y+8	; 0x08
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	91 05       	cpc	r25, r1
    1910:	49 f1       	breq	.+82     	; 0x1964 <DIO_u8SetPinDirection+0x88>
    1912:	2f 81       	ldd	r18, Y+7	; 0x07
    1914:	38 85       	ldd	r19, Y+8	; 0x08
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	31 05       	cpc	r19, r1
    191a:	2c f4       	brge	.+10     	; 0x1926 <DIO_u8SetPinDirection+0x4a>
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	98 85       	ldd	r25, Y+8	; 0x08
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	61 f0       	breq	.+24     	; 0x193c <DIO_u8SetPinDirection+0x60>
    1924:	5b c0       	rjmp	.+182    	; 0x19dc <DIO_u8SetPinDirection+0x100>
    1926:	2f 81       	ldd	r18, Y+7	; 0x07
    1928:	38 85       	ldd	r19, Y+8	; 0x08
    192a:	22 30       	cpi	r18, 0x02	; 2
    192c:	31 05       	cpc	r19, r1
    192e:	71 f1       	breq	.+92     	; 0x198c <DIO_u8SetPinDirection+0xb0>
    1930:	8f 81       	ldd	r24, Y+7	; 0x07
    1932:	98 85       	ldd	r25, Y+8	; 0x08
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	e9 f1       	breq	.+122    	; 0x19b4 <DIO_u8SetPinDirection+0xd8>
    193a:	50 c0       	rjmp	.+160    	; 0x19dc <DIO_u8SetPinDirection+0x100>
		{
		case PORTA : SetBit(DDRA_REG , L_u8Pin); break ;
    193c:	aa e3       	ldi	r26, 0x3A	; 58
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	ea e3       	ldi	r30, 0x3A	; 58
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 2e       	mov	r0, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <DIO_u8SetPinDirection+0x7e>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <DIO_u8SetPinDirection+0x7a>
    195e:	84 2b       	or	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	ba c0       	rjmp	.+372    	; 0x1ad8 <DIO_u8SetPinDirection+0x1fc>
		case PORTB : SetBit(DDRB_REG , L_u8Pin); break ;
    1964:	a7 e3       	ldi	r26, 0x37	; 55
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e7 e3       	ldi	r30, 0x37	; 55
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_u8SetPinDirection+0xa6>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <DIO_u8SetPinDirection+0xa2>
    1986:	84 2b       	or	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	a6 c0       	rjmp	.+332    	; 0x1ad8 <DIO_u8SetPinDirection+0x1fc>
		case PORTC : SetBit(DDRC_REG , L_u8Pin); break ;
    198c:	a4 e3       	ldi	r26, 0x34	; 52
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e4 e3       	ldi	r30, 0x34	; 52
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_u8SetPinDirection+0xce>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_u8SetPinDirection+0xca>
    19ae:	84 2b       	or	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	92 c0       	rjmp	.+292    	; 0x1ad8 <DIO_u8SetPinDirection+0x1fc>
		case PORTD : SetBit(DDRD_REG , L_u8Pin); break ;
    19b4:	a1 e3       	ldi	r26, 0x31	; 49
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e1 e3       	ldi	r30, 0x31	; 49
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 2e       	mov	r0, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_u8SetPinDirection+0xf6>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	0a 94       	dec	r0
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_u8SetPinDirection+0xf2>
    19d6:	84 2b       	or	r24, r20
    19d8:	8c 93       	st	X, r24
    19da:	7e c0       	rjmp	.+252    	; 0x1ad8 <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    19dc:	1e 82       	std	Y+6, r1	; 0x06
    19de:	7e c0       	rjmp	.+252    	; 0x1adc <DIO_u8SetPinDirection+0x200>
		}
	}
	else if(L_u8Direction == INPUT)
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	88 23       	and	r24, r24
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <DIO_u8SetPinDirection+0x10c>
    19e6:	76 c0       	rjmp	.+236    	; 0x1ad4 <DIO_u8SetPinDirection+0x1f8>
	{
		switch(L_u8Port)
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3d 83       	std	Y+5, r19	; 0x05
    19f0:	2c 83       	std	Y+4, r18	; 0x04
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9d 81       	ldd	r25, Y+5	; 0x05
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	91 05       	cpc	r25, r1
    19fa:	59 f1       	breq	.+86     	; 0x1a52 <DIO_u8SetPinDirection+0x176>
    19fc:	2c 81       	ldd	r18, Y+4	; 0x04
    19fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <DIO_u8SetPinDirection+0x134>
    1a06:	8c 81       	ldd	r24, Y+4	; 0x04
    1a08:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	69 f0       	breq	.+26     	; 0x1a28 <DIO_u8SetPinDirection+0x14c>
    1a0e:	60 c0       	rjmp	.+192    	; 0x1ad0 <DIO_u8SetPinDirection+0x1f4>
    1a10:	2c 81       	ldd	r18, Y+4	; 0x04
    1a12:	3d 81       	ldd	r19, Y+5	; 0x05
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	89 f1       	breq	.+98     	; 0x1a7c <DIO_u8SetPinDirection+0x1a0>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	91 05       	cpc	r25, r1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <DIO_u8SetPinDirection+0x14a>
    1a24:	40 c0       	rjmp	.+128    	; 0x1aa6 <DIO_u8SetPinDirection+0x1ca>
    1a26:	54 c0       	rjmp	.+168    	; 0x1ad0 <DIO_u8SetPinDirection+0x1f4>
		{
		case PORTA : CleartBit(DDRA_REG , L_u8Pin); break ;
    1a28:	aa e3       	ldi	r26, 0x3A	; 58
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ea e3       	ldi	r30, 0x3A	; 58
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <DIO_u8SetPinDirection+0x16a>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <DIO_u8SetPinDirection+0x166>
    1a4a:	80 95       	com	r24
    1a4c:	84 23       	and	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	43 c0       	rjmp	.+134    	; 0x1ad8 <DIO_u8SetPinDirection+0x1fc>
		case PORTB : CleartBit(DDRB_REG , L_u8Pin); break ;
    1a52:	a7 e3       	ldi	r26, 0x37	; 55
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e7 e3       	ldi	r30, 0x37	; 55
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 2e       	mov	r0, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <DIO_u8SetPinDirection+0x194>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <DIO_u8SetPinDirection+0x190>
    1a74:	80 95       	com	r24
    1a76:	84 23       	and	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	2e c0       	rjmp	.+92     	; 0x1ad8 <DIO_u8SetPinDirection+0x1fc>
		case PORTC : CleartBit(DDRC_REG , L_u8Pin); break ;
    1a7c:	a4 e3       	ldi	r26, 0x34	; 52
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e4 e3       	ldi	r30, 0x34	; 52
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <DIO_u8SetPinDirection+0x1be>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <DIO_u8SetPinDirection+0x1ba>
    1a9e:	80 95       	com	r24
    1aa0:	84 23       	and	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	19 c0       	rjmp	.+50     	; 0x1ad8 <DIO_u8SetPinDirection+0x1fc>
		case PORTD : CleartBit(DDRD_REG , L_u8Pin); break ;
    1aa6:	a1 e3       	ldi	r26, 0x31	; 49
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e1 e3       	ldi	r30, 0x31	; 49
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_u8SetPinDirection+0x1e8>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_u8SetPinDirection+0x1e4>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	04 c0       	rjmp	.+8      	; 0x1ad8 <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    1ad0:	1e 82       	std	Y+6, r1	; 0x06
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <DIO_u8SetPinDirection+0x200>
		}
	}
	else
	{
		return ERROR ;
    1ad4:	1e 82       	std	Y+6, r1	; 0x06
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_u8SetPinDirection+0x200>
	}

	return NO_ERROR ;
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1ade:	28 96       	adiw	r28, 0x08	; 8
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <DIO_u8GetBit>:

u8_t DIO_u8GetBit(u8_t L_u8Port ,u8_t L_u8Pin )
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <DIO_u8GetBit+0x6>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <DIO_u8GetBit+0x8>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <DIO_u8GetBit+0xa>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	8a 83       	std	Y+2, r24	; 0x02
    1b00:	6b 83       	std	Y+3, r22	; 0x03
	u8_t L_u8pinval ;
	switch(L_u8Port)
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3e 83       	std	Y+6, r19	; 0x06
    1b0a:	2d 83       	std	Y+5, r18	; 0x05
    1b0c:	4d 81       	ldd	r20, Y+5	; 0x05
    1b0e:	5e 81       	ldd	r21, Y+6	; 0x06
    1b10:	41 30       	cpi	r20, 0x01	; 1
    1b12:	51 05       	cpc	r21, r1
    1b14:	41 f1       	breq	.+80     	; 0x1b66 <DIO_u8GetBit+0x76>
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	34 f4       	brge	.+12     	; 0x1b2c <DIO_u8GetBit+0x3c>
    1b20:	2d 81       	ldd	r18, Y+5	; 0x05
    1b22:	3e 81       	ldd	r19, Y+6	; 0x06
    1b24:	21 15       	cp	r18, r1
    1b26:	31 05       	cpc	r19, r1
    1b28:	61 f0       	breq	.+24     	; 0x1b42 <DIO_u8GetBit+0x52>
    1b2a:	53 c0       	rjmp	.+166    	; 0x1bd2 <DIO_u8GetBit+0xe2>
    1b2c:	4d 81       	ldd	r20, Y+5	; 0x05
    1b2e:	5e 81       	ldd	r21, Y+6	; 0x06
    1b30:	42 30       	cpi	r20, 0x02	; 2
    1b32:	51 05       	cpc	r21, r1
    1b34:	51 f1       	breq	.+84     	; 0x1b8a <DIO_u8GetBit+0x9a>
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	b9 f1       	breq	.+110    	; 0x1bae <DIO_u8GetBit+0xbe>
    1b40:	48 c0       	rjmp	.+144    	; 0x1bd2 <DIO_u8GetBit+0xe2>
	{
	case PORTA :L_u8pinval = GetBit(PINA_REG , L_u8Pin); break ;
    1b42:	e9 e3       	ldi	r30, 0x39	; 57
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a9 01       	movw	r20, r18
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <DIO_u8GetBit+0x6a>
    1b56:	55 95       	asr	r21
    1b58:	47 95       	ror	r20
    1b5a:	8a 95       	dec	r24
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <DIO_u8GetBit+0x66>
    1b5e:	ca 01       	movw	r24, r20
    1b60:	81 70       	andi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	38 c0       	rjmp	.+112    	; 0x1bd6 <DIO_u8GetBit+0xe6>
	case PORTB :L_u8pinval = GetBit(PINB_REG , L_u8Pin); break ;
    1b66:	e6 e3       	ldi	r30, 0x36	; 54
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	a9 01       	movw	r20, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <DIO_u8GetBit+0x8e>
    1b7a:	55 95       	asr	r21
    1b7c:	47 95       	ror	r20
    1b7e:	8a 95       	dec	r24
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <DIO_u8GetBit+0x8a>
    1b82:	ca 01       	movw	r24, r20
    1b84:	81 70       	andi	r24, 0x01	; 1
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	26 c0       	rjmp	.+76     	; 0x1bd6 <DIO_u8GetBit+0xe6>
	case PORTC :L_u8pinval = GetBit(PINC_REG , L_u8Pin); break ;
    1b8a:	e3 e3       	ldi	r30, 0x33	; 51
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	88 2f       	mov	r24, r24
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a9 01       	movw	r20, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <DIO_u8GetBit+0xb2>
    1b9e:	55 95       	asr	r21
    1ba0:	47 95       	ror	r20
    1ba2:	8a 95       	dec	r24
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <DIO_u8GetBit+0xae>
    1ba6:	ca 01       	movw	r24, r20
    1ba8:	81 70       	andi	r24, 0x01	; 1
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	14 c0       	rjmp	.+40     	; 0x1bd6 <DIO_u8GetBit+0xe6>
	case PORTD :L_u8pinval = GetBit(PIND_REG , L_u8Pin); break ;
    1bae:	e0 e3       	ldi	r30, 0x30	; 48
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a9 01       	movw	r20, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_u8GetBit+0xd6>
    1bc2:	55 95       	asr	r21
    1bc4:	47 95       	ror	r20
    1bc6:	8a 95       	dec	r24
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_u8GetBit+0xd2>
    1bca:	ca 01       	movw	r24, r20
    1bcc:	81 70       	andi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <DIO_u8GetBit+0xe6>
	default : return ERROR ; break ;
    1bd2:	1c 82       	std	Y+4, r1	; 0x04
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_u8GetBit+0xea>
	}

	return L_u8pinval ;
    1bd6:	59 81       	ldd	r21, Y+1	; 0x01
    1bd8:	5c 83       	std	Y+4, r21	; 0x04
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1bdc:	26 96       	adiw	r28, 0x06	; 6
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <DIO_u8GetPort>:

u8_t DIO_u8GetPort(u8_t L_u8Port )
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <DIO_u8GetPort+0x6>
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <DIO_u8GetPort+0x8>
    1bf6:	0f 92       	push	r0
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
	u8_t L_u8pinval ;
	switch(L_u8Port)
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	3d 83       	std	Y+5, r19	; 0x05
    1c06:	2c 83       	std	Y+4, r18	; 0x04
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	91 05       	cpc	r25, r1
    1c10:	d1 f0       	breq	.+52     	; 0x1c46 <DIO_u8GetPort+0x58>
    1c12:	2c 81       	ldd	r18, Y+4	; 0x04
    1c14:	3d 81       	ldd	r19, Y+5	; 0x05
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <DIO_u8GetPort+0x38>
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <DIO_u8GetPort+0x4e>
    1c24:	1f c0       	rjmp	.+62     	; 0x1c64 <DIO_u8GetPort+0x76>
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <DIO_u8GetPort+0x62>
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	9d 81       	ldd	r25, Y+5	; 0x05
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	81 f0       	breq	.+32     	; 0x1c5a <DIO_u8GetPort+0x6c>
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <DIO_u8GetPort+0x76>
	{
	case PORTA :L_u8pinval = PINA_REG; break ;
    1c3c:	e9 e3       	ldi	r30, 0x39	; 57
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	11 c0       	rjmp	.+34     	; 0x1c68 <DIO_u8GetPort+0x7a>
	case PORTB :L_u8pinval = PINB_REG; break ;
    1c46:	e6 e3       	ldi	r30, 0x36	; 54
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	0c c0       	rjmp	.+24     	; 0x1c68 <DIO_u8GetPort+0x7a>
	case PORTC :L_u8pinval = PINC_REG; break ;
    1c50:	e3 e3       	ldi	r30, 0x33	; 51
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	07 c0       	rjmp	.+14     	; 0x1c68 <DIO_u8GetPort+0x7a>
	case PORTD :L_u8pinval = PIND_REG; break ;
    1c5a:	e0 e3       	ldi	r30, 0x30	; 48
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <DIO_u8GetPort+0x7a>
	default : return ERROR ; break ;
    1c64:	1b 82       	std	Y+3, r1	; 0x03
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_u8GetPort+0x7e>
	}

	return L_u8pinval ;
    1c68:	99 81       	ldd	r25, Y+1	; 0x01
    1c6a:	9b 83       	std	Y+3, r25	; 0x03
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <DIO_u8SetPortValue>:

u8_t DIO_u8SetPortValue(u8_t L_u8Port ,u8_t L_u8Value)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <DIO_u8SetPortValue+0x6>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <DIO_u8SetPortValue+0x8>
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	3d 83       	std	Y+5, r19	; 0x05
    1c98:	2c 83       	std	Y+4, r18	; 0x04
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	d1 f0       	breq	.+52     	; 0x1cd8 <DIO_u8SetPortValue+0x5a>
    1ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca8:	22 30       	cpi	r18, 0x02	; 2
    1caa:	31 05       	cpc	r19, r1
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <DIO_u8SetPortValue+0x3a>
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	61 f0       	breq	.+24     	; 0x1cce <DIO_u8SetPortValue+0x50>
    1cb6:	1f c0       	rjmp	.+62     	; 0x1cf6 <DIO_u8SetPortValue+0x78>
    1cb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cba:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbc:	22 30       	cpi	r18, 0x02	; 2
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	81 f0       	breq	.+32     	; 0x1ce2 <DIO_u8SetPortValue+0x64>
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	83 30       	cpi	r24, 0x03	; 3
    1cc8:	91 05       	cpc	r25, r1
    1cca:	81 f0       	breq	.+32     	; 0x1cec <DIO_u8SetPortValue+0x6e>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <DIO_u8SetPortValue+0x78>
	{
	case PORTA: PORTA_REG = L_u8Value; break;
    1cce:	eb e3       	ldi	r30, 0x3B	; 59
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	80 83       	st	Z, r24
    1cd6:	11 c0       	rjmp	.+34     	; 0x1cfa <DIO_u8SetPortValue+0x7c>
	case PORTB: PORTB_REG = L_u8Value; break;
    1cd8:	e8 e3       	ldi	r30, 0x38	; 56
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	80 83       	st	Z, r24
    1ce0:	0c c0       	rjmp	.+24     	; 0x1cfa <DIO_u8SetPortValue+0x7c>
	case PORTC: PORTC_REG = L_u8Value; break;
    1ce2:	e5 e3       	ldi	r30, 0x35	; 53
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	80 83       	st	Z, r24
    1cea:	07 c0       	rjmp	.+14     	; 0x1cfa <DIO_u8SetPortValue+0x7c>
	case PORTD: PORTD_REG = L_u8Value; break;
    1cec:	e2 e3       	ldi	r30, 0x32	; 50
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	80 83       	st	Z, r24
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_u8SetPortValue+0x7c>
	default: return ERROR; break;
    1cf6:	1b 82       	std	Y+3, r1	; 0x03
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_u8SetPortValue+0x80>
	}
	return NO_ERROR ;
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	9b 83       	std	Y+3, r25	; 0x03
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <DIO_u8SetPortDirection>:
u8_t DIO_u8SetPortDirection(u8_t L_u8Port ,u8_t L_u8Direction)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <DIO_u8SetPortDirection+0x6>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <DIO_u8SetPortDirection+0x8>
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	6a 83       	std	Y+2, r22	; 0x02
	if(L_u8Direction==OUTPUT)
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	19 f4       	brne	.+6      	; 0x1d2e <DIO_u8SetPortDirection+0x1e>
		L_u8Direction =0xFF;
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
    1d2c:	01 c0       	rjmp	.+2      	; 0x1d30 <DIO_u8SetPortDirection+0x20>
	else
	{
		L_u8Direction =0x00;
    1d2e:	1a 82       	std	Y+2, r1	; 0x02
	}
	switch(L_u8Port)
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	3d 83       	std	Y+5, r19	; 0x05
    1d38:	2c 83       	std	Y+4, r18	; 0x04
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	91 05       	cpc	r25, r1
    1d42:	d1 f0       	breq	.+52     	; 0x1d78 <DIO_u8SetPortDirection+0x68>
    1d44:	2c 81       	ldd	r18, Y+4	; 0x04
    1d46:	3d 81       	ldd	r19, Y+5	; 0x05
    1d48:	22 30       	cpi	r18, 0x02	; 2
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <DIO_u8SetPortDirection+0x48>
    1d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d50:	9d 81       	ldd	r25, Y+5	; 0x05
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	61 f0       	breq	.+24     	; 0x1d6e <DIO_u8SetPortDirection+0x5e>
    1d56:	1f c0       	rjmp	.+62     	; 0x1d96 <DIO_u8SetPortDirection+0x86>
    1d58:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5c:	22 30       	cpi	r18, 0x02	; 2
    1d5e:	31 05       	cpc	r19, r1
    1d60:	81 f0       	breq	.+32     	; 0x1d82 <DIO_u8SetPortDirection+0x72>
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	9d 81       	ldd	r25, Y+5	; 0x05
    1d66:	83 30       	cpi	r24, 0x03	; 3
    1d68:	91 05       	cpc	r25, r1
    1d6a:	81 f0       	breq	.+32     	; 0x1d8c <DIO_u8SetPortDirection+0x7c>
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <DIO_u8SetPortDirection+0x86>
	{
		case PORTA: DDRA_REG = L_u8Direction; break;
    1d6e:	ea e3       	ldi	r30, 0x3A	; 58
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	80 83       	st	Z, r24
    1d76:	11 c0       	rjmp	.+34     	; 0x1d9a <DIO_u8SetPortDirection+0x8a>
		case PORTB: DDRB_REG = L_u8Direction; break;
    1d78:	e7 e3       	ldi	r30, 0x37	; 55
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	80 83       	st	Z, r24
    1d80:	0c c0       	rjmp	.+24     	; 0x1d9a <DIO_u8SetPortDirection+0x8a>
		case PORTC: DDRC_REG = L_u8Direction; break;
    1d82:	e4 e3       	ldi	r30, 0x34	; 52
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	80 83       	st	Z, r24
    1d8a:	07 c0       	rjmp	.+14     	; 0x1d9a <DIO_u8SetPortDirection+0x8a>
		case PORTD: DDRD_REG = L_u8Direction; break;
    1d8c:	e1 e3       	ldi	r30, 0x31	; 49
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	80 83       	st	Z, r24
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_u8SetPortDirection+0x8a>
		default: return ERROR; break;
    1d96:	1b 82       	std	Y+3, r1	; 0x03
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <DIO_u8SetPortDirection+0x8e>
	}
	return NO_ERROR ;
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	9b 83       	std	Y+3, r25	; 0x03
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <ADC_Init>:
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_config.h"

void ADC_Init(void)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
     ADMUX_Register = 0 ;
    1db8:	e7 e2       	ldi	r30, 0x27	; 39
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	10 82       	st	Z, r1
     ADCSRA_Register = 0 ;
    1dbe:	e6 e2       	ldi	r30, 0x26	; 38
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	10 82       	st	Z, r1

	SetBit(ADCSRA_Register , ADEN);
    1dc4:	a6 e2       	ldi	r26, 0x26	; 38
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e6 e2       	ldi	r30, 0x26	; 38
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 68       	ori	r24, 0x80	; 128
    1dd0:	8c 93       	st	X, r24

	//set prescaler
	ADCSRA_Register |=ADC_PSC <<ADPS0;
    1dd2:	a6 e2       	ldi	r26, 0x26	; 38
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e6 e2       	ldi	r30, 0x26	; 38
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	85 60       	ori	r24, 0x05	; 5
    1dde:	8c 93       	st	X, r24

	//set reference
	ADMUX_Register |= ADC_REF  <<REFS0 ;
    1de0:	a7 e2       	ldi	r26, 0x27	; 39
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e7 e2       	ldi	r30, 0x27	; 39
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	80 64       	ori	r24, 0x40	; 64
    1dec:	8c 93       	st	X, r24

	//set result adjust

	ADMUX_Register |= ADC_ADJUST <<ADLAR ;
    1dee:	a7 e2       	ldi	r26, 0x27	; 39
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e2       	ldi	r30, 0x27	; 39
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8c 93       	st	X, r24
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <ADC_Selectchannel>:

void ADC_Selectchannel(u8_t channel)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    ADMUX_Register &=0b11100000 ;
    1e0c:	a7 e2       	ldi	r26, 0x27	; 39
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e7 e2       	ldi	r30, 0x27	; 39
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	80 7e       	andi	r24, 0xE0	; 224
    1e18:	8c 93       	st	X, r24
	ADMUX_Register |= channel <<MUX0 ;
    1e1a:	a7 e2       	ldi	r26, 0x27	; 39
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e7 e2       	ldi	r30, 0x27	; 39
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	90 81       	ld	r25, Z
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	89 2b       	or	r24, r25
    1e28:	8c 93       	st	X, r24
}
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <ADC_StartConversion>:

u16_t ADC_StartConversion(void)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
	//start conversion
	SetBit(ADCSRA_Register ,ADSC);
    1e3a:	a6 e2       	ldi	r26, 0x26	; 38
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e6 e2       	ldi	r30, 0x26	; 38
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	80 64       	ori	r24, 0x40	; 64
    1e46:	8c 93       	st	X, r24

	//wait for conversion to complete
	while(GetBit(ADCSRA_Register , ADSC));
    1e48:	e6 e2       	ldi	r30, 0x26	; 38
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	82 95       	swap	r24
    1e50:	86 95       	lsr	r24
    1e52:	86 95       	lsr	r24
    1e54:	83 70       	andi	r24, 0x03	; 3
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	81 70       	andi	r24, 0x01	; 1
    1e5c:	90 70       	andi	r25, 0x00	; 0
    1e5e:	88 23       	and	r24, r24
    1e60:	99 f7       	brne	.-26     	; 0x1e48 <ADC_StartConversion+0x16>

	return ADCDATA_Register ;
    1e62:	e4 e2       	ldi	r30, 0x24	; 36
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <Steper_Init>:
#include "Steper_private.h"

 static u8_t Current_pattern = 0 ;

void Steper_Init()
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
	for(u8_t i = 0 ; i< NUM_OF_COILS ;i++)
    1e7a:	19 82       	std	Y+1, r1	; 0x01
    1e7c:	1a c0       	rjmp	.+52     	; 0x1eb2 <Steper_Init+0x42>
    DIO_u8SetPinDirection(coils[i].port ,coils[i].pin ,OUTPUT );
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	fc 01       	movw	r30, r24
    1e8a:	e8 59       	subi	r30, 0x98	; 152
    1e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8e:	20 81       	ld	r18, Z
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	e7 59       	subi	r30, 0x97	; 151
    1e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea0:	90 81       	ld	r25, Z
    1ea2:	82 2f       	mov	r24, r18
    1ea4:	69 2f       	mov	r22, r25
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>

 static u8_t Current_pattern = 0 ;

void Steper_Init()
{
	for(u8_t i = 0 ; i< NUM_OF_COILS ;i++)
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	84 30       	cpi	r24, 0x04	; 4
    1eb6:	18 f3       	brcs	.-58     	; 0x1e7e <Steper_Init+0xe>
    DIO_u8SetPinDirection(coils[i].port ,coils[i].pin ,OUTPUT );
}
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <Steper_StepCW>:
void Steper_StepCW()
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	0f 92       	push	r0
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62


   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1eca:	19 82       	std	Y+1, r1	; 0x01
    1ecc:	30 c0       	rjmp	.+96     	; 0x1f2e <Steper_StepCW+0x6e>
   {
	   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e8 59       	subi	r30, 0x98	; 152
    1edc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ede:	40 81       	ld	r20, Z
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	fc 01       	movw	r30, r24
    1eec:	e7 59       	subi	r30, 0x97	; 151
    1eee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef0:	50 81       	ld	r21, Z
    1ef2:	80 91 a6 01 	lds	r24, 0x01A6
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	fc 01       	movw	r30, r24
    1efc:	e0 59       	subi	r30, 0x90	; 144
    1efe:	fe 4f       	sbci	r31, 0xFE	; 254
    1f00:	80 81       	ld	r24, Z
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	b9 01       	movw	r22, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <Steper_StepCW+0x54>
    1f10:	75 95       	asr	r23
    1f12:	67 95       	ror	r22
    1f14:	8a 95       	dec	r24
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <Steper_StepCW+0x50>
    1f18:	cb 01       	movw	r24, r22
    1f1a:	98 2f       	mov	r25, r24
    1f1c:	91 70       	andi	r25, 0x01	; 1
    1f1e:	84 2f       	mov	r24, r20
    1f20:	65 2f       	mov	r22, r21
    1f22:	49 2f       	mov	r20, r25
    1f24:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
}
void Steper_StepCW()
{


   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	68 f2       	brcs	.-102    	; 0x1ece <Steper_StepCW+0xe>
   {
	   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
   }
  Current_pattern++ ;
    1f34:	80 91 a6 01 	lds	r24, 0x01A6
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	80 93 a6 01 	sts	0x01A6, r24
  if(Current_pattern>7) Current_pattern = 0 ;
    1f3e:	80 91 a6 01 	lds	r24, 0x01A6
    1f42:	88 30       	cpi	r24, 0x08	; 8
    1f44:	10 f0       	brcs	.+4      	; 0x1f4a <Steper_StepCW+0x8a>
    1f46:	10 92 a6 01 	sts	0x01A6, r1
}
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <Steper_StepCCW>:
void Steper_StepCCW()
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62

	   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1f5c:	19 82       	std	Y+1, r1	; 0x01
    1f5e:	30 c0       	rjmp	.+96     	; 0x1fc0 <Steper_StepCCW+0x6e>
	   {
		   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e8 59       	subi	r30, 0x98	; 152
    1f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f70:	40 81       	ld	r20, Z
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	e7 59       	subi	r30, 0x97	; 151
    1f80:	fe 4f       	sbci	r31, 0xFE	; 254
    1f82:	50 81       	ld	r21, Z
    1f84:	80 91 a6 01 	lds	r24, 0x01A6
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e0 59       	subi	r30, 0x90	; 144
    1f90:	fe 4f       	sbci	r31, 0xFE	; 254
    1f92:	80 81       	ld	r24, Z
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	88 2f       	mov	r24, r24
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	b9 01       	movw	r22, r18
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <Steper_StepCCW+0x54>
    1fa2:	75 95       	asr	r23
    1fa4:	67 95       	ror	r22
    1fa6:	8a 95       	dec	r24
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <Steper_StepCCW+0x50>
    1faa:	cb 01       	movw	r24, r22
    1fac:	98 2f       	mov	r25, r24
    1fae:	91 70       	andi	r25, 0x01	; 1
    1fb0:	84 2f       	mov	r24, r20
    1fb2:	65 2f       	mov	r22, r21
    1fb4:	49 2f       	mov	r20, r25
    1fb6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
  if(Current_pattern>7) Current_pattern = 0 ;
}
void Steper_StepCCW()
{

	   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	84 30       	cpi	r24, 0x04	; 4
    1fc4:	68 f2       	brcs	.-102    	; 0x1f60 <Steper_StepCCW+0xe>
	   {
		   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
	   }
	  Current_pattern++ ;
    1fc6:	80 91 a6 01 	lds	r24, 0x01A6
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	80 93 a6 01 	sts	0x01A6, r24
	  if(Current_pattern >7) Current_pattern = 7 ;
    1fd0:	80 91 a6 01 	lds	r24, 0x01A6
    1fd4:	88 30       	cpi	r24, 0x08	; 8
    1fd6:	18 f0       	brcs	.+6      	; 0x1fde <Steper_StepCCW+0x8c>
    1fd8:	87 e0       	ldi	r24, 0x07	; 7
    1fda:	80 93 a6 01 	sts	0x01A6, r24
}
    1fde:	0f 90       	pop	r0
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <Servo_Init>:
#include "Servo_interface.h"
#include "Servo_private.h"


void Servo_Init()
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
	  DIO_u8SetPinDirection(PORTD , PIN5 , OUTPUT);
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	65 e0       	ldi	r22, 0x05	; 5
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	  TIM1_InitPWM();
    1ff8:	0e 94 a3 08 	call	0x1146	; 0x1146 <TIM1_InitPWM>
	  TIM1_PWMSetMode(SERVO_CHAAMEL , PWM_NON_INVERTING);
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	62 e0       	ldi	r22, 0x02	; 2
    2000:	0e 94 70 09 	call	0x12e0	; 0x12e0 <TIM1_PWMSetMode>
	  TIM1_SetPeriod(SERVO_PERIOD);
    2004:	80 e2       	ldi	r24, 0x20	; 32
    2006:	9e e4       	ldi	r25, 0x4E	; 78
    2008:	0e 94 5e 09 	call	0x12bc	; 0x12bc <TIM1_SetPeriod>
	  TIM1_StartPWM();
    200c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TIM1_StartPWM>
}
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <Servo_SetAngle>:
void Servo_SetAngle(u8_t angle)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <Servo_SetAngle+0x6>
    201c:	0f 92       	push	r0
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	8b 83       	std	Y+3, r24	; 0x03

   angle +=90 ;
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	86 5a       	subi	r24, 0xA6	; 166
    2028:	8b 83       	std	Y+3, r24	; 0x03
   u16_t T_on = 1000+((angle/180.0)*1000);
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	aa 27       	eor	r26, r26
    2032:	97 fd       	sbrc	r25, 7
    2034:	a0 95       	com	r26
    2036:	ba 2f       	mov	r27, r26
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	44 e3       	ldi	r20, 0x34	; 52
    204e:	53 e4       	ldi	r21, 0x43	; 67
    2050:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a e7       	ldi	r20, 0x7A	; 122
    2062:	54 e4       	ldi	r21, 0x44	; 68
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a e7       	ldi	r20, 0x7A	; 122
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
   TIM1_T_ON(SERVO_CHAAMEL ,T_on);
    2090:	29 81       	ldd	r18, Y+1	; 0x01
    2092:	3a 81       	ldd	r19, Y+2	; 0x02
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	b9 01       	movw	r22, r18
    2098:	0e 94 c2 09 	call	0x1384	; 0x1384 <TIM1_T_ON>
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <SEG_voidInit>:
#include "SEG_config.h"
#include "SEG_interfac.h"
#include "SEG_private.h"

void SEG_voidInit(u8_t SEG_NUM)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	0f 92       	push	r0
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	89 83       	std	Y+1, r24	; 0x01

	switch(SEG_NUM)
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	21 f4       	brne	.+8      	; 0x20c8 <SEG_voidInit+0x20>
	{
	case SEG1:
         DIO_u8SetPortDirection(SEG1_PORT ,OUTPUT);
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_u8SetPortDirection>
		break ;
	}

}
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <SEG_display>:

void SEG_display(u8_t SEG_NUM ,u8_t val)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <SEG_display+0x6>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(SEG_NUM)
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	88 2f       	mov	r24, r24
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	81 30       	cpi	r24, 0x01	; 1
    20e6:	91 05       	cpc	r25, r1
    20e8:	59 f4       	brne	.+22     	; 0x2100 <SEG_display+0x30>
	{
	case SEG1:
	  DIO_u8SetPortValue(SEG1_PORT ,seg[val]);
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	fc 01       	movw	r30, r24
    20f2:	e8 56       	subi	r30, 0x68	; 104
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	90 81       	ld	r25, Z
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	69 2f       	mov	r22, r25
    20fc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPortValue>
	  break ;
	}
}
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <SEG_VoidClear>:
void SEG_VoidClear(u8_t SEG_NUM)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	0f 92       	push	r0
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(SEG1_PORT , HSEG_PING ,LOW);
	DIO_u8SetPinValue(SEG1_PORT , HSEG_PINH ,LOW);
	break ;
	}

}
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <LM35_Init>:
#include "../../LIB/Bit_Math.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/ADC/ADC_interface.h"

void LM35_Init()
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTA , PIN1 ,INPUT);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
    ADC_Selectchannel(ADC_CH_CH0);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <ADC_Selectchannel>
	ADC_Init();
    2136:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <ADC_Init>
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <LM35_GetTemp>:

u32_t LM35_GetTemp(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <LM35_GetTemp+0x6>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <LM35_GetTemp+0x8>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62

  u32_t res = ADC_StartConversion();
    214c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <ADC_StartConversion>
    2150:	cc 01       	movw	r24, r24
    2152:	a0 e0       	ldi	r26, 0x00	; 0
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	ab 83       	std	Y+3, r26	; 0x03
    215c:	bc 83       	std	Y+4, r27	; 0x04

  res = res *(5.0/1024.0)*100 ;
    215e:	69 81       	ldd	r22, Y+1	; 0x01
    2160:	7a 81       	ldd	r23, Y+2	; 0x02
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 ea       	ldi	r20, 0xA0	; 160
    2178:	5b e3       	ldi	r21, 0x3B	; 59
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	48 ec       	ldi	r20, 0xC8	; 200
    218c:	52 e4       	ldi	r21, 0x42	; 66
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	ab 83       	std	Y+3, r26	; 0x03
    21a8:	bc 83       	std	Y+4, r27	; 0x04
  return res ;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	ab 81       	ldd	r26, Y+3	; 0x03
    21b0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <LED_voidInit>:

#include "LED_interface.h"
#include "LED_private.h"

void LED_voidInit(u8_t L_u8led)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <LED_voidInit+0x6>
    21ca:	0f 92       	push	r0
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	3b 83       	std	Y+3, r19	; 0x03
    21da:	2a 83       	std	Y+2, r18	; 0x02
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	9b 81       	ldd	r25, Y+3	; 0x03
    21e0:	82 30       	cpi	r24, 0x02	; 2
    21e2:	91 05       	cpc	r25, r1
    21e4:	31 f1       	breq	.+76     	; 0x2232 <LED_voidInit+0x6e>
    21e6:	2a 81       	ldd	r18, Y+2	; 0x02
    21e8:	3b 81       	ldd	r19, Y+3	; 0x03
    21ea:	23 30       	cpi	r18, 0x03	; 3
    21ec:	31 05       	cpc	r19, r1
    21ee:	54 f4       	brge	.+20     	; 0x2204 <LED_voidInit+0x40>
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	89 f0       	breq	.+34     	; 0x221a <LED_voidInit+0x56>
    21f8:	2a 81       	ldd	r18, Y+2	; 0x02
    21fa:	3b 81       	ldd	r19, Y+3	; 0x03
    21fc:	21 30       	cpi	r18, 0x01	; 1
    21fe:	31 05       	cpc	r19, r1
    2200:	91 f0       	breq	.+36     	; 0x2226 <LED_voidInit+0x62>
    2202:	28 c0       	rjmp	.+80     	; 0x2254 <LED_voidInit+0x90>
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	9b 81       	ldd	r25, Y+3	; 0x03
    2208:	83 30       	cpi	r24, 0x03	; 3
    220a:	91 05       	cpc	r25, r1
    220c:	c1 f0       	breq	.+48     	; 0x223e <LED_voidInit+0x7a>
    220e:	2a 81       	ldd	r18, Y+2	; 0x02
    2210:	3b 81       	ldd	r19, Y+3	; 0x03
    2212:	24 30       	cpi	r18, 0x04	; 4
    2214:	31 05       	cpc	r19, r1
    2216:	c9 f0       	breq	.+50     	; 0x224a <LED_voidInit+0x86>
    2218:	1d c0       	rjmp	.+58     	; 0x2254 <LED_voidInit+0x90>
	{
	case LED1 :DIO_u8SetPinDirection(LED1_PORT, LED1_PIN, OUTPUT); break ;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
    2224:	17 c0       	rjmp	.+46     	; 0x2254 <LED_voidInit+0x90>
	case LED2 :DIO_u8SetPinDirection(LED2_PORT, LED2_PIN, OUTPUT); break ;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	61 e0       	ldi	r22, 0x01	; 1
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
    2230:	11 c0       	rjmp	.+34     	; 0x2254 <LED_voidInit+0x90>
	case LED3 :DIO_u8SetPinDirection(LED3_PORT, LED3_PIN, OUTPUT); break ;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	62 e0       	ldi	r22, 0x02	; 2
    2236:	41 e0       	ldi	r20, 0x01	; 1
    2238:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
    223c:	0b c0       	rjmp	.+22     	; 0x2254 <LED_voidInit+0x90>
	case LED4 :DIO_u8SetPinDirection(LED4_PORT, LED4_PIN, OUTPUT); break ;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	63 e0       	ldi	r22, 0x03	; 3
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
    2248:	05 c0       	rjmp	.+10     	; 0x2254 <LED_voidInit+0x90>
	case LED5 :DIO_u8SetPinDirection(LED5_PORT, LED5_PIN, OUTPUT); break ;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	64 e0       	ldi	r22, 0x04	; 4
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	}
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <LED_voidSetLEDHigh>:
void LED_voidSetLEDHigh(u8_t L_u8led)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	00 d0       	rcall	.+0      	; 0x2266 <LED_voidSetLEDHigh+0x6>
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	3b 83       	std	Y+3, r19	; 0x03
    2276:	2a 83       	std	Y+2, r18	; 0x02
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	9b 81       	ldd	r25, Y+3	; 0x03
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	91 05       	cpc	r25, r1
    2280:	31 f1       	breq	.+76     	; 0x22ce <LED_voidSetLEDHigh+0x6e>
    2282:	2a 81       	ldd	r18, Y+2	; 0x02
    2284:	3b 81       	ldd	r19, Y+3	; 0x03
    2286:	23 30       	cpi	r18, 0x03	; 3
    2288:	31 05       	cpc	r19, r1
    228a:	54 f4       	brge	.+20     	; 0x22a0 <LED_voidSetLEDHigh+0x40>
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	9b 81       	ldd	r25, Y+3	; 0x03
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	89 f0       	breq	.+34     	; 0x22b6 <LED_voidSetLEDHigh+0x56>
    2294:	2a 81       	ldd	r18, Y+2	; 0x02
    2296:	3b 81       	ldd	r19, Y+3	; 0x03
    2298:	21 30       	cpi	r18, 0x01	; 1
    229a:	31 05       	cpc	r19, r1
    229c:	91 f0       	breq	.+36     	; 0x22c2 <LED_voidSetLEDHigh+0x62>
    229e:	28 c0       	rjmp	.+80     	; 0x22f0 <LED_voidSetLEDHigh+0x90>
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	9b 81       	ldd	r25, Y+3	; 0x03
    22a4:	83 30       	cpi	r24, 0x03	; 3
    22a6:	91 05       	cpc	r25, r1
    22a8:	c1 f0       	breq	.+48     	; 0x22da <LED_voidSetLEDHigh+0x7a>
    22aa:	2a 81       	ldd	r18, Y+2	; 0x02
    22ac:	3b 81       	ldd	r19, Y+3	; 0x03
    22ae:	24 30       	cpi	r18, 0x04	; 4
    22b0:	31 05       	cpc	r19, r1
    22b2:	c9 f0       	breq	.+50     	; 0x22e6 <LED_voidSetLEDHigh+0x86>
    22b4:	1d c0       	rjmp	.+58     	; 0x22f0 <LED_voidSetLEDHigh+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, HIGH); break;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    22c0:	17 c0       	rjmp	.+46     	; 0x22f0 <LED_voidSetLEDHigh+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, HIGH); break;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	61 e0       	ldi	r22, 0x01	; 1
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    22cc:	11 c0       	rjmp	.+34     	; 0x22f0 <LED_voidSetLEDHigh+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, HIGH); break;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	62 e0       	ldi	r22, 0x02	; 2
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    22d8:	0b c0       	rjmp	.+22     	; 0x22f0 <LED_voidSetLEDHigh+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, HIGH); break;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	63 e0       	ldi	r22, 0x03	; 3
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    22e4:	05 c0       	rjmp	.+10     	; 0x22f0 <LED_voidSetLEDHigh+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, HIGH); break;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	64 e0       	ldi	r22, 0x04	; 4
    22ea:	41 e0       	ldi	r20, 0x01	; 1
    22ec:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
	}
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <LED_voidSetLEDLow>:
void LED_voidSetLEDLow(u8_t L_u8led)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <LED_voidSetLEDLow+0x6>
    2302:	0f 92       	push	r0
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	3b 83       	std	Y+3, r19	; 0x03
    2312:	2a 83       	std	Y+2, r18	; 0x02
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	9b 81       	ldd	r25, Y+3	; 0x03
    2318:	82 30       	cpi	r24, 0x02	; 2
    231a:	91 05       	cpc	r25, r1
    231c:	31 f1       	breq	.+76     	; 0x236a <LED_voidSetLEDLow+0x6e>
    231e:	2a 81       	ldd	r18, Y+2	; 0x02
    2320:	3b 81       	ldd	r19, Y+3	; 0x03
    2322:	23 30       	cpi	r18, 0x03	; 3
    2324:	31 05       	cpc	r19, r1
    2326:	54 f4       	brge	.+20     	; 0x233c <LED_voidSetLEDLow+0x40>
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	89 f0       	breq	.+34     	; 0x2352 <LED_voidSetLEDLow+0x56>
    2330:	2a 81       	ldd	r18, Y+2	; 0x02
    2332:	3b 81       	ldd	r19, Y+3	; 0x03
    2334:	21 30       	cpi	r18, 0x01	; 1
    2336:	31 05       	cpc	r19, r1
    2338:	91 f0       	breq	.+36     	; 0x235e <LED_voidSetLEDLow+0x62>
    233a:	28 c0       	rjmp	.+80     	; 0x238c <LED_voidSetLEDLow+0x90>
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	9b 81       	ldd	r25, Y+3	; 0x03
    2340:	83 30       	cpi	r24, 0x03	; 3
    2342:	91 05       	cpc	r25, r1
    2344:	c1 f0       	breq	.+48     	; 0x2376 <LED_voidSetLEDLow+0x7a>
    2346:	2a 81       	ldd	r18, Y+2	; 0x02
    2348:	3b 81       	ldd	r19, Y+3	; 0x03
    234a:	24 30       	cpi	r18, 0x04	; 4
    234c:	31 05       	cpc	r19, r1
    234e:	c9 f0       	breq	.+50     	; 0x2382 <LED_voidSetLEDLow+0x86>
    2350:	1d c0       	rjmp	.+58     	; 0x238c <LED_voidSetLEDLow+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, LOW); break;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    235c:	17 c0       	rjmp	.+46     	; 0x238c <LED_voidSetLEDLow+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, LOW); break;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	61 e0       	ldi	r22, 0x01	; 1
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    2368:	11 c0       	rjmp	.+34     	; 0x238c <LED_voidSetLEDLow+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, LOW); break;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	62 e0       	ldi	r22, 0x02	; 2
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    2374:	0b c0       	rjmp	.+22     	; 0x238c <LED_voidSetLEDLow+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, LOW); break;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	63 e0       	ldi	r22, 0x03	; 3
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    2380:	05 c0       	rjmp	.+10     	; 0x238c <LED_voidSetLEDLow+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, LOW); break;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	64 e0       	ldi	r22, 0x04	; 4
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
	}
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <HLCD_voidinit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include <util/delay.h>

void HLCD_voidinit()
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	aa 97       	sbiw	r28, 0x2a	; 42
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_DATA_PORT ,OUTPUT);
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RS_PIN ,OUTPUT);
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RW_PIN ,OUTPUT);
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	61 e0       	ldi	r22, 0x01	; 1
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_E_PIN ,OUTPUT);
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	62 e0       	ldi	r22, 0x02	; 2
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 ef       	ldi	r26, 0xF0	; 240
    23d8:	b1 e4       	ldi	r27, 0x41	; 65
    23da:	8f a3       	std	Y+39, r24	; 0x27
    23dc:	98 a7       	std	Y+40, r25	; 0x28
    23de:	a9 a7       	std	Y+41, r26	; 0x29
    23e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	6f a1       	ldd	r22, Y+39	; 0x27
    23e4:	78 a5       	ldd	r23, Y+40	; 0x28
    23e6:	89 a5       	ldd	r24, Y+41	; 0x29
    23e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	4a ef       	ldi	r20, 0xFA	; 250
    23f0:	54 e4       	ldi	r21, 0x44	; 68
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8b a3       	std	Y+35, r24	; 0x23
    23fc:	9c a3       	std	Y+36, r25	; 0x24
    23fe:	ad a3       	std	Y+37, r26	; 0x25
    2400:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2402:	6b a1       	ldd	r22, Y+35	; 0x23
    2404:	7c a1       	ldd	r23, Y+36	; 0x24
    2406:	8d a1       	ldd	r24, Y+37	; 0x25
    2408:	9e a1       	ldd	r25, Y+38	; 0x26
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e8       	ldi	r20, 0x80	; 128
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2416:	88 23       	and	r24, r24
    2418:	2c f4       	brge	.+10     	; 0x2424 <HLCD_voidinit+0x8c>
		__ticks = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9a a3       	std	Y+34, r25	; 0x22
    2420:	89 a3       	std	Y+33, r24	; 0x21
    2422:	3f c0       	rjmp	.+126    	; 0x24a2 <HLCD_voidinit+0x10a>
	else if (__tmp > 65535)
    2424:	6b a1       	ldd	r22, Y+35	; 0x23
    2426:	7c a1       	ldd	r23, Y+36	; 0x24
    2428:	8d a1       	ldd	r24, Y+37	; 0x25
    242a:	9e a1       	ldd	r25, Y+38	; 0x26
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	4c f5       	brge	.+82     	; 0x248e <HLCD_voidinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	6f a1       	ldd	r22, Y+39	; 0x27
    243e:	78 a5       	ldd	r23, Y+40	; 0x28
    2440:	89 a5       	ldd	r24, Y+41	; 0x29
    2442:	9a a5       	ldd	r25, Y+42	; 0x2a
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <HLCD_voidinit+0xec>
    2466:	88 ec       	ldi	r24, 0xC8	; 200
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	98 a3       	std	Y+32, r25	; 0x20
    246c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    246e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2470:	98 a1       	ldd	r25, Y+32	; 0x20
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <HLCD_voidinit+0xda>
    2476:	98 a3       	std	Y+32, r25	; 0x20
    2478:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247a:	89 a1       	ldd	r24, Y+33	; 0x21
    247c:	9a a1       	ldd	r25, Y+34	; 0x22
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	9a a3       	std	Y+34, r25	; 0x22
    2482:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2484:	89 a1       	ldd	r24, Y+33	; 0x21
    2486:	9a a1       	ldd	r25, Y+34	; 0x22
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	69 f7       	brne	.-38     	; 0x2466 <HLCD_voidinit+0xce>
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <HLCD_voidinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248e:	6b a1       	ldd	r22, Y+35	; 0x23
    2490:	7c a1       	ldd	r23, Y+36	; 0x24
    2492:	8d a1       	ldd	r24, Y+37	; 0x25
    2494:	9e a1       	ldd	r25, Y+38	; 0x26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9a a3       	std	Y+34, r25	; 0x22
    24a0:	89 a3       	std	Y+33, r24	; 0x21
    24a2:	89 a1       	ldd	r24, Y+33	; 0x21
    24a4:	9a a1       	ldd	r25, Y+34	; 0x22
    24a6:	9e 8f       	std	Y+30, r25	; 0x1e
    24a8:	8d 8f       	std	Y+29, r24	; 0x1d
    24aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <HLCD_voidinit+0x116>
    24b2:	9e 8f       	std	Y+30, r25	; 0x1e
    24b4:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);
	HLCD_voidCommand(LCD_Function_set1);
    24b6:	88 e3       	ldi	r24, 0x38	; 56
    24b8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <HLCD_voidCommand>
	//_delay_ms(1);
	HLCD_voidCommand(LCD_Display_Mode2);
    24bc:	8d e0       	ldi	r24, 0x0D	; 13
    24be:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <HLCD_voidCommand>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	a0 e8       	ldi	r26, 0x80	; 128
    24c8:	bf e3       	ldi	r27, 0x3F	; 63
    24ca:	89 8f       	std	Y+25, r24	; 0x19
    24cc:	9a 8f       	std	Y+26, r25	; 0x1a
    24ce:	ab 8f       	std	Y+27, r26	; 0x1b
    24d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d2:	69 8d       	ldd	r22, Y+25	; 0x19
    24d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4a ef       	ldi	r20, 0xFA	; 250
    24e0:	54 e4       	ldi	r21, 0x44	; 68
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8d 8b       	std	Y+21, r24	; 0x15
    24ec:	9e 8b       	std	Y+22, r25	; 0x16
    24ee:	af 8b       	std	Y+23, r26	; 0x17
    24f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f2:	6d 89       	ldd	r22, Y+21	; 0x15
    24f4:	7e 89       	ldd	r23, Y+22	; 0x16
    24f6:	8f 89       	ldd	r24, Y+23	; 0x17
    24f8:	98 8d       	ldd	r25, Y+24	; 0x18
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e8       	ldi	r20, 0x80	; 128
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2506:	88 23       	and	r24, r24
    2508:	2c f4       	brge	.+10     	; 0x2514 <HLCD_voidinit+0x17c>
		__ticks = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	3f c0       	rjmp	.+126    	; 0x2592 <HLCD_voidinit+0x1fa>
	else if (__tmp > 65535)
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2528:	18 16       	cp	r1, r24
    252a:	4c f5       	brge	.+82     	; 0x257e <HLCD_voidinit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	69 8d       	ldd	r22, Y+25	; 0x19
    252e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	bc 01       	movw	r22, r24
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <HLCD_voidinit+0x1dc>
    2556:	88 ec       	ldi	r24, 0xC8	; 200
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9a 8b       	std	Y+18, r25	; 0x12
    255c:	89 8b       	std	Y+17, r24	; 0x11
    255e:	89 89       	ldd	r24, Y+17	; 0x11
    2560:	9a 89       	ldd	r25, Y+18	; 0x12
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <HLCD_voidinit+0x1ca>
    2566:	9a 8b       	std	Y+18, r25	; 0x12
    2568:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	8b 89       	ldd	r24, Y+19	; 0x13
    256c:	9c 89       	ldd	r25, Y+20	; 0x14
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	8b 89       	ldd	r24, Y+19	; 0x13
    2576:	9c 89       	ldd	r25, Y+20	; 0x14
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	69 f7       	brne	.-38     	; 0x2556 <HLCD_voidinit+0x1be>
    257c:	14 c0       	rjmp	.+40     	; 0x25a6 <HLCD_voidinit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9c 8b       	std	Y+20, r25	; 0x14
    2590:	8b 8b       	std	Y+19, r24	; 0x13
    2592:	8b 89       	ldd	r24, Y+19	; 0x13
    2594:	9c 89       	ldd	r25, Y+20	; 0x14
    2596:	98 8b       	std	Y+16, r25	; 0x10
    2598:	8f 87       	std	Y+15, r24	; 0x0f
    259a:	8f 85       	ldd	r24, Y+15	; 0x0f
    259c:	98 89       	ldd	r25, Y+16	; 0x10
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <HLCD_voidinit+0x206>
    25a2:	98 8b       	std	Y+16, r25	; 0x10
    25a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_voidCommand(LCD_Clear_Screen);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <HLCD_voidCommand>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	a0 e0       	ldi	r26, 0x00	; 0
    25b2:	b0 e4       	ldi	r27, 0x40	; 64
    25b4:	8b 87       	std	Y+11, r24	; 0x0b
    25b6:	9c 87       	std	Y+12, r25	; 0x0c
    25b8:	ad 87       	std	Y+13, r26	; 0x0d
    25ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25be:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4a ef       	ldi	r20, 0xFA	; 250
    25ca:	54 e4       	ldi	r21, 0x44	; 68
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8f 83       	std	Y+7, r24	; 0x07
    25d6:	98 87       	std	Y+8, r25	; 0x08
    25d8:	a9 87       	std	Y+9, r26	; 0x09
    25da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	2c f4       	brge	.+10     	; 0x25fe <HLCD_voidinit+0x266>
		__ticks = 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	3f c0       	rjmp	.+126    	; 0x267c <HLCD_voidinit+0x2e4>
	else if (__tmp > 65535)
    25fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2600:	78 85       	ldd	r23, Y+8	; 0x08
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	4f e7       	ldi	r20, 0x7F	; 127
    260c:	57 e4       	ldi	r21, 0x47	; 71
    260e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2612:	18 16       	cp	r1, r24
    2614:	4c f5       	brge	.+82     	; 0x2668 <HLCD_voidinit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	6b 85       	ldd	r22, Y+11	; 0x0b
    2618:	7c 85       	ldd	r23, Y+12	; 0x0c
    261a:	8d 85       	ldd	r24, Y+13	; 0x0d
    261c:	9e 85       	ldd	r25, Y+14	; 0x0e
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	0f c0       	rjmp	.+30     	; 0x265e <HLCD_voidinit+0x2c6>
    2640:	88 ec       	ldi	r24, 0xC8	; 200
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <HLCD_voidinit+0x2b4>
    2650:	9c 83       	std	Y+4, r25	; 0x04
    2652:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	69 f7       	brne	.-38     	; 0x2640 <HLCD_voidinit+0x2a8>
    2666:	14 c0       	rjmp	.+40     	; 0x2690 <HLCD_voidinit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <HLCD_voidinit+0x2f0>
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidCommand(LCD_Entry_Mode1);
    2690:	86 e0       	ldi	r24, 0x06	; 6
    2692:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <HLCD_voidCommand>

    HLCD_voidCommand(LCD_DISP_ON_CURSOR);
    2696:	8e e0       	ldi	r24, 0x0E	; 14
    2698:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <HLCD_voidCommand>
    HLCD_voidCommand(LCD_DISP_ON);
    269c:	8c e0       	ldi	r24, 0x0C	; 12
    269e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <HLCD_voidCommand>
}
    26a2:	aa 96       	adiw	r28, 0x2a	; 42
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <HLCD_voidCommand>:

void HLCD_voidCommand(u8_t command)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	0f 92       	push	r0
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,LOW );
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW );
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT ,command );
    26d4:	83 e0       	ldi	r24, 0x03	; 3
    26d6:	69 81       	ldd	r22, Y+1	; 0x01
    26d8:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    26dc:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendPulse>
}
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <HLCD_voidSetDDRAM_Address>:
void HLCD_voidSetDDRAM_Address(u8_t address)
{
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	0f 92       	push	r0
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	89 83       	std	Y+1, r24	; 0x01
	SetBit(address,7);
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	80 68       	ori	r24, 0x80	; 128
    26f8:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidCommand(address);
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <HLCD_voidCommand>
}
    2700:	0f 90       	pop	r0
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <HLCD_voidSendPulse>:

void static HLCD_voidSendPulse(void)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	6c 97       	sbiw	r28, 0x1c	; 28
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,HIGH);
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	62 e0       	ldi	r22, 0x02	; 2
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	a0 e8       	ldi	r26, 0x80	; 128
    272c:	bf e3       	ldi	r27, 0x3F	; 63
    272e:	89 8f       	std	Y+25, r24	; 0x19
    2730:	9a 8f       	std	Y+26, r25	; 0x1a
    2732:	ab 8f       	std	Y+27, r26	; 0x1b
    2734:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	69 8d       	ldd	r22, Y+25	; 0x19
    2738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    273a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a ef       	ldi	r20, 0xFA	; 250
    2744:	54 e4       	ldi	r21, 0x44	; 68
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8d 8b       	std	Y+21, r24	; 0x15
    2750:	9e 8b       	std	Y+22, r25	; 0x16
    2752:	af 8b       	std	Y+23, r26	; 0x17
    2754:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2756:	6d 89       	ldd	r22, Y+21	; 0x15
    2758:	7e 89       	ldd	r23, Y+22	; 0x16
    275a:	8f 89       	ldd	r24, Y+23	; 0x17
    275c:	98 8d       	ldd	r25, Y+24	; 0x18
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <HLCD_voidSendPulse+0x70>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <HLCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    2778:	6d 89       	ldd	r22, Y+21	; 0x15
    277a:	7e 89       	ldd	r23, Y+22	; 0x16
    277c:	8f 89       	ldd	r24, Y+23	; 0x17
    277e:	98 8d       	ldd	r25, Y+24	; 0x18
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <HLCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	69 8d       	ldd	r22, Y+25	; 0x19
    2792:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2796:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9c 8b       	std	Y+20, r25	; 0x14
    27b6:	8b 8b       	std	Y+19, r24	; 0x13
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <HLCD_voidSendPulse+0xd0>
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9a 8b       	std	Y+18, r25	; 0x12
    27c0:	89 8b       	std	Y+17, r24	; 0x11
    27c2:	89 89       	ldd	r24, Y+17	; 0x11
    27c4:	9a 89       	ldd	r25, Y+18	; 0x12
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <HLCD_voidSendPulse+0xbe>
    27ca:	9a 8b       	std	Y+18, r25	; 0x12
    27cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8b 89       	ldd	r24, Y+19	; 0x13
    27d0:	9c 89       	ldd	r25, Y+20	; 0x14
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8b 89       	ldd	r24, Y+19	; 0x13
    27da:	9c 89       	ldd	r25, Y+20	; 0x14
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <HLCD_voidSendPulse+0xb2>
    27e0:	14 c0       	rjmp	.+40     	; 0x280a <HLCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6d 89       	ldd	r22, Y+21	; 0x15
    27e4:	7e 89       	ldd	r23, Y+22	; 0x16
    27e6:	8f 89       	ldd	r24, Y+23	; 0x17
    27e8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
    27f6:	8b 89       	ldd	r24, Y+19	; 0x13
    27f8:	9c 89       	ldd	r25, Y+20	; 0x14
    27fa:	98 8b       	std	Y+16, r25	; 0x10
    27fc:	8f 87       	std	Y+15, r24	; 0x0f
    27fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2800:	98 89       	ldd	r25, Y+16	; 0x10
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <HLCD_voidSendPulse+0xfa>
    2806:	98 8b       	std	Y+16, r25	; 0x10
    2808:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,LOW);
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	62 e0       	ldi	r22, 0x02	; 2
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e8       	ldi	r26, 0x80	; 128
    281a:	bf e3       	ldi	r27, 0x3F	; 63
    281c:	8b 87       	std	Y+11, r24	; 0x0b
    281e:	9c 87       	std	Y+12, r25	; 0x0c
    2820:	ad 87       	std	Y+13, r26	; 0x0d
    2822:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	6b 85       	ldd	r22, Y+11	; 0x0b
    2826:	7c 85       	ldd	r23, Y+12	; 0x0c
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8f 83       	std	Y+7, r24	; 0x07
    283e:	98 87       	std	Y+8, r25	; 0x08
    2840:	a9 87       	std	Y+9, r26	; 0x09
    2842:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2844:	6f 81       	ldd	r22, Y+7	; 0x07
    2846:	78 85       	ldd	r23, Y+8	; 0x08
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <HLCD_voidSendPulse+0x15e>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <HLCD_voidSendPulse+0x1dc>
	else if (__tmp > 65535)
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <HLCD_voidSendPulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2880:	7c 85       	ldd	r23, Y+12	; 0x0c
    2882:	8d 85       	ldd	r24, Y+13	; 0x0d
    2884:	9e 85       	ldd	r25, Y+14	; 0x0e
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9e 83       	std	Y+6, r25	; 0x06
    28a4:	8d 83       	std	Y+5, r24	; 0x05
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <HLCD_voidSendPulse+0x1be>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9c 83       	std	Y+4, r25	; 0x04
    28ae:	8b 83       	std	Y+3, r24	; 0x03
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <HLCD_voidSendPulse+0x1ac>
    28b8:	9c 83       	std	Y+4, r25	; 0x04
    28ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8d 81       	ldd	r24, Y+5	; 0x05
    28be:	9e 81       	ldd	r25, Y+6	; 0x06
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <HLCD_voidSendPulse+0x1a0>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <HLCD_voidSendPulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	6f 81       	ldd	r22, Y+7	; 0x07
    28d2:	78 85       	ldd	r23, Y+8	; 0x08
    28d4:	89 85       	ldd	r24, Y+9	; 0x09
    28d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <HLCD_voidSendPulse+0x1e8>
    28f4:	9a 83       	std	Y+2, r25	; 0x02
    28f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    28f8:	6c 96       	adiw	r28, 0x1c	; 28
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <HLCD_SendData>:

void HLCD_SendData(u8_t data)
{
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	0f 92       	push	r0
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,HIGH);
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW);
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	61 e0       	ldi	r22, 0x01	; 1
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_DATA_PORT ,data);
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	69 81       	ldd	r22, Y+1	; 0x01
    292e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    2932:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendPulse>
}
    2936:	0f 90       	pop	r0
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <HLCD_PrintString>:

void HLCD_PrintString(u8_t *string)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <HLCD_PrintString+0x6>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <HLCD_PrintString+0x8>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	9c 83       	std	Y+4, r25	; 0x04
    294c:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    294e:	1a 82       	std	Y+2, r1	; 0x02
    2950:	19 82       	std	Y+1, r1	; 0x01
    2952:	26 c0       	rjmp	.+76     	; 0x29a0 <HLCD_PrintString+0x62>
	while (*string > 0) {
		count++;
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	01 96       	adiw	r24, 0x01	; 1
    295a:	9a 83       	std	Y+2, r25	; 0x02
    295c:	89 83       	std	Y+1, r24	; 0x01
		HLCD_SendData(*string++);
    295e:	eb 81       	ldd	r30, Y+3	; 0x03
    2960:	fc 81       	ldd	r31, Y+4	; 0x04
    2962:	20 81       	ld	r18, Z
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
    296e:	82 2f       	mov	r24, r18
    2970:	0e 94 85 14 	call	0x290a	; 0x290a <HLCD_SendData>
		if (count == 16) {
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	80 31       	cpi	r24, 0x10	; 16
    297a:	91 05       	cpc	r25, r1
    297c:	21 f4       	brne	.+8      	; 0x2986 <HLCD_PrintString+0x48>
			HLCD_voidSetDDRAM_Address(0x40);
    297e:	80 e4       	ldi	r24, 0x40	; 64
    2980:	0e 94 74 13 	call	0x26e8	; 0x26e8 <HLCD_voidSetDDRAM_Address>
    2984:	0d c0       	rjmp	.+26     	; 0x29a0 <HLCD_PrintString+0x62>
		} else if (count == 32) {
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	80 32       	cpi	r24, 0x20	; 32
    298c:	91 05       	cpc	r25, r1
    298e:	41 f4       	brne	.+16     	; 0x29a0 <HLCD_PrintString+0x62>
			HLCD_voidCommand(LCD_Clear_Screen);
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <HLCD_voidCommand>
			HLCD_voidSetDDRAM_Address(0);
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	0e 94 74 13 	call	0x26e8	; 0x26e8 <HLCD_voidSetDDRAM_Address>
			count = 0;
    299c:	1a 82       	std	Y+2, r1	; 0x02
    299e:	19 82       	std	Y+1, r1	; 0x01
}

void HLCD_PrintString(u8_t *string)
{
	int count = 0;
	while (*string > 0) {
    29a0:	eb 81       	ldd	r30, Y+3	; 0x03
    29a2:	fc 81       	ldd	r31, Y+4	; 0x04
    29a4:	80 81       	ld	r24, Z
    29a6:	88 23       	and	r24, r24
    29a8:	a9 f6       	brne	.-86     	; 0x2954 <HLCD_PrintString+0x16>
			HLCD_voidCommand(LCD_Clear_Screen);
			HLCD_voidSetDDRAM_Address(0);
			count = 0;
		}
	}
}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <LCD_display_number>:

void LCD_display_number(int number)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	27 97       	sbiw	r28, 0x07	; 7
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	9f 83       	std	Y+7, r25	; 0x07
    29ce:	8e 83       	std	Y+6, r24	; 0x06
	char str[5];

	itoa(number , str ,10);
    29d0:	8e 81       	ldd	r24, Y+6	; 0x06
    29d2:	9f 81       	ldd	r25, Y+7	; 0x07
    29d4:	9e 01       	movw	r18, r28
    29d6:	2f 5f       	subi	r18, 0xFF	; 255
    29d8:	3f 4f       	sbci	r19, 0xFF	; 255
    29da:	b9 01       	movw	r22, r18
    29dc:	4a e0       	ldi	r20, 0x0A	; 10
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <itoa>
	HLCD_PrintString(str);
    29e4:	ce 01       	movw	r24, r28
    29e6:	01 96       	adiw	r24, 0x01	; 1
    29e8:	0e 94 9f 14 	call	0x293e	; 0x293e <HLCD_PrintString>
}
    29ec:	27 96       	adiw	r28, 0x07	; 7
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <HLCD_GOTO_XY>:

void HLCD_GOTO_XY(u8_t line, u8_t position) {
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <HLCD_GOTO_XY+0x6>
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1) {
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	39 f4       	brne	.+14     	; 0x2a20 <HLCD_GOTO_XY+0x22>
		if (position < 16 && position >= 0) {
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	80 31       	cpi	r24, 0x10	; 16
    2a16:	20 f4       	brcc	.+8      	; 0x2a20 <HLCD_GOTO_XY+0x22>
			HLCD_voidSetDDRAM_Address(LCD_FIRST_ROW + position-1);
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	81 58       	subi	r24, 0x81	; 129
    2a1c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <HLCD_voidSetDDRAM_Address>
		}
	}
	if (line == 2) {
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	82 30       	cpi	r24, 0x02	; 2
    2a24:	39 f4       	brne	.+14     	; 0x2a34 <HLCD_GOTO_XY+0x36>
		if (position < 16 && position >= 0) {
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	80 31       	cpi	r24, 0x10	; 16
    2a2a:	20 f4       	brcc	.+8      	; 0x2a34 <HLCD_GOTO_XY+0x36>
			HLCD_voidSetDDRAM_Address(LCD_SECOND_ROW + position -1);
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	81 54       	subi	r24, 0x41	; 65
    2a30:	0e 94 74 13 	call	0x26e8	; 0x26e8 <HLCD_voidSetDDRAM_Address>
		}
	}
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <Keypad_init>:
#include "KeyPade_interface.h"
#include "KeyPade_private.h"


void Keypad_init()
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(KeyPade_PORT , R1 ,INPUT);
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R1 ,HIGH);
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	41 e0       	ldi	r20, 0x01	; 1
    2a56:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R2 ,INPUT);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R2 ,HIGH);
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	61 e0       	ldi	r22, 0x01	; 1
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R3 ,INPUT);
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	62 e0       	ldi	r22, 0x02	; 2
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R3 ,HIGH);
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	62 e0       	ldi	r22, 0x02	; 2
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R4 ,INPUT);
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	63 e0       	ldi	r22, 0x03	; 3
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R4 ,HIGH);
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	63 e0       	ldi	r22, 0x03	; 3
    2a90:	41 e0       	ldi	r20, 0x01	; 1
    2a92:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , C1 ,OUTPUT);
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	64 e0       	ldi	r22, 0x04	; 4
    2a9a:	41 e0       	ldi	r20, 0x01	; 1
    2a9c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C2 ,OUTPUT);
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	65 e0       	ldi	r22, 0x05	; 5
    2aa4:	41 e0       	ldi	r20, 0x01	; 1
    2aa6:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C3 ,OUTPUT);
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	66 e0       	ldi	r22, 0x06	; 6
    2aae:	41 e0       	ldi	r20, 0x01	; 1
    2ab0:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C4 ,OUTPUT);
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	67 e0       	ldi	r22, 0x07	; 7
    2ab8:	41 e0       	ldi	r20, 0x01	; 1
    2aba:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>


}
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <Keypad_getkey>:

u8_t Keypad_getkey(void)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <Keypad_getkey+0x6>
    2aca:	0f 92       	push	r0
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
	for(u8_t COL = 0 ; COL<4 ;COL++)
    2ad0:	1a 82       	std	Y+2, r1	; 0x02
    2ad2:	60 c0       	rjmp	.+192    	; 0x2b94 <Keypad_getkey+0xd0>
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	88 2f       	mov	r24, r24
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	fc 01       	movw	r30, r24
    2ae0:	e0 58       	subi	r30, 0x80	; 128
    2ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	98 2f       	mov	r25, r24
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	69 2f       	mov	r22, r25
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>

		for(u8_t ROW = 0 ; ROW<4 ;ROW++)
    2af4:	19 82       	std	Y+1, r1	; 0x01
    2af6:	38 c0       	rjmp	.+112    	; 0x2b68 <Keypad_getkey+0xa4>
		{
			if(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0)
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	fc 01       	movw	r30, r24
    2b04:	e8 58       	subi	r30, 0x88	; 136
    2b06:	fe 4f       	sbci	r31, 0xFE	; 254
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	98 2f       	mov	r25, r24
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	69 2f       	mov	r22, r25
    2b12:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_u8GetBit>
    2b16:	88 23       	and	r24, r24
    2b18:	21 f5       	brne	.+72     	; 0x2b62 <Keypad_getkey+0x9e>
			{
				while(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0);
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	fc 01       	movw	r30, r24
    2b26:	e8 58       	subi	r30, 0x88	; 136
    2b28:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	98 2f       	mov	r25, r24
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	69 2f       	mov	r22, r25
    2b34:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_u8GetBit>
    2b38:	88 23       	and	r24, r24
    2b3a:	79 f3       	breq	.-34     	; 0x2b1a <Keypad_getkey+0x56>
				return digit[ROW][COL] ;
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	48 2f       	mov	r20, r24
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	ca 01       	movw	r24, r20
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	82 0f       	add	r24, r18
    2b54:	93 1f       	adc	r25, r19
    2b56:	fc 01       	movw	r30, r24
    2b58:	e8 57       	subi	r30, 0x78	; 120
    2b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
    2b60:	1f c0       	rjmp	.+62     	; 0x2ba0 <Keypad_getkey+0xdc>
{
	for(u8_t COL = 0 ; COL<4 ;COL++)
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);

		for(u8_t ROW = 0 ; ROW<4 ;ROW++)
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	8f 5f       	subi	r24, 0xFF	; 255
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	84 30       	cpi	r24, 0x04	; 4
    2b6c:	28 f2       	brcs	.-118    	; 0x2af8 <Keypad_getkey+0x34>
			{
				while(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0);
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e0 58       	subi	r30, 0x80	; 128
    2b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	98 2f       	mov	r25, r24
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	69 2f       	mov	r22, r25
    2b88:	41 e0       	ldi	r20, 0x01	; 1
    2b8a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>

}

u8_t Keypad_getkey(void)
{
	for(u8_t COL = 0 ; COL<4 ;COL++)
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	8f 5f       	subi	r24, 0xFF	; 255
    2b92:	8a 83       	std	Y+2, r24	; 0x02
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	84 30       	cpi	r24, 0x04	; 4
    2b98:	08 f4       	brcc	.+2      	; 0x2b9c <Keypad_getkey+0xd8>
    2b9a:	9c cf       	rjmp	.-200    	; 0x2ad4 <Keypad_getkey+0x10>
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
	}
	return -1;
    2b9c:	8f ef       	ldi	r24, 0xFF	; 255
    2b9e:	8b 83       	std	Y+3, r24	; 0x03
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <Button_Init>:
 */
#include "Button_config.h"
#include "Button_interface.h"
#include "Button_private.h"
void Button_Init(u8_t L_u8ButtonNum)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <Button_Init+0x6>
    2bb4:	0f 92       	push	r0
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	89 83       	std	Y+1, r24	; 0x01
   switch(L_u8ButtonNum)
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	3b 83       	std	Y+3, r19	; 0x03
    2bc4:	2a 83       	std	Y+2, r18	; 0x02
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bca:	81 30       	cpi	r24, 0x01	; 1
    2bcc:	91 05       	cpc	r25, r1
    2bce:	a1 f0       	breq	.+40     	; 0x2bf8 <Button_Init+0x4a>
    2bd0:	2a 81       	ldd	r18, Y+2	; 0x02
    2bd2:	3b 81       	ldd	r19, Y+3	; 0x03
    2bd4:	22 30       	cpi	r18, 0x02	; 2
    2bd6:	31 05       	cpc	r19, r1
    2bd8:	d1 f0       	breq	.+52     	; 0x2c0e <Button_Init+0x60>
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	01 f5       	brne	.+64     	; 0x2c22 <Button_Init+0x74>
   {
	case BUTTON1: DIO_u8SetPinDirection(BUTTON1_PORT , BUTTON1_PIN , INPUT);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON1_PORT ,BUTTON1_PIN ,HIGH);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    2bf6:	15 c0       	rjmp	.+42     	; 0x2c22 <Button_Init+0x74>
	              break ;
	case BUTTON2: DIO_u8SetPinDirection(BUTTON2_PORT , BUTTON2_PIN , INPUT);
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON2_PORT ,BUTTON2_PIN ,HIGH);
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	61 e0       	ldi	r22, 0x01	; 1
    2c06:	41 e0       	ldi	r20, 0x01	; 1
    2c08:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
    2c0c:	0a c0       	rjmp	.+20     	; 0x2c22 <Button_Init+0x74>
	              break;
	case BUTTON3: DIO_u8SetPinDirection(BUTTON3_PORT , BUTTON3_PIN , INPUT);
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	62 e0       	ldi	r22, 0x02	; 2
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON3_PORT ,BUTTON3_PIN ,HIGH);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	62 e0       	ldi	r22, 0x02	; 2
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinValue>
	              break;
   }
}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <Button_u8GetButtonstatus>:

u8_t Button_u8GetButtonstatus(u8_t L_u8ButtonNum)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <Button_u8GetButtonstatus+0x6>
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <Button_u8GetButtonstatus+0x8>
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	8a 83       	std	Y+2, r24	; 0x02
	u8_t button_vall ;
	switch(L_u8ButtonNum)
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	28 2f       	mov	r18, r24
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	3c 83       	std	Y+4, r19	; 0x04
    2c44:	2b 83       	std	Y+3, r18	; 0x03
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	81 30       	cpi	r24, 0x01	; 1
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	79 f0       	breq	.+30     	; 0x2c6e <Button_u8GetButtonstatus+0x40>
    2c50:	2b 81       	ldd	r18, Y+3	; 0x03
    2c52:	3c 81       	ldd	r19, Y+4	; 0x04
    2c54:	22 30       	cpi	r18, 0x02	; 2
    2c56:	31 05       	cpc	r19, r1
    2c58:	81 f0       	breq	.+32     	; 0x2c7a <Button_u8GetButtonstatus+0x4c>
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	89 f4       	brne	.+34     	; 0x2c84 <Button_u8GetButtonstatus+0x56>
	{
	case BUTTON1:button_vall = DIO_u8GetBit(BUTTON1_PORT , BUTTON1_PIN); break ;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_u8GetBit>
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	0b c0       	rjmp	.+22     	; 0x2c84 <Button_u8GetButtonstatus+0x56>
	case BUTTON2:button_vall = DIO_u8GetBit(BUTTON2_PORT , BUTTON2_PIN); break ;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	61 e0       	ldi	r22, 0x01	; 1
    2c72:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_u8GetBit>
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	05 c0       	rjmp	.+10     	; 0x2c84 <Button_u8GetButtonstatus+0x56>
	case BUTTON3:button_vall = DIO_u8GetBit(BUTTON3_PORT , BUTTON3_PIN); break ;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	62 e0       	ldi	r22, 0x02	; 2
    2c7e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_u8GetBit>
    2c82:	89 83       	std	Y+1, r24	; 0x01
	}
	return button_vall ;
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <Button_voidWaitForButton>:
void Button_voidWaitForButton(u8_t L_u8ButtonNum)
{
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	89 83       	std	Y+1, r24	; 0x01
     while(1)
     {
   	  if(Button_u8GetButtonstatus(L_u8ButtonNum)==0)
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <Button_u8GetButtonstatus>
    2ca6:	88 23       	and	r24, r24
    2ca8:	d9 f7       	brne	.-10     	; 0x2ca0 <Button_voidWaitForButton+0xc>
   	  {
   		 while(Button_u8GetButtonstatus(L_u8ButtonNum)==0);
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <Button_u8GetButtonstatus>
    2cb0:	88 23       	and	r24, r24
    2cb2:	d9 f3       	breq	.-10     	; 0x2caa <Button_voidWaitForButton+0x16>
   		 break ;
   	  }
     }
    2cb4:	0f 90       	pop	r0
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <main>:




int main()
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
  Servo_Init();
    2cc4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <Servo_Init>
  Servo_SetAngle(45);
    2cc8:	8d e2       	ldi	r24, 0x2D	; 45
    2cca:	0e 94 0b 10 	call	0x2016	; 0x2016 <Servo_SetAngle>
    2cce:	ff cf       	rjmp	.-2      	; 0x2cce <main+0x12>

00002cd0 <__mulsi3>:
    2cd0:	62 9f       	mul	r22, r18
    2cd2:	d0 01       	movw	r26, r0
    2cd4:	73 9f       	mul	r23, r19
    2cd6:	f0 01       	movw	r30, r0
    2cd8:	82 9f       	mul	r24, r18
    2cda:	e0 0d       	add	r30, r0
    2cdc:	f1 1d       	adc	r31, r1
    2cde:	64 9f       	mul	r22, r20
    2ce0:	e0 0d       	add	r30, r0
    2ce2:	f1 1d       	adc	r31, r1
    2ce4:	92 9f       	mul	r25, r18
    2ce6:	f0 0d       	add	r31, r0
    2ce8:	83 9f       	mul	r24, r19
    2cea:	f0 0d       	add	r31, r0
    2cec:	74 9f       	mul	r23, r20
    2cee:	f0 0d       	add	r31, r0
    2cf0:	65 9f       	mul	r22, r21
    2cf2:	f0 0d       	add	r31, r0
    2cf4:	99 27       	eor	r25, r25
    2cf6:	72 9f       	mul	r23, r18
    2cf8:	b0 0d       	add	r27, r0
    2cfa:	e1 1d       	adc	r30, r1
    2cfc:	f9 1f       	adc	r31, r25
    2cfe:	63 9f       	mul	r22, r19
    2d00:	b0 0d       	add	r27, r0
    2d02:	e1 1d       	adc	r30, r1
    2d04:	f9 1f       	adc	r31, r25
    2d06:	bd 01       	movw	r22, r26
    2d08:	cf 01       	movw	r24, r30
    2d0a:	11 24       	eor	r1, r1
    2d0c:	08 95       	ret

00002d0e <__udivmodsi4>:
    2d0e:	a1 e2       	ldi	r26, 0x21	; 33
    2d10:	1a 2e       	mov	r1, r26
    2d12:	aa 1b       	sub	r26, r26
    2d14:	bb 1b       	sub	r27, r27
    2d16:	fd 01       	movw	r30, r26
    2d18:	0d c0       	rjmp	.+26     	; 0x2d34 <__udivmodsi4_ep>

00002d1a <__udivmodsi4_loop>:
    2d1a:	aa 1f       	adc	r26, r26
    2d1c:	bb 1f       	adc	r27, r27
    2d1e:	ee 1f       	adc	r30, r30
    2d20:	ff 1f       	adc	r31, r31
    2d22:	a2 17       	cp	r26, r18
    2d24:	b3 07       	cpc	r27, r19
    2d26:	e4 07       	cpc	r30, r20
    2d28:	f5 07       	cpc	r31, r21
    2d2a:	20 f0       	brcs	.+8      	; 0x2d34 <__udivmodsi4_ep>
    2d2c:	a2 1b       	sub	r26, r18
    2d2e:	b3 0b       	sbc	r27, r19
    2d30:	e4 0b       	sbc	r30, r20
    2d32:	f5 0b       	sbc	r31, r21

00002d34 <__udivmodsi4_ep>:
    2d34:	66 1f       	adc	r22, r22
    2d36:	77 1f       	adc	r23, r23
    2d38:	88 1f       	adc	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	1a 94       	dec	r1
    2d3e:	69 f7       	brne	.-38     	; 0x2d1a <__udivmodsi4_loop>
    2d40:	60 95       	com	r22
    2d42:	70 95       	com	r23
    2d44:	80 95       	com	r24
    2d46:	90 95       	com	r25
    2d48:	9b 01       	movw	r18, r22
    2d4a:	ac 01       	movw	r20, r24
    2d4c:	bd 01       	movw	r22, r26
    2d4e:	cf 01       	movw	r24, r30
    2d50:	08 95       	ret

00002d52 <__prologue_saves__>:
    2d52:	2f 92       	push	r2
    2d54:	3f 92       	push	r3
    2d56:	4f 92       	push	r4
    2d58:	5f 92       	push	r5
    2d5a:	6f 92       	push	r6
    2d5c:	7f 92       	push	r7
    2d5e:	8f 92       	push	r8
    2d60:	9f 92       	push	r9
    2d62:	af 92       	push	r10
    2d64:	bf 92       	push	r11
    2d66:	cf 92       	push	r12
    2d68:	df 92       	push	r13
    2d6a:	ef 92       	push	r14
    2d6c:	ff 92       	push	r15
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	ca 1b       	sub	r28, r26
    2d7c:	db 0b       	sbc	r29, r27
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	09 94       	ijmp

00002d8a <__epilogue_restores__>:
    2d8a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d8c:	39 88       	ldd	r3, Y+17	; 0x11
    2d8e:	48 88       	ldd	r4, Y+16	; 0x10
    2d90:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d92:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d94:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d96:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d98:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d9c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d9e:	c8 84       	ldd	r12, Y+8	; 0x08
    2da0:	df 80       	ldd	r13, Y+7	; 0x07
    2da2:	ee 80       	ldd	r14, Y+6	; 0x06
    2da4:	fd 80       	ldd	r15, Y+5	; 0x05
    2da6:	0c 81       	ldd	r16, Y+4	; 0x04
    2da8:	1b 81       	ldd	r17, Y+3	; 0x03
    2daa:	aa 81       	ldd	r26, Y+2	; 0x02
    2dac:	b9 81       	ldd	r27, Y+1	; 0x01
    2dae:	ce 0f       	add	r28, r30
    2db0:	d1 1d       	adc	r29, r1
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	ed 01       	movw	r28, r26
    2dbe:	08 95       	ret

00002dc0 <itoa>:
    2dc0:	fb 01       	movw	r30, r22
    2dc2:	9f 01       	movw	r18, r30
    2dc4:	e8 94       	clt
    2dc6:	42 30       	cpi	r20, 0x02	; 2
    2dc8:	c4 f0       	brlt	.+48     	; 0x2dfa <itoa+0x3a>
    2dca:	45 32       	cpi	r20, 0x25	; 37
    2dcc:	b4 f4       	brge	.+44     	; 0x2dfa <itoa+0x3a>
    2dce:	4a 30       	cpi	r20, 0x0A	; 10
    2dd0:	29 f4       	brne	.+10     	; 0x2ddc <itoa+0x1c>
    2dd2:	97 fb       	bst	r25, 7
    2dd4:	1e f4       	brtc	.+6      	; 0x2ddc <itoa+0x1c>
    2dd6:	90 95       	com	r25
    2dd8:	81 95       	neg	r24
    2dda:	9f 4f       	sbci	r25, 0xFF	; 255
    2ddc:	64 2f       	mov	r22, r20
    2dde:	77 27       	eor	r23, r23
    2de0:	0e 94 11 17 	call	0x2e22	; 0x2e22 <__udivmodhi4>
    2de4:	80 5d       	subi	r24, 0xD0	; 208
    2de6:	8a 33       	cpi	r24, 0x3A	; 58
    2de8:	0c f0       	brlt	.+2      	; 0x2dec <itoa+0x2c>
    2dea:	89 5d       	subi	r24, 0xD9	; 217
    2dec:	81 93       	st	Z+, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	a1 f7       	brne	.-24     	; 0x2ddc <itoa+0x1c>
    2df4:	16 f4       	brtc	.+4      	; 0x2dfa <itoa+0x3a>
    2df6:	5d e2       	ldi	r21, 0x2D	; 45
    2df8:	51 93       	st	Z+, r21
    2dfa:	10 82       	st	Z, r1
    2dfc:	c9 01       	movw	r24, r18
    2dfe:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <strrev>

00002e02 <strrev>:
    2e02:	dc 01       	movw	r26, r24
    2e04:	fc 01       	movw	r30, r24
    2e06:	67 2f       	mov	r22, r23
    2e08:	71 91       	ld	r23, Z+
    2e0a:	77 23       	and	r23, r23
    2e0c:	e1 f7       	brne	.-8      	; 0x2e06 <strrev+0x4>
    2e0e:	32 97       	sbiw	r30, 0x02	; 2
    2e10:	04 c0       	rjmp	.+8      	; 0x2e1a <strrev+0x18>
    2e12:	7c 91       	ld	r23, X
    2e14:	6d 93       	st	X+, r22
    2e16:	70 83       	st	Z, r23
    2e18:	62 91       	ld	r22, -Z
    2e1a:	ae 17       	cp	r26, r30
    2e1c:	bf 07       	cpc	r27, r31
    2e1e:	c8 f3       	brcs	.-14     	; 0x2e12 <strrev+0x10>
    2e20:	08 95       	ret

00002e22 <__udivmodhi4>:
    2e22:	aa 1b       	sub	r26, r26
    2e24:	bb 1b       	sub	r27, r27
    2e26:	51 e1       	ldi	r21, 0x11	; 17
    2e28:	07 c0       	rjmp	.+14     	; 0x2e38 <__udivmodhi4_ep>

00002e2a <__udivmodhi4_loop>:
    2e2a:	aa 1f       	adc	r26, r26
    2e2c:	bb 1f       	adc	r27, r27
    2e2e:	a6 17       	cp	r26, r22
    2e30:	b7 07       	cpc	r27, r23
    2e32:	10 f0       	brcs	.+4      	; 0x2e38 <__udivmodhi4_ep>
    2e34:	a6 1b       	sub	r26, r22
    2e36:	b7 0b       	sbc	r27, r23

00002e38 <__udivmodhi4_ep>:
    2e38:	88 1f       	adc	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	5a 95       	dec	r21
    2e3e:	a9 f7       	brne	.-22     	; 0x2e2a <__udivmodhi4_loop>
    2e40:	80 95       	com	r24
    2e42:	90 95       	com	r25
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	08 95       	ret

00002e4a <_exit>:
    2e4a:	f8 94       	cli

00002e4c <__stop_program>:
    2e4c:	ff cf       	rjmp	.-2      	; 0x2e4c <__stop_program>
