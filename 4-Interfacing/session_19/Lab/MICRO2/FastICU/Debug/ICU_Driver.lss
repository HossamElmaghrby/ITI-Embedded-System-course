
ICU_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00003764  000037f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  008000ba  008000ba  00003852  2**0
                  ALLOC
  3 .debug_aranges 00000520  00000000  00000000  00003852  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000913  00000000  00000000  00003d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039d2  00000000  00000000  00004685  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bda  00000000  00000000  00008057  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003009  00000000  00000000  00009c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e0  00000000  00000000  0000cc3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b88  00000000  00000000  0000d31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000dea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000388  00000000  00000000  0000e732  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_1>
       8:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__vector_2>
       c:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_10>
      2c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3e       	cpi	r26, 0xE7	; 231
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 1a 	call	0x3586	; 0x3586 <main>
      8a:	0c 94 b0 1b 	jmp	0x3760	; 0x3760 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIM1_voidInit>:
void (* tim1_callback_ptr)(void);

///////////////////////////////////////
// Normal Mode
void TIM1_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
     ca6:	ec e4       	ldi	r30, 0x4C	; 76
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	11 82       	std	Z+1, r1	; 0x01
     cac:	10 82       	st	Z, r1

	/* Select Normal (OVF) Mode */
	CLEAR_BIT(TCCR1A_Register, WGM10);
     cae:	af e4       	ldi	r26, 0x4F	; 79
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ef e4       	ldi	r30, 0x4F	; 79
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8e 7f       	andi	r24, 0xFE	; 254
     cba:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_Register, WGM11);
     cbc:	af e4       	ldi	r26, 0x4F	; 79
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ef e4       	ldi	r30, 0x4F	; 79
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8d 7f       	andi	r24, 0xFD	; 253
     cc8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM12);
     cca:	ae e4       	ldi	r26, 0x4E	; 78
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	87 7f       	andi	r24, 0xF7	; 247
     cd6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM13);
     cd8:	ae e4       	ldi	r26, 0x4E	; 78
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	ee e4       	ldi	r30, 0x4E	; 78
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8f 7e       	andi	r24, 0xEF	; 239
     ce4:	8c 93       	st	X, r24


	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
     ce6:	ae e4       	ldi	r26, 0x4E	; 78
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ee e4       	ldi	r30, 0x4E	; 78
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8e 7f       	andi	r24, 0xFE	; 254
     cf2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
     cf4:	ae e4       	ldi	r26, 0x4E	; 78
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ee e4       	ldi	r30, 0x4E	; 78
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
     d02:	ae e4       	ldi	r26, 0x4E	; 78
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ee e4       	ldi	r30, 0x4E	; 78
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8b 7f       	andi	r24, 0xFB	; 251
     d0e:	8c 93       	st	X, r24

}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <TIM1_voidICUInit>:

///////////////////////////////////////
// ICU Mode

void TIM1_voidICUInit(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
     d1e:	ec e4       	ldi	r30, 0x4C	; 76
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	11 82       	std	Z+1, r1	; 0x01
     d24:	10 82       	st	Z, r1

	/* Select Normal (OVF) Mode */
	CLEAR_BIT(TCCR1A_Register, WGM10);
     d26:	af e4       	ldi	r26, 0x4F	; 79
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ef e4       	ldi	r30, 0x4F	; 79
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8e 7f       	andi	r24, 0xFE	; 254
     d32:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_Register, WGM11);
     d34:	af e4       	ldi	r26, 0x4F	; 79
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ef e4       	ldi	r30, 0x4F	; 79
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8d 7f       	andi	r24, 0xFD	; 253
     d40:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM12);
     d42:	ae e4       	ldi	r26, 0x4E	; 78
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ee e4       	ldi	r30, 0x4E	; 78
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	87 7f       	andi	r24, 0xF7	; 247
     d4e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM13);
     d50:	ae e4       	ldi	r26, 0x4E	; 78
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ee e4       	ldi	r30, 0x4E	; 78
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 7e       	andi	r24, 0xEF	; 239
     d5c:	8c 93       	st	X, r24

	/* Enable Input Capture Interrupt */
	SET_BIT(TIMSK_Register, TICIE1);
     d5e:	a9 e5       	ldi	r26, 0x59	; 89
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e9 e5       	ldi	r30, 0x59	; 89
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 62       	ori	r24, 0x20	; 32
     d6a:	8c 93       	st	X, r24

	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
     d6c:	ae e4       	ldi	r26, 0x4E	; 78
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ee e4       	ldi	r30, 0x4E	; 78
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
     d7a:	ae e4       	ldi	r26, 0x4E	; 78
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	ee e4       	ldi	r30, 0x4E	; 78
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	82 60       	ori	r24, 0x02	; 2
     d86:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
     d88:	ae e4       	ldi	r26, 0x4E	; 78
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ee e4       	ldi	r30, 0x4E	; 78
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8b 7f       	andi	r24, 0xFB	; 251
     d94:	8c 93       	st	X, r24

}
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <TIM1_SetEdge>:

void TIM1_SetEdge(u8 edge)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <TIM1_SetEdge+0x6>
     da2:	0f 92       	push	r0
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	89 83       	std	Y+1, r24	; 0x01
	switch(edge)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3b 83       	std	Y+3, r19	; 0x03
     db2:	2a 83       	std	Y+2, r18	; 0x02
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <TIM1_SetEdge+0x3a>
     dbc:	2a 81       	ldd	r18, Y+2	; 0x02
     dbe:	3b 81       	ldd	r19, Y+3	; 0x03
     dc0:	21 30       	cpi	r18, 0x01	; 1
     dc2:	31 05       	cpc	r19, r1
     dc4:	79 f4       	brne	.+30     	; 0xde4 <TIM1_SetEdge+0x48>
	{
	case ICU_EDGE_FALLING: CLEAR_BIT(TCCR1B_Register, ICES1); break;
     dc6:	ae e4       	ldi	r26, 0x4E	; 78
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ee e4       	ldi	r30, 0x4E	; 78
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 7b       	andi	r24, 0xBF	; 191
     dd2:	8c 93       	st	X, r24
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <TIM1_SetEdge+0x48>
	case ICU_EDGE_RISING: SET_BIT(TCCR1B_Register, ICES1); break;
     dd6:	ae e4       	ldi	r26, 0x4E	; 78
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ee e4       	ldi	r30, 0x4E	; 78
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	80 64       	ori	r24, 0x40	; 64
     de2:	8c 93       	st	X, r24
	}
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <TIM1_GetICRValue>:

u16 TIM1_GetICRValue(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	return ICR1_Register;
     df8:	e6 e4       	ldi	r30, 0x46	; 70
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
}
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <TIM1_setCallback>:

void TIM1_setCallback(void (* ptr)(void))
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <TIM1_setCallback+0x6>
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
	tim1_callback_ptr = ptr;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	90 93 d4 00 	sts	0x00D4, r25
     e1c:	80 93 d3 00 	sts	0x00D3, r24
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <__vector_6>:


void __vector_6(void)
{
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	tim1_callback_ptr();
     e54:	e0 91 d3 00 	lds	r30, 0x00D3
     e58:	f0 91 d4 00 	lds	r31, 0x00D4
     e5c:	09 95       	icall
}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <TIM1_GetCounterValueUs>:

////////////////////////////////////////////////
/// Normal

u16 TIM1_GetCounterValueUs(void)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_Register;
     e8c:	ec e4       	ldi	r30, 0x4C	; 76
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <TIM1_ClearCounterValue>:

void TIM1_ClearCounterValue(void)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
     ea2:	ec e4       	ldi	r30, 0x4C	; 76
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	11 82       	std	Z+1, r1	; 0x01
     ea8:	10 82       	st	Z, r1
}
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <TIM1_voidFPWMInit>:


///////////////////////////////////////
// PWM Mode
void TIM1_voidFPWMInit(u16 period_us)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <TIM1_voidFPWMInit+0x6>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Register = 0;
     ebe:	ec e4       	ldi	r30, 0x4C	; 76
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	11 82       	std	Z+1, r1	; 0x01
     ec4:	10 82       	st	Z, r1

	/* Select Mode 14 (Fast PWM) */
	CLEAR_BIT(TCCR1A_Register, WGM10);
     ec6:	af e4       	ldi	r26, 0x4F	; 79
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ef e4       	ldi	r30, 0x4F	; 79
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8e 7f       	andi	r24, 0xFE	; 254
     ed2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register, WGM11);
     ed4:	af e4       	ldi	r26, 0x4F	; 79
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ef e4       	ldi	r30, 0x4F	; 79
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, WGM12);
     ee2:	ae e4       	ldi	r26, 0x4E	; 78
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ee e4       	ldi	r30, 0x4E	; 78
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, WGM13);
     ef0:	ae e4       	ldi	r26, 0x4E	; 78
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ee e4       	ldi	r30, 0x4E	; 78
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	8c 93       	st	X, r24

	/* Select OC1A mode */
	TCCR1A_Register &= ~(0b11 << COM1A0);
     efe:	af e4       	ldi	r26, 0x4F	; 79
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ef e4       	ldi	r30, 0x4F	; 79
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 73       	andi	r24, 0x3F	; 63
     f0a:	8c 93       	st	X, r24
	TCCR1A_Register |= TIM1_PWM_OC1A_MODE << COM1A0;
     f0c:	af e4       	ldi	r26, 0x4F	; 79
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ef e4       	ldi	r30, 0x4F	; 79
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	8c 93       	st	X, r24

	/* Select OC1B mode */
	TCCR1A_Register &= ~(0b11 << COM1B0);
     f1a:	af e4       	ldi	r26, 0x4F	; 79
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ef e4       	ldi	r30, 0x4F	; 79
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 7c       	andi	r24, 0xCF	; 207
     f26:	8c 93       	st	X, r24
	TCCR1A_Register |= TIM1_PWM_OC1B_MODE << COM1B0;
     f28:	af e4       	ldi	r26, 0x4F	; 79
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ef e4       	ldi	r30, 0x4F	; 79
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 63       	ori	r24, 0x30	; 48
     f34:	8c 93       	st	X, r24

	ICR1_Register = period_us;
     f36:	e6 e4       	ldi	r30, 0x46	; 70
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	9a 81       	ldd	r25, Y+2	; 0x02
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24

	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
     f42:	ae e4       	ldi	r26, 0x4E	; 78
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
     f50:	ae e4       	ldi	r26, 0x4E	; 78
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee e4       	ldi	r30, 0x4E	; 78
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
     f5e:	ae e4       	ldi	r26, 0x4E	; 78
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ee e4       	ldi	r30, 0x4E	; 78
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8b 7f       	andi	r24, 0xFB	; 251
     f6a:	8c 93       	st	X, r24
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <TIM1_setDutyCycle>:

void TIM1_setDutyCycle(u8 channel, u16 value_us)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <TIM1_setDutyCycle+0x6>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <TIM1_setDutyCycle+0x8>
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	7b 83       	std	Y+3, r23	; 0x03
     f88:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel)
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3d 83       	std	Y+5, r19	; 0x05
     f92:	2c 83       	std	Y+4, r18	; 0x04
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <TIM1_setDutyCycle+0x32>
     f9c:	2c 81       	ldd	r18, Y+4	; 0x04
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	31 05       	cpc	r19, r1
     fa4:	41 f0       	breq	.+16     	; 0xfb6 <TIM1_setDutyCycle+0x40>
     fa6:	0d c0       	rjmp	.+26     	; 0xfc2 <TIM1_setDutyCycle+0x4c>
	{
	case PWM_OCR1A:	OCR1A_Register = value_us; break;
     fa8:	ea e4       	ldi	r30, 0x4A	; 74
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <TIM1_setDutyCycle+0x4c>
	case PWM_OCR1B:	OCR1B_Register = value_us; break;
     fb6:	e8 e4       	ldi	r30, 0x48	; 72
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24
	}
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <TIM0_Init>:

void (* func_ptr_ovf)(void);
void (* func_ptr_ctc)(void);

void TIM0_Init(void)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62

	// Enable Overflow Interrupt
	SET_BIT(TIMSK_Register, TOIE0);
#elif TIM0_MODE == TIM_CTC
	// Normal Mode
	CLEAR_BIT(TCCR0_Register, WGM00);
     fda:	a3 e5       	ldi	r26, 0x53	; 83
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e3 e5       	ldi	r30, 0x53	; 83
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7b       	andi	r24, 0xBF	; 191
     fe6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, WGM01);
     fe8:	a3 e5       	ldi	r26, 0x53	; 83
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e3 e5       	ldi	r30, 0x53	; 83
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	88 60       	ori	r24, 0x08	; 8
     ff4:	8c 93       	st	X, r24

	// Enable CTC Interrupt
	SET_BIT(TIMSK_Register, OCIE0);
     ff6:	a9 e5       	ldi	r26, 0x59	; 89
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e9 e5       	ldi	r30, 0x59	; 89
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	82 60       	ori	r24, 0x02	; 2
    1002:	8c 93       	st	X, r24
#endif


}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <TIM0_SetValueUS>:

void TIM0_SetValueUS(u32 us)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <TIM0_SetValueUS+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <TIM0_SetValueUS+0x8>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	6a 83       	std	Y+2, r22	; 0x02
    101a:	7b 83       	std	Y+3, r23	; 0x03
    101c:	8c 83       	std	Y+4, r24	; 0x04
    101e:	9d 83       	std	Y+5, r25	; 0x05
	u32 mod = us%256;
	preload = 256 - mod;

	TCNT0_Register = preload;
#elif TIM0_MODE == TIM_CTC
	for(u8 x = 255; x > 0; x--)
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	32 c0       	rjmp	.+100    	; 0x108a <TIM0_SetValueUS+0x80>
	{
		if(us%x == 0)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	ac 81       	ldd	r26, Y+4	; 0x04
    1036:	bd 81       	ldd	r27, Y+5	; 0x05
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__udivmodsi4>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	a1 05       	cpc	r26, r1
    1048:	b1 05       	cpc	r27, r1
    104a:	e1 f4       	brne	.+56     	; 0x1084 <TIM0_SetValueUS+0x7a>
		{
			OCR0_Register = x;
    104c:	ec e5       	ldi	r30, 0x5C	; 92
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 83       	st	Z, r24
			NoCounts = us/x;
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	ac 81       	ldd	r26, Y+4	; 0x04
    1064:	bd 81       	ldd	r27, Y+5	; 0x05
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 12 1b 	call	0x3624	; 0x3624 <__udivmodsi4>
    106e:	da 01       	movw	r26, r20
    1070:	c9 01       	movw	r24, r18
    1072:	80 93 db 00 	sts	0x00DB, r24
    1076:	90 93 dc 00 	sts	0x00DC, r25
    107a:	a0 93 dd 00 	sts	0x00DD, r26
    107e:	b0 93 de 00 	sts	0x00DE, r27
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <TIM0_SetValueUS+0x86>
	u32 mod = us%256;
	preload = 256 - mod;

	TCNT0_Register = preload;
#elif TIM0_MODE == TIM_CTC
	for(u8 x = 255; x > 0; x--)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	81 50       	subi	r24, 0x01	; 1
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	88 23       	and	r24, r24
    108e:	59 f6       	brne	.-106    	; 0x1026 <TIM0_SetValueUS+0x1c>
		}
	}
#endif

	// Set Clock Source (Prescaler: 8)
	CLEAR_BIT(TCCR0_Register, CS00);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8e 7f       	andi	r24, 0xFE	; 254
    109c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, CS01);
    109e:	a3 e5       	ldi	r26, 0x53	; 83
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e3 e5       	ldi	r30, 0x53	; 83
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS02);
    10ac:	a3 e5       	ldi	r26, 0x53	; 83
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e3 e5       	ldi	r30, 0x53	; 83
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8b 7f       	andi	r24, 0xFB	; 251
    10b8:	8c 93       	st	X, r24
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <TIM0_Disable>:

void TIM0_Disable(void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer (No clk)
	CLEAR_BIT(TCCR0_Register, CS00);
    10d2:	a3 e5       	ldi	r26, 0x53	; 83
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e3 e5       	ldi	r30, 0x53	; 83
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS01);
    10e0:	a3 e5       	ldi	r26, 0x53	; 83
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e3 e5       	ldi	r30, 0x53	; 83
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS02);
    10ee:	a3 e5       	ldi	r26, 0x53	; 83
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e3 e5       	ldi	r30, 0x53	; 83
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8b 7f       	andi	r24, 0xFB	; 251
    10fa:	8c 93       	st	X, r24
}
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <TIM0_SetOVFCallback>:

void TIM0_SetOVFCallback(void (* ptr)(void))
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <TIM0_SetOVFCallback+0x6>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
	func_ptr_ovf = ptr;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	90 93 da 00 	sts	0x00DA, r25
    1118:	80 93 d9 00 	sts	0x00D9, r24
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <TIM0_SetCTCCallback>:

void TIM0_SetCTCCallback(void (* ptr)(void))
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <TIM0_SetCTCCallback+0x6>
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
	func_ptr_ctc = ptr;
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	90 93 e0 00 	sts	0x00E0, r25
    113c:	80 93 df 00 	sts	0x00DF, r24
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <__vector_11>:

void __vector_11(void)
{
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	if(counter == NoCounts)
    1174:	20 91 ba 00 	lds	r18, 0x00BA
    1178:	30 91 bb 00 	lds	r19, 0x00BB
    117c:	40 91 bc 00 	lds	r20, 0x00BC
    1180:	50 91 bd 00 	lds	r21, 0x00BD
    1184:	80 91 db 00 	lds	r24, 0x00DB
    1188:	90 91 dc 00 	lds	r25, 0x00DC
    118c:	a0 91 dd 00 	lds	r26, 0x00DD
    1190:	b0 91 de 00 	lds	r27, 0x00DE
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	4a 07       	cpc	r20, r26
    119a:	5b 07       	cpc	r21, r27
    119c:	c1 f4       	brne	.+48     	; 0x11ce <__vector_11+0x84>
	{
		func_ptr_ovf();
    119e:	e0 91 d9 00 	lds	r30, 0x00D9
    11a2:	f0 91 da 00 	lds	r31, 0x00DA
    11a6:	09 95       	icall
		counter = 0;
    11a8:	10 92 ba 00 	sts	0x00BA, r1
    11ac:	10 92 bb 00 	sts	0x00BB, r1
    11b0:	10 92 bc 00 	sts	0x00BC, r1
    11b4:	10 92 bd 00 	sts	0x00BD, r1
		TCNT0_Register = preload;
    11b8:	e2 e5       	ldi	r30, 0x52	; 82
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 91 d5 00 	lds	r24, 0x00D5
    11c0:	90 91 d6 00 	lds	r25, 0x00D6
    11c4:	a0 91 d7 00 	lds	r26, 0x00D7
    11c8:	b0 91 d8 00 	lds	r27, 0x00D8
    11cc:	80 83       	st	Z, r24
	}
	counter++;
    11ce:	80 91 ba 00 	lds	r24, 0x00BA
    11d2:	90 91 bb 00 	lds	r25, 0x00BB
    11d6:	a0 91 bc 00 	lds	r26, 0x00BC
    11da:	b0 91 bd 00 	lds	r27, 0x00BD
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	a1 1d       	adc	r26, r1
    11e2:	b1 1d       	adc	r27, r1
    11e4:	80 93 ba 00 	sts	0x00BA, r24
    11e8:	90 93 bb 00 	sts	0x00BB, r25
    11ec:	a0 93 bc 00 	sts	0x00BC, r26
    11f0:	b0 93 bd 00 	sts	0x00BD, r27
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <__vector_10>:

void __vector_10(void)
{
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	if(counter == NoCounts)
    1244:	20 91 be 00 	lds	r18, 0x00BE
    1248:	30 91 bf 00 	lds	r19, 0x00BF
    124c:	40 91 c0 00 	lds	r20, 0x00C0
    1250:	50 91 c1 00 	lds	r21, 0x00C1
    1254:	80 91 db 00 	lds	r24, 0x00DB
    1258:	90 91 dc 00 	lds	r25, 0x00DC
    125c:	a0 91 dd 00 	lds	r26, 0x00DD
    1260:	b0 91 de 00 	lds	r27, 0x00DE
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	4a 07       	cpc	r20, r26
    126a:	5b 07       	cpc	r21, r27
    126c:	69 f4       	brne	.+26     	; 0x1288 <__vector_10+0x6e>
	{
		func_ptr_ctc();
    126e:	e0 91 df 00 	lds	r30, 0x00DF
    1272:	f0 91 e0 00 	lds	r31, 0x00E0
    1276:	09 95       	icall
		counter = 0;
    1278:	10 92 be 00 	sts	0x00BE, r1
    127c:	10 92 bf 00 	sts	0x00BF, r1
    1280:	10 92 c0 00 	sts	0x00C0, r1
    1284:	10 92 c1 00 	sts	0x00C1, r1
	}
	counter++;
    1288:	80 91 be 00 	lds	r24, 0x00BE
    128c:	90 91 bf 00 	lds	r25, 0x00BF
    1290:	a0 91 c0 00 	lds	r26, 0x00C0
    1294:	b0 91 c1 00 	lds	r27, 0x00C1
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	a1 1d       	adc	r26, r1
    129c:	b1 1d       	adc	r27, r1
    129e:	80 93 be 00 	sts	0x00BE, r24
    12a2:	90 93 bf 00 	sts	0x00BF, r25
    12a6:	a0 93 c0 00 	sts	0x00C0, r26
    12aa:	b0 93 c1 00 	sts	0x00C1, r27
}
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <GIE_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"


void GIE_Enable(void)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Register, I_Bit);
    12dc:	af e5       	ldi	r26, 0x5F	; 95
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ef e5       	ldi	r30, 0x5F	; 95
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 68       	ori	r24, 0x80	; 128
    12e8:	8c 93       	st	X, r24
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <GIE_Disable>:

void GIE_Disable(void)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_Register, I_Bit);
    12f8:	af e5       	ldi	r26, 0x5F	; 95
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ef e5       	ldi	r30, 0x5F	; 95
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8f 77       	andi	r24, 0x7F	; 127
    1304:	8c 93       	st	X, r24
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <EXTI_SetMode>:

}
*/

void EXTI_SetMode(u8 L_u8EXTINum, u8 L_u8Mode)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <EXTI_SetMode+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <EXTI_SetMode+0x8>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8EXTINum)
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3c 83       	std	Y+4, r19	; 0x04
    1324:	2b 83       	std	Y+3, r18	; 0x03
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	91 05       	cpc	r25, r1
    132e:	d9 f0       	breq	.+54     	; 0x1366 <EXTI_SetMode+0x5a>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	23 30       	cpi	r18, 0x03	; 3
    1336:	31 05       	cpc	r19, r1
    1338:	69 f1       	breq	.+90     	; 0x1394 <EXTI_SetMode+0x88>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	91 05       	cpc	r25, r1
    1342:	09 f0       	breq	.+2      	; 0x1346 <EXTI_SetMode+0x3a>
    1344:	44 c0       	rjmp	.+136    	; 0x13ce <EXTI_SetMode+0xc2>
	{
	case EXTI0:
		MCUCR_Register &= ~(0b11 << ISC00);
    1346:	a5 e5       	ldi	r26, 0x55	; 85
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e5 e5       	ldi	r30, 0x55	; 85
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8c 7f       	andi	r24, 0xFC	; 252
    1352:	8c 93       	st	X, r24
		MCUCR_Register |= L_u8Mode << ISC00;
    1354:	a5 e5       	ldi	r26, 0x55	; 85
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e5 e5       	ldi	r30, 0x55	; 85
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	90 81       	ld	r25, Z
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	89 2b       	or	r24, r25
    1362:	8c 93       	st	X, r24
    1364:	34 c0       	rjmp	.+104    	; 0x13ce <EXTI_SetMode+0xc2>
		break;
	case EXTI1:
		MCUCR_Register &= ~(0b11 << ISC10);
    1366:	a5 e5       	ldi	r26, 0x55	; 85
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e5       	ldi	r30, 0x55	; 85
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	83 7f       	andi	r24, 0xF3	; 243
    1372:	8c 93       	st	X, r24
		MCUCR_Register |= L_u8Mode << ISC10;
    1374:	a5 e5       	ldi	r26, 0x55	; 85
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e5 e5       	ldi	r30, 0x55	; 85
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	28 2f       	mov	r18, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	82 2b       	or	r24, r18
    1390:	8c 93       	st	X, r24
    1392:	1d c0       	rjmp	.+58     	; 0x13ce <EXTI_SetMode+0xc2>
		break;
	case EXTI2:
		CLEAR_BIT(MCUCSR_Register, ISC2);
    1394:	a4 e5       	ldi	r26, 0x54	; 84
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e4 e5       	ldi	r30, 0x54	; 84
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8f 7b       	andi	r24, 0xBF	; 191
    13a0:	8c 93       	st	X, r24
		MCUCSR_Register |= (1 & L_u8Mode) << ISC2;
    13a2:	a4 e5       	ldi	r26, 0x54	; 84
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e4 e5       	ldi	r30, 0x54	; 84
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	81 70       	andi	r24, 0x01	; 1
    13b6:	90 70       	andi	r25, 0x00	; 0
    13b8:	00 24       	eor	r0, r0
    13ba:	96 95       	lsr	r25
    13bc:	87 95       	ror	r24
    13be:	07 94       	ror	r0
    13c0:	96 95       	lsr	r25
    13c2:	87 95       	ror	r24
    13c4:	07 94       	ror	r0
    13c6:	98 2f       	mov	r25, r24
    13c8:	80 2d       	mov	r24, r0
    13ca:	82 2b       	or	r24, r18
    13cc:	8c 93       	st	X, r24
		break;
	}
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <EXTI_Enable>:


void EXTI_Enable(u8 L_u8EXTINum)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <EXTI_Enable+0x6>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTINum)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3b 83       	std	Y+3, r19	; 0x03
    13f2:	2a 83       	std	Y+2, r18	; 0x02
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	91 05       	cpc	r25, r1
    13fc:	91 f0       	breq	.+36     	; 0x1422 <EXTI_Enable+0x46>
    13fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1400:	3b 81       	ldd	r19, Y+3	; 0x03
    1402:	23 30       	cpi	r18, 0x03	; 3
    1404:	31 05       	cpc	r19, r1
    1406:	a9 f0       	breq	.+42     	; 0x1432 <EXTI_Enable+0x56>
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	9b 81       	ldd	r25, Y+3	; 0x03
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	b9 f4       	brne	.+46     	; 0x1440 <EXTI_Enable+0x64>
	{
	case EXTI0:	SET_BIT(GICR_Register, INT0); break;
    1412:	ab e5       	ldi	r26, 0x5B	; 91
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	eb e5       	ldi	r30, 0x5B	; 91
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 64       	ori	r24, 0x40	; 64
    141e:	8c 93       	st	X, r24
    1420:	0f c0       	rjmp	.+30     	; 0x1440 <EXTI_Enable+0x64>
	case EXTI1:	SET_BIT(GICR_Register, INT1); break;
    1422:	ab e5       	ldi	r26, 0x5B	; 91
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	eb e5       	ldi	r30, 0x5B	; 91
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	80 68       	ori	r24, 0x80	; 128
    142e:	8c 93       	st	X, r24
    1430:	07 c0       	rjmp	.+14     	; 0x1440 <EXTI_Enable+0x64>
	case EXTI2:	SET_BIT(GICR_Register, INT2); break;
    1432:	ab e5       	ldi	r26, 0x5B	; 91
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	eb e5       	ldi	r30, 0x5B	; 91
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 62       	ori	r24, 0x20	; 32
    143e:	8c 93       	st	X, r24
	}
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <EXTI_Disable>:


void EXTI_Disable(u8 L_u8EXTINum)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <EXTI_Disable+0x6>
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTINum)
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	3b 83       	std	Y+3, r19	; 0x03
    1462:	2a 83       	std	Y+2, r18	; 0x02
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	9b 81       	ldd	r25, Y+3	; 0x03
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	91 05       	cpc	r25, r1
    146c:	91 f0       	breq	.+36     	; 0x1492 <EXTI_Disable+0x46>
    146e:	2a 81       	ldd	r18, Y+2	; 0x02
    1470:	3b 81       	ldd	r19, Y+3	; 0x03
    1472:	23 30       	cpi	r18, 0x03	; 3
    1474:	31 05       	cpc	r19, r1
    1476:	a9 f0       	breq	.+42     	; 0x14a2 <EXTI_Disable+0x56>
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	9b 81       	ldd	r25, Y+3	; 0x03
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	b9 f4       	brne	.+46     	; 0x14b0 <EXTI_Disable+0x64>
	{
	case EXTI0:	CLEAR_BIT(GICR_Register, INT0); break;
    1482:	ab e5       	ldi	r26, 0x5B	; 91
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	eb e5       	ldi	r30, 0x5B	; 91
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8f 7b       	andi	r24, 0xBF	; 191
    148e:	8c 93       	st	X, r24
    1490:	0f c0       	rjmp	.+30     	; 0x14b0 <EXTI_Disable+0x64>
	case EXTI1:	CLEAR_BIT(GICR_Register, INT1); break;
    1492:	ab e5       	ldi	r26, 0x5B	; 91
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	eb e5       	ldi	r30, 0x5B	; 91
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 77       	andi	r24, 0x7F	; 127
    149e:	8c 93       	st	X, r24
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <EXTI_Disable+0x64>
	case EXTI2:	CLEAR_BIT(GICR_Register, INT2); break;
    14a2:	ab e5       	ldi	r26, 0x5B	; 91
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	eb e5       	ldi	r30, 0x5B	; 91
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8f 7d       	andi	r24, 0xDF	; 223
    14ae:	8c 93       	st	X, r24
	}
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <EXTI_SetCallback>:


void EXTI_SetCallback(u8 L_u8EXTINum, void (* ptr)())
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <EXTI_SetCallback+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <EXTI_SetCallback+0x8>
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	7b 83       	std	Y+3, r23	; 0x03
    14ce:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8EXTINum)
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3d 83       	std	Y+5, r19	; 0x05
    14d8:	2c 83       	std	Y+4, r18	; 0x04
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	91 05       	cpc	r25, r1
    14e2:	89 f0       	breq	.+34     	; 0x1506 <EXTI_SetCallback+0x4a>
    14e4:	2c 81       	ldd	r18, Y+4	; 0x04
    14e6:	3d 81       	ldd	r19, Y+5	; 0x05
    14e8:	23 30       	cpi	r18, 0x03	; 3
    14ea:	31 05       	cpc	r19, r1
    14ec:	99 f0       	breq	.+38     	; 0x1514 <EXTI_SetCallback+0x58>
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	a1 f4       	brne	.+40     	; 0x1520 <EXTI_SetCallback+0x64>
	{
	case EXTI0: callback_ptr1 = ptr; break;
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	9b 81       	ldd	r25, Y+3	; 0x03
    14fc:	90 93 e2 00 	sts	0x00E2, r25
    1500:	80 93 e1 00 	sts	0x00E1, r24
    1504:	0d c0       	rjmp	.+26     	; 0x1520 <EXTI_SetCallback+0x64>
	case EXTI1: callback_ptr2 = ptr; break;
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	90 93 e4 00 	sts	0x00E4, r25
    150e:	80 93 e3 00 	sts	0x00E3, r24
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <EXTI_SetCallback+0x64>
	case EXTI2: callback_ptr3 = ptr; break;
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	90 93 e6 00 	sts	0x00E6, r25
    151c:	80 93 e5 00 	sts	0x00E5, r24
	}
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <__vector_1>:

void __vector_1(void)
{
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	2f 93       	push	r18
    153c:	3f 93       	push	r19
    153e:	4f 93       	push	r20
    1540:	5f 93       	push	r21
    1542:	6f 93       	push	r22
    1544:	7f 93       	push	r23
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	ef 93       	push	r30
    1550:	ff 93       	push	r31
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	callback_ptr1();
    155a:	e0 91 e1 00 	lds	r30, 0x00E1
    155e:	f0 91 e2 00 	lds	r31, 0x00E2
    1562:	09 95       	icall
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <__vector_2>:

void __vector_2(void)
{
    158a:	1f 92       	push	r1
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	0f 92       	push	r0
    1592:	11 24       	eor	r1, r1
    1594:	2f 93       	push	r18
    1596:	3f 93       	push	r19
    1598:	4f 93       	push	r20
    159a:	5f 93       	push	r21
    159c:	6f 93       	push	r22
    159e:	7f 93       	push	r23
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	af 93       	push	r26
    15a6:	bf 93       	push	r27
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
	callback_ptr2();
    15b4:	e0 91 e3 00 	lds	r30, 0x00E3
    15b8:	f0 91 e4 00 	lds	r31, 0x00E4
    15bc:	09 95       	icall
}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <__vector_3>:

void __vector_3(void)
{
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	0f 92       	push	r0
    15ec:	11 24       	eor	r1, r1
    15ee:	2f 93       	push	r18
    15f0:	3f 93       	push	r19
    15f2:	4f 93       	push	r20
    15f4:	5f 93       	push	r21
    15f6:	6f 93       	push	r22
    15f8:	7f 93       	push	r23
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	af 93       	push	r26
    1600:	bf 93       	push	r27
    1602:	ef 93       	push	r30
    1604:	ff 93       	push	r31
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	callback_ptr3();
    160e:	e0 91 e5 00 	lds	r30, 0x00E5
    1612:	f0 91 e6 00 	lds	r31, 0x00E6
    1616:	09 95       	icall
}
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <DIO_u8SetPinValue>:

#include "DIO_private.h"
#include "DIO_interface.h"

u8 DIO_u8SetPinValue(u8 L_u8Port, u8 L_u8Pin, u8 L_u8Value)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	28 97       	sbiw	r28, 0x08	; 8
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
    1656:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Value == HIGH)
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	09 f0       	breq	.+2      	; 0x1660 <DIO_u8SetPinValue+0x22>
    165e:	73 c0       	rjmp	.+230    	; 0x1746 <DIO_u8SetPinValue+0x108>
	{
		switch(L_u8Port)
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	38 87       	std	Y+8, r19	; 0x08
    1668:	2f 83       	std	Y+7, r18	; 0x07
    166a:	8f 81       	ldd	r24, Y+7	; 0x07
    166c:	98 85       	ldd	r25, Y+8	; 0x08
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	91 05       	cpc	r25, r1
    1672:	51 f1       	breq	.+84     	; 0x16c8 <DIO_u8SetPinValue+0x8a>
    1674:	2f 81       	ldd	r18, Y+7	; 0x07
    1676:	38 85       	ldd	r19, Y+8	; 0x08
    1678:	23 30       	cpi	r18, 0x03	; 3
    167a:	31 05       	cpc	r19, r1
    167c:	34 f4       	brge	.+12     	; 0x168a <DIO_u8SetPinValue+0x4c>
    167e:	8f 81       	ldd	r24, Y+7	; 0x07
    1680:	98 85       	ldd	r25, Y+8	; 0x08
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	61 f0       	breq	.+24     	; 0x16a0 <DIO_u8SetPinValue+0x62>
    1688:	5b c0       	rjmp	.+182    	; 0x1740 <DIO_u8SetPinValue+0x102>
    168a:	2f 81       	ldd	r18, Y+7	; 0x07
    168c:	38 85       	ldd	r19, Y+8	; 0x08
    168e:	23 30       	cpi	r18, 0x03	; 3
    1690:	31 05       	cpc	r19, r1
    1692:	71 f1       	breq	.+92     	; 0x16f0 <DIO_u8SetPinValue+0xb2>
    1694:	8f 81       	ldd	r24, Y+7	; 0x07
    1696:	98 85       	ldd	r25, Y+8	; 0x08
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	91 05       	cpc	r25, r1
    169c:	e9 f1       	breq	.+122    	; 0x1718 <DIO_u8SetPinValue+0xda>
    169e:	50 c0       	rjmp	.+160    	; 0x1740 <DIO_u8SetPinValue+0x102>
		{
		case PORTA: SET_BIT(PORTA_Register, L_u8Pin); break;
    16a0:	ab e3       	ldi	r26, 0x3B	; 59
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_u8SetPinValue+0x80>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_u8SetPinValue+0x7c>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	be c0       	rjmp	.+380    	; 0x1844 <DIO_u8SetPinValue+0x206>
		case PORTB: SET_BIT(PORTB_Register, L_u8Pin); break;
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_u8SetPinValue+0xa8>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_u8SetPinValue+0xa4>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	aa c0       	rjmp	.+340    	; 0x1844 <DIO_u8SetPinValue+0x206>
		case PORTC: SET_BIT(PORTC_Register, L_u8Pin); break;
    16f0:	a5 e3       	ldi	r26, 0x35	; 53
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e3       	ldi	r30, 0x35	; 53
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_u8SetPinValue+0xd0>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_u8SetPinValue+0xcc>
    1712:	84 2b       	or	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	96 c0       	rjmp	.+300    	; 0x1844 <DIO_u8SetPinValue+0x206>
		case PORTD: SET_BIT(PORTD_Register, L_u8Pin); break;
    1718:	a2 e3       	ldi	r26, 0x32	; 50
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e2 e3       	ldi	r30, 0x32	; 50
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_u8SetPinValue+0xf8>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_u8SetPinValue+0xf4>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	82 c0       	rjmp	.+260    	; 0x1844 <DIO_u8SetPinValue+0x206>
		default: return DIO_ERROR; break;
    1740:	9f ef       	ldi	r25, 0xFF	; 255
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	80 c0       	rjmp	.+256    	; 0x1846 <DIO_u8SetPinValue+0x208>
		}
	}
	else if(L_u8Value == LOW)
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 23       	and	r24, r24
    174a:	09 f0       	breq	.+2      	; 0x174e <DIO_u8SetPinValue+0x110>
    174c:	78 c0       	rjmp	.+240    	; 0x183e <DIO_u8SetPinValue+0x200>
	{
		switch(L_u8Port)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3d 83       	std	Y+5, r19	; 0x05
    1756:	2c 83       	std	Y+4, r18	; 0x04
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	82 30       	cpi	r24, 0x02	; 2
    175e:	91 05       	cpc	r25, r1
    1760:	61 f1       	breq	.+88     	; 0x17ba <DIO_u8SetPinValue+0x17c>
    1762:	2c 81       	ldd	r18, Y+4	; 0x04
    1764:	3d 81       	ldd	r19, Y+5	; 0x05
    1766:	23 30       	cpi	r18, 0x03	; 3
    1768:	31 05       	cpc	r19, r1
    176a:	34 f4       	brge	.+12     	; 0x1778 <DIO_u8SetPinValue+0x13a>
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	91 05       	cpc	r25, r1
    1774:	69 f0       	breq	.+26     	; 0x1790 <DIO_u8SetPinValue+0x152>
    1776:	60 c0       	rjmp	.+192    	; 0x1838 <DIO_u8SetPinValue+0x1fa>
    1778:	2c 81       	ldd	r18, Y+4	; 0x04
    177a:	3d 81       	ldd	r19, Y+5	; 0x05
    177c:	23 30       	cpi	r18, 0x03	; 3
    177e:	31 05       	cpc	r19, r1
    1780:	89 f1       	breq	.+98     	; 0x17e4 <DIO_u8SetPinValue+0x1a6>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <DIO_u8SetPinValue+0x150>
    178c:	40 c0       	rjmp	.+128    	; 0x180e <DIO_u8SetPinValue+0x1d0>
    178e:	54 c0       	rjmp	.+168    	; 0x1838 <DIO_u8SetPinValue+0x1fa>
		{
		case PORTA: CLEAR_BIT(PORTA_Register, L_u8Pin); break;
    1790:	ab e3       	ldi	r26, 0x3B	; 59
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e3       	ldi	r30, 0x3B	; 59
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_u8SetPinValue+0x170>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_u8SetPinValue+0x16c>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	45 c0       	rjmp	.+138    	; 0x1844 <DIO_u8SetPinValue+0x206>
		case PORTB: CLEAR_BIT(PORTB_Register, L_u8Pin); break;
    17ba:	a8 e3       	ldi	r26, 0x38	; 56
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e8 e3       	ldi	r30, 0x38	; 56
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_u8SetPinValue+0x19a>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_u8SetPinValue+0x196>
    17dc:	80 95       	com	r24
    17de:	84 23       	and	r24, r20
    17e0:	8c 93       	st	X, r24
    17e2:	30 c0       	rjmp	.+96     	; 0x1844 <DIO_u8SetPinValue+0x206>
		case PORTC: CLEAR_BIT(PORTC_Register, L_u8Pin); break;
    17e4:	a5 e3       	ldi	r26, 0x35	; 53
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e3       	ldi	r30, 0x35	; 53
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_u8SetPinValue+0x1c4>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_u8SetPinValue+0x1c0>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	1b c0       	rjmp	.+54     	; 0x1844 <DIO_u8SetPinValue+0x206>
		case PORTD: CLEAR_BIT(PORTD_Register, L_u8Pin); break;
    180e:	a2 e3       	ldi	r26, 0x32	; 50
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e2 e3       	ldi	r30, 0x32	; 50
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_u8SetPinValue+0x1ee>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_u8SetPinValue+0x1ea>
    1830:	80 95       	com	r24
    1832:	84 23       	and	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <DIO_u8SetPinValue+0x206>
		default: return DIO_ERROR; break;
    1838:	9f ef       	ldi	r25, 0xFF	; 255
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <DIO_u8SetPinValue+0x208>
		}
	}
	else
	{
		return DIO_ERROR;
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	2e 83       	std	Y+6, r18	; 0x06
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <DIO_u8SetPinValue+0x208>
	}
	return DIO_OK;
    1844:	1e 82       	std	Y+6, r1	; 0x06
    1846:	8e 81       	ldd	r24, Y+6	; 0x06

}
    1848:	28 96       	adiw	r28, 0x08	; 8
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 L_u8Port, u8 L_u8Pin)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <DIO_u8GetPinValue+0x6>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <DIO_u8GetPinValue+0x8>
    1862:	0f 92       	push	r0
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8Result;
	switch(L_u8Port)
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3d 83       	std	Y+5, r19	; 0x05
    1874:	2c 83       	std	Y+4, r18	; 0x04
    1876:	4c 81       	ldd	r20, Y+4	; 0x04
    1878:	5d 81       	ldd	r21, Y+5	; 0x05
    187a:	42 30       	cpi	r20, 0x02	; 2
    187c:	51 05       	cpc	r21, r1
    187e:	41 f1       	breq	.+80     	; 0x18d0 <DIO_u8GetPinValue+0x76>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	34 f4       	brge	.+12     	; 0x1896 <DIO_u8GetPinValue+0x3c>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	21 30       	cpi	r18, 0x01	; 1
    1890:	31 05       	cpc	r19, r1
    1892:	61 f0       	breq	.+24     	; 0x18ac <DIO_u8GetPinValue+0x52>
    1894:	53 c0       	rjmp	.+166    	; 0x193c <DIO_u8GetPinValue+0xe2>
    1896:	4c 81       	ldd	r20, Y+4	; 0x04
    1898:	5d 81       	ldd	r21, Y+5	; 0x05
    189a:	43 30       	cpi	r20, 0x03	; 3
    189c:	51 05       	cpc	r21, r1
    189e:	51 f1       	breq	.+84     	; 0x18f4 <DIO_u8GetPinValue+0x9a>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	91 05       	cpc	r25, r1
    18a8:	b9 f1       	breq	.+110    	; 0x1918 <DIO_u8GetPinValue+0xbe>
    18aa:	48 c0       	rjmp	.+144    	; 0x193c <DIO_u8GetPinValue+0xe2>
	{
	case PORTA: L_u8Result= GET_BIT(PINA_Register, L_u8Pin); break;
    18ac:	e9 e3       	ldi	r30, 0x39	; 57
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a9 01       	movw	r20, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <DIO_u8GetPinValue+0x6a>
    18c0:	55 95       	asr	r21
    18c2:	47 95       	ror	r20
    18c4:	8a 95       	dec	r24
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <DIO_u8GetPinValue+0x66>
    18c8:	ca 01       	movw	r24, r20
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	38 c0       	rjmp	.+112    	; 0x1940 <DIO_u8GetPinValue+0xe6>
	case PORTB: L_u8Result= GET_BIT(PINB_Register, L_u8Pin); break;
    18d0:	e6 e3       	ldi	r30, 0x36	; 54
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_u8GetPinValue+0x8e>
    18e4:	55 95       	asr	r21
    18e6:	47 95       	ror	r20
    18e8:	8a 95       	dec	r24
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_u8GetPinValue+0x8a>
    18ec:	ca 01       	movw	r24, r20
    18ee:	81 70       	andi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	26 c0       	rjmp	.+76     	; 0x1940 <DIO_u8GetPinValue+0xe6>
	case PORTC: L_u8Result= GET_BIT(PINC_Register, L_u8Pin); break;
    18f4:	e3 e3       	ldi	r30, 0x33	; 51
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a9 01       	movw	r20, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_u8GetPinValue+0xb2>
    1908:	55 95       	asr	r21
    190a:	47 95       	ror	r20
    190c:	8a 95       	dec	r24
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_u8GetPinValue+0xae>
    1910:	ca 01       	movw	r24, r20
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <DIO_u8GetPinValue+0xe6>
	case PORTD: L_u8Result= GET_BIT(PIND_Register, L_u8Pin); break;
    1918:	e0 e3       	ldi	r30, 0x30	; 48
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a9 01       	movw	r20, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_u8GetPinValue+0xd6>
    192c:	55 95       	asr	r21
    192e:	47 95       	ror	r20
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_u8GetPinValue+0xd2>
    1934:	ca 01       	movw	r24, r20
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_u8GetPinValue+0xe6>
	default: L_u8Result = DIO_ERROR;
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_u8Result;
    1940:	89 81       	ldd	r24, Y+1	; 0x01
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 L_u8Port, u8 L_u8Pin, u8 L_u8Direction)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	28 97       	sbiw	r28, 0x08	; 8
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	6a 83       	std	Y+2, r22	; 0x02
    196a:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Direction == OUTPUT)
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	09 f0       	breq	.+2      	; 0x1974 <DIO_u8SetPinDirection+0x22>
    1972:	73 c0       	rjmp	.+230    	; 0x1a5a <DIO_u8SetPinDirection+0x108>
		{
			switch(L_u8Port)
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	38 87       	std	Y+8, r19	; 0x08
    197c:	2f 83       	std	Y+7, r18	; 0x07
    197e:	8f 81       	ldd	r24, Y+7	; 0x07
    1980:	98 85       	ldd	r25, Y+8	; 0x08
    1982:	82 30       	cpi	r24, 0x02	; 2
    1984:	91 05       	cpc	r25, r1
    1986:	51 f1       	breq	.+84     	; 0x19dc <DIO_u8SetPinDirection+0x8a>
    1988:	2f 81       	ldd	r18, Y+7	; 0x07
    198a:	38 85       	ldd	r19, Y+8	; 0x08
    198c:	23 30       	cpi	r18, 0x03	; 3
    198e:	31 05       	cpc	r19, r1
    1990:	34 f4       	brge	.+12     	; 0x199e <DIO_u8SetPinDirection+0x4c>
    1992:	8f 81       	ldd	r24, Y+7	; 0x07
    1994:	98 85       	ldd	r25, Y+8	; 0x08
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	91 05       	cpc	r25, r1
    199a:	61 f0       	breq	.+24     	; 0x19b4 <DIO_u8SetPinDirection+0x62>
    199c:	5b c0       	rjmp	.+182    	; 0x1a54 <DIO_u8SetPinDirection+0x102>
    199e:	2f 81       	ldd	r18, Y+7	; 0x07
    19a0:	38 85       	ldd	r19, Y+8	; 0x08
    19a2:	23 30       	cpi	r18, 0x03	; 3
    19a4:	31 05       	cpc	r19, r1
    19a6:	71 f1       	breq	.+92     	; 0x1a04 <DIO_u8SetPinDirection+0xb2>
    19a8:	8f 81       	ldd	r24, Y+7	; 0x07
    19aa:	98 85       	ldd	r25, Y+8	; 0x08
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	91 05       	cpc	r25, r1
    19b0:	e9 f1       	breq	.+122    	; 0x1a2c <DIO_u8SetPinDirection+0xda>
    19b2:	50 c0       	rjmp	.+160    	; 0x1a54 <DIO_u8SetPinDirection+0x102>
			{
			case PORTA: SET_BIT(DDRA_Register, L_u8Pin); break;
    19b4:	aa e3       	ldi	r26, 0x3A	; 58
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ea e3       	ldi	r30, 0x3A	; 58
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 2e       	mov	r0, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_u8SetPinDirection+0x80>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	0a 94       	dec	r0
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_u8SetPinDirection+0x7c>
    19d6:	84 2b       	or	r24, r20
    19d8:	8c 93       	st	X, r24
    19da:	be c0       	rjmp	.+380    	; 0x1b58 <DIO_u8SetPinDirection+0x206>
			case PORTB: SET_BIT(DDRB_Register, L_u8Pin); break;
    19dc:	a7 e3       	ldi	r26, 0x37	; 55
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e7 e3       	ldi	r30, 0x37	; 55
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	48 2f       	mov	r20, r24
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	02 2e       	mov	r0, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_u8SetPinDirection+0xa8>
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <DIO_u8SetPinDirection+0xa4>
    19fe:	84 2b       	or	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	aa c0       	rjmp	.+340    	; 0x1b58 <DIO_u8SetPinDirection+0x206>
			case PORTC: SET_BIT(DDRC_Register, L_u8Pin); break;
    1a04:	a4 e3       	ldi	r26, 0x34	; 52
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e4 e3       	ldi	r30, 0x34	; 52
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_u8SetPinDirection+0xd0>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <DIO_u8SetPinDirection+0xcc>
    1a26:	84 2b       	or	r24, r20
    1a28:	8c 93       	st	X, r24
    1a2a:	96 c0       	rjmp	.+300    	; 0x1b58 <DIO_u8SetPinDirection+0x206>
			case PORTD: SET_BIT(DDRD_Register, L_u8Pin); break;
    1a2c:	a1 e3       	ldi	r26, 0x31	; 49
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e1 e3       	ldi	r30, 0x31	; 49
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_u8SetPinDirection+0xf8>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_u8SetPinDirection+0xf4>
    1a4e:	84 2b       	or	r24, r20
    1a50:	8c 93       	st	X, r24
    1a52:	82 c0       	rjmp	.+260    	; 0x1b58 <DIO_u8SetPinDirection+0x206>
			default: return DIO_ERROR; break;
    1a54:	9f ef       	ldi	r25, 0xFF	; 255
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	80 c0       	rjmp	.+256    	; 0x1b5a <DIO_u8SetPinDirection+0x208>
			}
		}
		else if(L_u8Direction == INPUT)
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <DIO_u8SetPinDirection+0x110>
    1a60:	78 c0       	rjmp	.+240    	; 0x1b52 <DIO_u8SetPinDirection+0x200>
		{
			switch(L_u8Port)
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	3d 83       	std	Y+5, r19	; 0x05
    1a6a:	2c 83       	std	Y+4, r18	; 0x04
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	91 05       	cpc	r25, r1
    1a74:	61 f1       	breq	.+88     	; 0x1ace <DIO_u8SetPinDirection+0x17c>
    1a76:	2c 81       	ldd	r18, Y+4	; 0x04
    1a78:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7a:	23 30       	cpi	r18, 0x03	; 3
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	34 f4       	brge	.+12     	; 0x1a8c <DIO_u8SetPinDirection+0x13a>
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	91 05       	cpc	r25, r1
    1a88:	69 f0       	breq	.+26     	; 0x1aa4 <DIO_u8SetPinDirection+0x152>
    1a8a:	60 c0       	rjmp	.+192    	; 0x1b4c <DIO_u8SetPinDirection+0x1fa>
    1a8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a90:	23 30       	cpi	r18, 0x03	; 3
    1a92:	31 05       	cpc	r19, r1
    1a94:	89 f1       	breq	.+98     	; 0x1af8 <DIO_u8SetPinDirection+0x1a6>
    1a96:	8c 81       	ldd	r24, Y+4	; 0x04
    1a98:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <DIO_u8SetPinDirection+0x150>
    1aa0:	40 c0       	rjmp	.+128    	; 0x1b22 <DIO_u8SetPinDirection+0x1d0>
    1aa2:	54 c0       	rjmp	.+168    	; 0x1b4c <DIO_u8SetPinDirection+0x1fa>
			{
			case PORTA: CLEAR_BIT(DDRA_Register, L_u8Pin); break;
    1aa4:	aa e3       	ldi	r26, 0x3A	; 58
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	ea e3       	ldi	r30, 0x3A	; 58
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_u8SetPinDirection+0x170>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <DIO_u8SetPinDirection+0x16c>
    1ac6:	80 95       	com	r24
    1ac8:	84 23       	and	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	45 c0       	rjmp	.+138    	; 0x1b58 <DIO_u8SetPinDirection+0x206>
			case PORTB: CLEAR_BIT(DDRB_Register, L_u8Pin); break;
    1ace:	a7 e3       	ldi	r26, 0x37	; 55
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e7 e3       	ldi	r30, 0x37	; 55
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	02 2e       	mov	r0, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <DIO_u8SetPinDirection+0x19a>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <DIO_u8SetPinDirection+0x196>
    1af0:	80 95       	com	r24
    1af2:	84 23       	and	r24, r20
    1af4:	8c 93       	st	X, r24
    1af6:	30 c0       	rjmp	.+96     	; 0x1b58 <DIO_u8SetPinDirection+0x206>
			case PORTC: CLEAR_BIT(DDRC_Register, L_u8Pin); break;
    1af8:	a4 e3       	ldi	r26, 0x34	; 52
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e4 e3       	ldi	r30, 0x34	; 52
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_u8SetPinDirection+0x1c4>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <DIO_u8SetPinDirection+0x1c0>
    1b1a:	80 95       	com	r24
    1b1c:	84 23       	and	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	1b c0       	rjmp	.+54     	; 0x1b58 <DIO_u8SetPinDirection+0x206>
			case PORTD: CLEAR_BIT(DDRD_Register, L_u8Pin); break;
    1b22:	a1 e3       	ldi	r26, 0x31	; 49
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e1 e3       	ldi	r30, 0x31	; 49
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_u8SetPinDirection+0x1ee>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <DIO_u8SetPinDirection+0x1ea>
    1b44:	80 95       	com	r24
    1b46:	84 23       	and	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <DIO_u8SetPinDirection+0x206>
			default: return DIO_ERROR; break;
    1b4c:	9f ef       	ldi	r25, 0xFF	; 255
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	04 c0       	rjmp	.+8      	; 0x1b5a <DIO_u8SetPinDirection+0x208>
			}
		}
		else
		{
			return DIO_ERROR;
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	2e 83       	std	Y+6, r18	; 0x06
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <DIO_u8SetPinDirection+0x208>
		}
		return DIO_OK;
    1b58:	1e 82       	std	Y+6, r1	; 0x06
    1b5a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1b5c:	28 96       	adiw	r28, 0x08	; 8
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 L_u8Port, u8 L_u8Value)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <DIO_u8SetPortValue+0x6>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <DIO_u8SetPortValue+0x8>
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	3d 83       	std	Y+5, r19	; 0x05
    1b88:	2c 83       	std	Y+4, r18	; 0x04
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	82 30       	cpi	r24, 0x02	; 2
    1b90:	91 05       	cpc	r25, r1
    1b92:	d9 f0       	breq	.+54     	; 0x1bca <DIO_u8SetPortValue+0x5c>
    1b94:	2c 81       	ldd	r18, Y+4	; 0x04
    1b96:	3d 81       	ldd	r19, Y+5	; 0x05
    1b98:	23 30       	cpi	r18, 0x03	; 3
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	34 f4       	brge	.+12     	; 0x1baa <DIO_u8SetPortValue+0x3c>
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	61 f0       	breq	.+24     	; 0x1bc0 <DIO_u8SetPortValue+0x52>
    1ba8:	1f c0       	rjmp	.+62     	; 0x1be8 <DIO_u8SetPortValue+0x7a>
    1baa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bac:	3d 81       	ldd	r19, Y+5	; 0x05
    1bae:	23 30       	cpi	r18, 0x03	; 3
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	81 f0       	breq	.+32     	; 0x1bd4 <DIO_u8SetPortValue+0x66>
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	91 05       	cpc	r25, r1
    1bbc:	81 f0       	breq	.+32     	; 0x1bde <DIO_u8SetPortValue+0x70>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <DIO_u8SetPortValue+0x7a>
	{
		case PORTA: PORTA_Register = L_u8Value; break;
    1bc0:	eb e3       	ldi	r30, 0x3B	; 59
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	80 83       	st	Z, r24
    1bc8:	12 c0       	rjmp	.+36     	; 0x1bee <DIO_u8SetPortValue+0x80>
		case PORTB: PORTB_Register = L_u8Value; break;
    1bca:	e8 e3       	ldi	r30, 0x38	; 56
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	80 83       	st	Z, r24
    1bd2:	0d c0       	rjmp	.+26     	; 0x1bee <DIO_u8SetPortValue+0x80>
		case PORTC: PORTC_Register = L_u8Value; break;
    1bd4:	e5 e3       	ldi	r30, 0x35	; 53
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	80 83       	st	Z, r24
    1bdc:	08 c0       	rjmp	.+16     	; 0x1bee <DIO_u8SetPortValue+0x80>
		case PORTD: PORTD_Register = L_u8Value; break;
    1bde:	e2 e3       	ldi	r30, 0x32	; 50
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 83       	st	Z, r24
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <DIO_u8SetPortValue+0x80>
		default: return DIO_ERROR; break;
    1be8:	9f ef       	ldi	r25, 0xFF	; 255
    1bea:	9b 83       	std	Y+3, r25	; 0x03
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <DIO_u8SetPortValue+0x82>
	}
	return DIO_OK;
    1bee:	1b 82       	std	Y+3, r1	; 0x03
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 L_u8Port, u8 L_u8Direction)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <DIO_u8SetPortDirection+0x6>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <DIO_u8SetPortDirection+0x8>
    1c0a:	0f 92       	push	r0
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3d 83       	std	Y+5, r19	; 0x05
    1c1c:	2c 83       	std	Y+4, r18	; 0x04
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	9d 81       	ldd	r25, Y+5	; 0x05
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	91 05       	cpc	r25, r1
    1c26:	d9 f0       	breq	.+54     	; 0x1c5e <DIO_u8SetPortDirection+0x5c>
    1c28:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2c:	23 30       	cpi	r18, 0x03	; 3
    1c2e:	31 05       	cpc	r19, r1
    1c30:	34 f4       	brge	.+12     	; 0x1c3e <DIO_u8SetPortDirection+0x3c>
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	91 05       	cpc	r25, r1
    1c3a:	61 f0       	breq	.+24     	; 0x1c54 <DIO_u8SetPortDirection+0x52>
    1c3c:	1f c0       	rjmp	.+62     	; 0x1c7c <DIO_u8SetPortDirection+0x7a>
    1c3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c40:	3d 81       	ldd	r19, Y+5	; 0x05
    1c42:	23 30       	cpi	r18, 0x03	; 3
    1c44:	31 05       	cpc	r19, r1
    1c46:	81 f0       	breq	.+32     	; 0x1c68 <DIO_u8SetPortDirection+0x66>
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	91 05       	cpc	r25, r1
    1c50:	81 f0       	breq	.+32     	; 0x1c72 <DIO_u8SetPortDirection+0x70>
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <DIO_u8SetPortDirection+0x7a>
	{
		case PORTA: DDRA_Register = L_u8Direction; break;
    1c54:	ea e3       	ldi	r30, 0x3A	; 58
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	80 83       	st	Z, r24
    1c5c:	12 c0       	rjmp	.+36     	; 0x1c82 <DIO_u8SetPortDirection+0x80>
		case PORTB: DDRB_Register = L_u8Direction; break;
    1c5e:	e7 e3       	ldi	r30, 0x37	; 55
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	80 83       	st	Z, r24
    1c66:	0d c0       	rjmp	.+26     	; 0x1c82 <DIO_u8SetPortDirection+0x80>
		case PORTC: DDRC_Register = L_u8Direction; break;
    1c68:	e4 e3       	ldi	r30, 0x34	; 52
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	80 83       	st	Z, r24
    1c70:	08 c0       	rjmp	.+16     	; 0x1c82 <DIO_u8SetPortDirection+0x80>
		case PORTD: DDRD_Register = L_u8Direction; break;
    1c72:	e1 e3       	ldi	r30, 0x31	; 49
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	80 83       	st	Z, r24
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <DIO_u8SetPortDirection+0x80>
		default: return DIO_ERROR; break;
    1c7c:	9f ef       	ldi	r25, 0xFF	; 255
    1c7e:	9b 83       	std	Y+3, r25	; 0x03
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <DIO_u8SetPortDirection+0x82>
	}
	return DIO_OK;
    1c82:	1b 82       	std	Y+3, r1	; 0x03
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <ADC_Init>:
#include "ADC_interface.h"



void ADC_Init(void)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <ADC_Init+0x6>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
	u8 ADMUX_Temp =0;
    1ca0:	1a 82       	std	Y+2, r1	; 0x02
	u8 ADCSRA_Temp = 0;
    1ca2:	19 82       	std	Y+1, r1	; 0x01

	/* Set Adjust Value */
	ADMUX_Temp |= (ADC_ADJUST << ADLAR);

	/* Set Reference Value */
	ADMUX_Temp |= (ADC_REF << REFS0);
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	80 64       	ori	r24, 0x40	; 64
    1ca8:	8a 83       	std	Y+2, r24	; 0x02

	/* Write to Register */
	ADMUX_Register = ADMUX_Temp;
    1caa:	e7 e2       	ldi	r30, 0x27	; 39
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	80 83       	st	Z, r24

	/* Set Pre-scaler value */
	ADCSRA_Temp |= (ADC_PSC << ADPS0);
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	83 60       	ori	r24, 0x03	; 3
    1cb6:	89 83       	std	Y+1, r24	; 0x01

	/* Enable Register */
	SET_BIT(ADCSRA_Temp, ADEN);
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	80 68       	ori	r24, 0x80	; 128
    1cbc:	89 83       	std	Y+1, r24	; 0x01

	/* Write to Register */
	ADCSRA_Register = ADCSRA_Temp;
    1cbe:	e6 e2       	ldi	r30, 0x26	; 38
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	80 83       	st	Z, r24
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <ADC_StartConversion>:


u16 ADC_StartConversion(u8 L_u8Channel)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
	/* Clear MUX bits */
	ADMUX_Register &= ~ADMUX_MUX_MASK;
    1cdc:	a7 e2       	ldi	r26, 0x27	; 39
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e7 e2       	ldi	r30, 0x27	; 39
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	80 7e       	andi	r24, 0xE0	; 224
    1ce8:	8c 93       	st	X, r24

	/* Select Channel */
	ADMUX_Register |= (L_u8Channel << MUX0);
    1cea:	a7 e2       	ldi	r26, 0x27	; 39
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e7 e2       	ldi	r30, 0x27	; 39
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	90 81       	ld	r25, Z
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	89 2b       	or	r24, r25
    1cf8:	8c 93       	st	X, r24

	/* Start Conversion */
	SET_BIT(ADCSRA_Register, ADSC);
    1cfa:	a6 e2       	ldi	r26, 0x26	; 38
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e6 e2       	ldi	r30, 0x26	; 38
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	80 64       	ori	r24, 0x40	; 64
    1d06:	8c 93       	st	X, r24


	/* Wait for ADC to finish conversion */
	while(GET_BIT(ADCSRA_Register, ADIF) == 0)
    1d08:	e6 e2       	ldi	r30, 0x26	; 38
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	82 95       	swap	r24
    1d10:	8f 70       	andi	r24, 0x0F	; 15
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	81 70       	andi	r24, 0x01	; 1
    1d18:	90 70       	andi	r25, 0x00	; 0
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	a9 f3       	breq	.-22     	; 0x1d08 <ADC_StartConversion+0x38>
	{
		/* Wait for ADC to finish */
	}

	/* Clear ADIF Flag */
	SET_BIT(ADCSRA_Register, ADIF);
    1d1e:	a6 e2       	ldi	r26, 0x26	; 38
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e6 e2       	ldi	r30, 0x26	; 38
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 61       	ori	r24, 0x10	; 16
    1d2a:	8c 93       	st	X, r24


	return ADCDATA_Register;
    1d2c:	e4 e2       	ldi	r30, 0x24	; 36
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <Stepper_Init>:
#include "Stepper_interface.h"

static u8 current_pattern = 0;

void Stepper_Init(void)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <Stepper_Init+0x6>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i<NUM_OF_COILS; i++)
    1d46:	1a 82       	std	Y+2, r1	; 0x02
    1d48:	19 82       	std	Y+1, r1	; 0x01
    1d4a:	1a c0       	rjmp	.+52     	; 0x1d80 <Stepper_Init+0x44>
	{
		DIO_u8SetPinDirection(coils[i].port, coils[i].pin, OUTPUT);
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	fc 01       	movw	r30, r24
    1d56:	ea 58       	subi	r30, 0x8A	; 138
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	20 81       	ld	r18, Z
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	fc 01       	movw	r30, r24
    1d66:	e9 58       	subi	r30, 0x89	; 137
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	90 81       	ld	r25, Z
    1d6c:	82 2f       	mov	r24, r18
    1d6e:	69 2f       	mov	r22, r25
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>

static u8 current_pattern = 0;

void Stepper_Init(void)
{
	for(int i=0; i<NUM_OF_COILS; i++)
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	84 30       	cpi	r24, 0x04	; 4
    1d86:	91 05       	cpc	r25, r1
    1d88:	08 f3       	brcs	.-62     	; 0x1d4c <Stepper_Init+0x10>
	{
		DIO_u8SetPinDirection(coils[i].port, coils[i].pin, OUTPUT);
	}

}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <Stepper_StepCW>:

void Stepper_StepCW(void)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	0f 92       	push	r0
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	current_pattern++;
    1d9e:	80 91 c2 00 	lds	r24, 0x00C2
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	80 93 c2 00 	sts	0x00C2, r24
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    1da8:	19 82       	std	Y+1, r1	; 0x01
    1daa:	30 c0       	rjmp	.+96     	; 0x1e0c <Stepper_StepCW+0x78>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	fc 01       	movw	r30, r24
    1db8:	ea 58       	subi	r30, 0x8A	; 138
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	40 81       	ld	r20, Z
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e9 58       	subi	r30, 0x89	; 137
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	50 81       	ld	r21, Z
    1dd0:	80 91 c2 00 	lds	r24, 0x00C2
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	fc 01       	movw	r30, r24
    1dda:	e8 56       	subi	r30, 0x68	; 104
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	b9 01       	movw	r22, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <Stepper_StepCW+0x5e>
    1dee:	75 95       	asr	r23
    1df0:	67 95       	ror	r22
    1df2:	8a 95       	dec	r24
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <Stepper_StepCW+0x5a>
    1df6:	cb 01       	movw	r24, r22
    1df8:	98 2f       	mov	r25, r24
    1dfa:	91 70       	andi	r25, 0x01	; 1
    1dfc:	84 2f       	mov	r24, r20
    1dfe:	65 2f       	mov	r22, r21
    1e00:	49 2f       	mov	r20, r25
    1e02:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
}

void Stepper_StepCW(void)
{
	current_pattern++;
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	84 30       	cpi	r24, 0x04	; 4
    1e10:	68 f2       	brcs	.-102    	; 0x1dac <Stepper_StepCW+0x18>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
	}
	if(current_pattern > 7) current_pattern = 0;
    1e12:	80 91 c2 00 	lds	r24, 0x00C2
    1e16:	88 30       	cpi	r24, 0x08	; 8
    1e18:	10 f0       	brcs	.+4      	; 0x1e1e <Stepper_StepCW+0x8a>
    1e1a:	10 92 c2 00 	sts	0x00C2, r1
}
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <Stepper_StepCCW>:

void Stepper_StepCCW(void)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	0f 92       	push	r0
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
	current_pattern--;
    1e30:	80 91 c2 00 	lds	r24, 0x00C2
    1e34:	81 50       	subi	r24, 0x01	; 1
    1e36:	80 93 c2 00 	sts	0x00C2, r24
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    1e3a:	19 82       	std	Y+1, r1	; 0x01
    1e3c:	30 c0       	rjmp	.+96     	; 0x1e9e <Stepper_StepCCW+0x78>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ea 58       	subi	r30, 0x8A	; 138
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	40 81       	ld	r20, Z
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	e9 58       	subi	r30, 0x89	; 137
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	50 81       	ld	r21, Z
    1e62:	80 91 c2 00 	lds	r24, 0x00C2
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e8 56       	subi	r30, 0x68	; 104
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	b9 01       	movw	r22, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <Stepper_StepCCW+0x5e>
    1e80:	75 95       	asr	r23
    1e82:	67 95       	ror	r22
    1e84:	8a 95       	dec	r24
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <Stepper_StepCCW+0x5a>
    1e88:	cb 01       	movw	r24, r22
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	91 70       	andi	r25, 0x01	; 1
    1e8e:	84 2f       	mov	r24, r20
    1e90:	65 2f       	mov	r22, r21
    1e92:	49 2f       	mov	r20, r25
    1e94:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
}

void Stepper_StepCCW(void)
{
	current_pattern--;
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	8f 5f       	subi	r24, 0xFF	; 255
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	84 30       	cpi	r24, 0x04	; 4
    1ea2:	68 f2       	brcs	.-102    	; 0x1e3e <Stepper_StepCCW+0x18>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
	}
	if(current_pattern > 7) current_pattern = 7;
    1ea4:	80 91 c2 00 	lds	r24, 0x00C2
    1ea8:	88 30       	cpi	r24, 0x08	; 8
    1eaa:	18 f0       	brcs	.+6      	; 0x1eb2 <Stepper_StepCCW+0x8c>
    1eac:	87 e0       	ldi	r24, 0x07	; 7
    1eae:	80 93 c2 00 	sts	0x00C2, r24
}
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <SevenSegment_voidInit>:
#include "SS_config.h"
#include "SS_interface.h"


void SevenSegment_voidInit()
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(SEVEN_SEGMENT1_PORT, 0xFF);
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	6f ef       	ldi	r22, 0xFF	; 255
    1ec6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, 0x00);
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8SetPortValue>
}
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <SevenSegment_voidSetValue>:

void SevenSegment_voidSetValue(u8 L_u8UnitNo, u8 L_u8Value)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <SevenSegment_voidSetValue+0x6>
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8UnitNo)
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	59 f4       	brne	.+22     	; 0x1f06 <SevenSegment_voidSetValue+0x2e>
	{
	case SEVEN_SEGMENT_UNIT1: DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, digits[L_u8Value]);break;
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	e0 56       	subi	r30, 0x60	; 96
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	90 81       	ld	r25, Z
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	69 2f       	mov	r22, r25
    1f02:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8SetPortValue>
	}
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <SevenSegment_voidClear>:

void SevenSegment_voidClear(u8 L_u8UnitNo)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8UnitNo)
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	21 f4       	brne	.+8      	; 0x1f2e <SevenSegment_voidClear+0x1e>
	{
	case SEVEN_SEGMENT_UNIT1: DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, 0x00);break;
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8SetPortValue>
	}
}
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <Servo_Init>:
#include "Servo_private.h"
#include "Servo_config.h"
#include "Servo_interface.h"

void Servo_Init(void)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTD, PIN5, OUTPUT);
    1f3e:	84 e0       	ldi	r24, 0x04	; 4
    1f40:	65 e0       	ldi	r22, 0x05	; 5
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTD, PIN4, OUTPUT);
    1f48:	84 e0       	ldi	r24, 0x04	; 4
    1f4a:	64 e0       	ldi	r22, 0x04	; 4
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	TIM1_voidFPWMInit(SERVO_PERIOD_US);
    1f52:	80 e2       	ldi	r24, 0x20	; 32
    1f54:	9e e4       	ldi	r25, 0x4E	; 78
    1f56:	0e 94 58 07 	call	0xeb0	; 0xeb0 <TIM1_voidFPWMInit>
}
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <Servo_SetAngle>:

void Servo_SetAngle(u8 servo, s8 angle)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	28 97       	sbiw	r28, 0x08	; 8
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	6e 83       	std	Y+6, r22	; 0x06
	u32 tmp = (angle + (s8) 90);
    1f78:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7a:	99 27       	eor	r25, r25
    1f7c:	87 fd       	sbrc	r24, 7
    1f7e:	90 95       	com	r25
    1f80:	86 5a       	subi	r24, 0xA6	; 166
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	aa 27       	eor	r26, r26
    1f86:	97 fd       	sbrc	r25, 7
    1f88:	a0 95       	com	r26
    1f8a:	ba 2f       	mov	r27, r26
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	ab 83       	std	Y+3, r26	; 0x03
    1f92:	bc 83       	std	Y+4, r27	; 0x04
	tmp = (tmp * 1000)/180;
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f9c:	28 ee       	ldi	r18, 0xE8	; 232
    1f9e:	33 e0       	ldi	r19, 0x03	; 3
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__mulsi3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	24 eb       	ldi	r18, 0xB4	; 180
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 12 1b 	call	0x3624	; 0x3624 <__udivmodsi4>
    1fc0:	da 01       	movw	r26, r20
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	ab 83       	std	Y+3, r26	; 0x03
    1fca:	bc 83       	std	Y+4, r27	; 0x04

	switch(servo)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	38 87       	std	Y+8, r19	; 0x08
    1fd4:	2f 83       	std	Y+7, r18	; 0x07
    1fd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd8:	98 85       	ldd	r25, Y+8	; 0x08
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	31 f0       	breq	.+12     	; 0x1fea <Servo_SetAngle+0x8a>
    1fde:	2f 81       	ldd	r18, Y+7	; 0x07
    1fe0:	38 85       	ldd	r19, Y+8	; 0x08
    1fe2:	21 30       	cpi	r18, 0x01	; 1
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	59 f0       	breq	.+22     	; 0x1ffe <Servo_SetAngle+0x9e>
    1fe8:	13 c0       	rjmp	.+38     	; 0x2010 <Servo_SetAngle+0xb0>
	{
	case SERVO1: TIM1_setDutyCycle(SERVO1_CH, 1000 + ((u16) tmp)); break;
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	9c 01       	movw	r18, r24
    1ff0:	28 51       	subi	r18, 0x18	; 24
    1ff2:	3c 4f       	sbci	r19, 0xFC	; 252
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	b9 01       	movw	r22, r18
    1ff8:	0e 94 bb 07 	call	0xf76	; 0xf76 <TIM1_setDutyCycle>
    1ffc:	09 c0       	rjmp	.+18     	; 0x2010 <Servo_SetAngle+0xb0>
	case SERVO2: TIM1_setDutyCycle(SERVO2_CH, 1000 + ((u16) tmp)); break;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	9c 01       	movw	r18, r24
    2004:	28 51       	subi	r18, 0x18	; 24
    2006:	3c 4f       	sbci	r19, 0xFC	; 252
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	b9 01       	movw	r22, r18
    200c:	0e 94 bb 07 	call	0xf76	; 0xf76 <TIM1_setDutyCycle>
	}

}
    2010:	28 96       	adiw	r28, 0x08	; 8
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <Motor_Init>:
#include "Motor_config.h"
#include "Motor_interface.h"
#include <util/delay.h>

void Motor_Init(void)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(MOTOR_CCW_PORT, MOTOR_CCW_PIN, OUTPUT);
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_CW_PORT, MOTOR_CW_PIN, OUTPUT);
    2034:	83 e0       	ldi	r24, 0x03	; 3
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	Motor_Stop();
    203e:	0e 94 41 11 	call	0x2282	; 0x2282 <Motor_Stop>
}
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <Motor_SetDirection>:
void Motor_SetDirection(u8 L_u8Direction)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	6f 97       	sbiw	r28, 0x1f	; 31
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	8d 8f       	std	Y+29, r24	; 0x1d
	switch(L_u8Direction)
    205e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	3f 8f       	std	Y+31, r19	; 0x1f
    2066:	2e 8f       	std	Y+30, r18	; 0x1e
    2068:	8e 8d       	ldd	r24, Y+30	; 0x1e
    206a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	39 f0       	breq	.+14     	; 0x207e <Motor_SetDirection+0x36>
    2070:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2072:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2074:	21 30       	cpi	r18, 0x01	; 1
    2076:	31 05       	cpc	r19, r1
    2078:	09 f4       	brne	.+2      	; 0x207c <Motor_SetDirection+0x34>
    207a:	7e c0       	rjmp	.+252    	; 0x2178 <Motor_SetDirection+0x130>
    207c:	f9 c0       	rjmp	.+498    	; 0x2270 <Motor_SetDirection+0x228>
	{
	case MOTOR_CW:
		DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, LOW);
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	61 e0       	ldi	r22, 0x01	; 1
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e8       	ldi	r26, 0x80	; 128
    208e:	bf e3       	ldi	r27, 0x3F	; 63
    2090:	89 8f       	std	Y+25, r24	; 0x19
    2092:	9a 8f       	std	Y+26, r25	; 0x1a
    2094:	ab 8f       	std	Y+27, r26	; 0x1b
    2096:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2098:	69 8d       	ldd	r22, Y+25	; 0x19
    209a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    209c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    209e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	53 e4       	ldi	r21, 0x43	; 67
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	8d 8b       	std	Y+21, r24	; 0x15
    20b2:	9e 8b       	std	Y+22, r25	; 0x16
    20b4:	af 8b       	std	Y+23, r26	; 0x17
    20b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ba:	7e 89       	ldd	r23, Y+22	; 0x16
    20bc:	8f 89       	ldd	r24, Y+23	; 0x17
    20be:	98 8d       	ldd	r25, Y+24	; 0x18
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	2c f4       	brge	.+10     	; 0x20da <Motor_SetDirection+0x92>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9c 8b       	std	Y+20, r25	; 0x14
    20d6:	8b 8b       	std	Y+19, r24	; 0x13
    20d8:	3f c0       	rjmp	.+126    	; 0x2158 <Motor_SetDirection+0x110>
	else if (__tmp > 65535)
    20da:	6d 89       	ldd	r22, Y+21	; 0x15
    20dc:	7e 89       	ldd	r23, Y+22	; 0x16
    20de:	8f 89       	ldd	r24, Y+23	; 0x17
    20e0:	98 8d       	ldd	r25, Y+24	; 0x18
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	4c f5       	brge	.+82     	; 0x2144 <Motor_SetDirection+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	69 8d       	ldd	r22, Y+25	; 0x19
    20f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9c 8b       	std	Y+20, r25	; 0x14
    2118:	8b 8b       	std	Y+19, r24	; 0x13
    211a:	0f c0       	rjmp	.+30     	; 0x213a <Motor_SetDirection+0xf2>
    211c:	89 e1       	ldi	r24, 0x19	; 25
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9a 8b       	std	Y+18, r25	; 0x12
    2122:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2124:	89 89       	ldd	r24, Y+17	; 0x11
    2126:	9a 89       	ldd	r25, Y+18	; 0x12
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <Motor_SetDirection+0xe0>
    212c:	9a 8b       	std	Y+18, r25	; 0x12
    212e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	9c 89       	ldd	r25, Y+20	; 0x14
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <Motor_SetDirection+0xd4>
    2142:	14 c0       	rjmp	.+40     	; 0x216c <Motor_SetDirection+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	6d 89       	ldd	r22, Y+21	; 0x15
    2146:	7e 89       	ldd	r23, Y+22	; 0x16
    2148:	8f 89       	ldd	r24, Y+23	; 0x17
    214a:	98 8d       	ldd	r25, Y+24	; 0x18
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9c 8b       	std	Y+20, r25	; 0x14
    2156:	8b 8b       	std	Y+19, r24	; 0x13
    2158:	8b 89       	ldd	r24, Y+19	; 0x13
    215a:	9c 89       	ldd	r25, Y+20	; 0x14
    215c:	98 8b       	std	Y+16, r25	; 0x10
    215e:	8f 87       	std	Y+15, r24	; 0x0f
    2160:	8f 85       	ldd	r24, Y+15	; 0x0f
    2162:	98 89       	ldd	r25, Y+16	; 0x10
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <Motor_SetDirection+0x11c>
    2168:	98 8b       	std	Y+16, r25	; 0x10
    216a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, HIGH);
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
    2176:	7c c0       	rjmp	.+248    	; 0x2270 <Motor_SetDirection+0x228>
		break;
	case MOTOR_CCW:
		DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, LOW);
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	8b 87       	std	Y+11, r24	; 0x0b
    218c:	9c 87       	std	Y+12, r25	; 0x0c
    218e:	ad 87       	std	Y+13, r26	; 0x0d
    2190:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6b 85       	ldd	r22, Y+11	; 0x0b
    2194:	7c 85       	ldd	r23, Y+12	; 0x0c
    2196:	8d 85       	ldd	r24, Y+13	; 0x0d
    2198:	9e 85       	ldd	r25, Y+14	; 0x0e
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	53 e4       	ldi	r21, 0x43	; 67
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8f 83       	std	Y+7, r24	; 0x07
    21ac:	98 87       	std	Y+8, r25	; 0x08
    21ae:	a9 87       	std	Y+9, r26	; 0x09
    21b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b2:	6f 81       	ldd	r22, Y+7	; 0x07
    21b4:	78 85       	ldd	r23, Y+8	; 0x08
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <Motor_SetDirection+0x18c>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <Motor_SetDirection+0x20a>
	else if (__tmp > 65535)
    21d4:	6f 81       	ldd	r22, Y+7	; 0x07
    21d6:	78 85       	ldd	r23, Y+8	; 0x08
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <Motor_SetDirection+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <Motor_SetDirection+0x1ec>
    2216:	89 e1       	ldi	r24, 0x19	; 25
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9c 83       	std	Y+4, r25	; 0x04
    221c:	8b 83       	std	Y+3, r24	; 0x03
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <Motor_SetDirection+0x1da>
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <Motor_SetDirection+0x1ce>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <Motor_SetDirection+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	6f 81       	ldd	r22, Y+7	; 0x07
    2240:	78 85       	ldd	r23, Y+8	; 0x08
    2242:	89 85       	ldd	r24, Y+9	; 0x09
    2244:	9a 85       	ldd	r25, Y+10	; 0x0a
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	9a 83       	std	Y+2, r25	; 0x02
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <Motor_SetDirection+0x216>
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, HIGH);
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	61 e0       	ldi	r22, 0x01	; 1
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
		break;
	}
}
    2270:	6f 96       	adiw	r28, 0x1f	; 31
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <Motor_Stop>:
void Motor_Stop(void)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, LOW);
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, LOW);
    2294:	83 e0       	ldi	r24, 0x03	; 3
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
}
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LED_voidInit>:
#include "LED_private.h"
#include "LED_config.h"
#include "LED_interface.h"

void LED_voidInit()
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	0f 92       	push	r0
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
	for(u8 i =0; i< NO_LEDS; i++)
    22ae:	19 82       	std	Y+1, r1	; 0x01
    22b0:	1a c0       	rjmp	.+52     	; 0x22e6 <LED_voidInit+0x42>
	DIO_u8SetPinDirection(leds[i].port, leds[i].pin, OUTPUT);
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	fc 01       	movw	r30, r24
    22be:	e2 58       	subi	r30, 0x82	; 130
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	20 81       	ld	r18, Z
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	88 2f       	mov	r24, r24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	fc 01       	movw	r30, r24
    22d0:	e1 58       	subi	r30, 0x81	; 129
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	90 81       	ld	r25, Z
    22d6:	82 2f       	mov	r24, r18
    22d8:	69 2f       	mov	r22, r25
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
#include "LED_config.h"
#include "LED_interface.h"

void LED_voidInit()
{
	for(u8 i =0; i< NO_LEDS; i++)
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	85 30       	cpi	r24, 0x05	; 5
    22ea:	18 f3       	brcs	.-58     	; 0x22b2 <LED_voidInit+0xe>
	DIO_u8SetPinDirection(leds[i].port, leds[i].pin, OUTPUT);
}
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <LED_voidSetLEDHigh>:

void LED_voidSetLEDHigh(u8 L_u8led)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	0f 92       	push	r0
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	89 83       	std	Y+1, r24	; 0x01
	if(L_u8led < NO_LEDS)
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	85 30       	cpi	r24, 0x05	; 5
    2304:	b8 f4       	brcc	.+46     	; 0x2334 <LED_voidSetLEDHigh+0x40>
	{
		DIO_u8SetPinValue(leds[L_u8led].port, leds[L_u8led].pin, HIGH);
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	fc 01       	movw	r30, r24
    2312:	e2 58       	subi	r30, 0x82	; 130
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	20 81       	ld	r18, Z
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	fc 01       	movw	r30, r24
    2324:	e1 58       	subi	r30, 0x81	; 129
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	90 81       	ld	r25, Z
    232a:	82 2f       	mov	r24, r18
    232c:	69 2f       	mov	r22, r25
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
	}
}
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <LED_voidSetLEDLow>:

void LED_voidSetLEDLow(u8 L_u8led)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	0f 92       	push	r0
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	89 83       	std	Y+1, r24	; 0x01
	if(L_u8led < NO_LEDS)
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	85 30       	cpi	r24, 0x05	; 5
    234c:	b8 f4       	brcc	.+46     	; 0x237c <LED_voidSetLEDLow+0x40>
	{
		DIO_u8SetPinValue(leds[L_u8led].port, leds[L_u8led].pin, LOW);
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	fc 01       	movw	r30, r24
    235a:	e2 58       	subi	r30, 0x82	; 130
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	20 81       	ld	r18, Z
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	fc 01       	movw	r30, r24
    236c:	e1 58       	subi	r30, 0x81	; 129
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	90 81       	ld	r25, Z
    2372:	82 2f       	mov	r24, r18
    2374:	69 2f       	mov	r22, r25
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
	}
}
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "LCD_interface.h"

void LCD_voidInit(void)
{
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	c6 54       	subi	r28, 0x46	; 70
    2392:	d0 40       	sbci	r29, 0x00	; 0
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, OUTPUT);
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, OUTPUT);
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	61 e0       	ldi	r22, 0x01	; 1
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_EN_PIN, OUTPUT);
    23b2:	83 e0       	ldi	r24, 0x03	; 3
    23b4:	62 e0       	ldi	r22, 0x02	; 2
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>

	//Set data pins direction
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN0, OUTPUT);
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN1, OUTPUT);
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	61 e0       	ldi	r22, 0x01	; 1
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN2, OUTPUT);
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	62 e0       	ldi	r22, 0x02	; 2
    23d4:	41 e0       	ldi	r20, 0x01	; 1
    23d6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN3, OUTPUT);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	63 e0       	ldi	r22, 0x03	; 3
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN4, OUTPUT);
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	64 e0       	ldi	r22, 0x04	; 4
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN5, OUTPUT);
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	65 e0       	ldi	r22, 0x05	; 5
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN6, OUTPUT);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	66 e0       	ldi	r22, 0x06	; 6
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN7, OUTPUT);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	67 e0       	ldi	r22, 0x07	; 7
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
    240c:	fe 01       	movw	r30, r28
    240e:	ed 5b       	subi	r30, 0xBD	; 189
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 ef       	ldi	r26, 0xF0	; 240
    2418:	b1 e4       	ldi	r27, 0x41	; 65
    241a:	80 83       	st	Z, r24
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	a2 83       	std	Z+2, r26	; 0x02
    2420:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	8e 01       	movw	r16, r28
    2424:	01 5c       	subi	r16, 0xC1	; 193
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	fe 01       	movw	r30, r28
    242a:	ed 5b       	subi	r30, 0xBD	; 189
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4a e7       	ldi	r20, 0x7A	; 122
    243c:	53 e4       	ldi	r21, 0x43	; 67
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	f8 01       	movw	r30, r16
    2448:	80 83       	st	Z, r24
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	a2 83       	std	Z+2, r26	; 0x02
    244e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2450:	fe 01       	movw	r30, r28
    2452:	ff 96       	adiw	r30, 0x3f	; 63
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <LCD_voidInit+0xf2>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9e af       	std	Y+62, r25	; 0x3e
    2472:	8d af       	std	Y+61, r24	; 0x3d
    2474:	46 c0       	rjmp	.+140    	; 0x2502 <LCD_voidInit+0x17e>
	else if (__tmp > 65535)
    2476:	fe 01       	movw	r30, r28
    2478:	ff 96       	adiw	r30, 0x3f	; 63
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	3f ef       	ldi	r19, 0xFF	; 255
    2486:	4f e7       	ldi	r20, 0x7F	; 127
    2488:	57 e4       	ldi	r21, 0x47	; 71
    248a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248e:	18 16       	cp	r1, r24
    2490:	64 f5       	brge	.+88     	; 0x24ea <LCD_voidInit+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2492:	fe 01       	movw	r30, r28
    2494:	ed 5b       	subi	r30, 0xBD	; 189
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9e af       	std	Y+62, r25	; 0x3e
    24be:	8d af       	std	Y+61, r24	; 0x3d
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <LCD_voidInit+0x15c>
    24c2:	89 e1       	ldi	r24, 0x19	; 25
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9c af       	std	Y+60, r25	; 0x3c
    24c8:	8b af       	std	Y+59, r24	; 0x3b
    24ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    24cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_voidInit+0x14a>
    24d2:	9c af       	std	Y+60, r25	; 0x3c
    24d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	9e af       	std	Y+62, r25	; 0x3e
    24de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    24e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <LCD_voidInit+0x13e>
    24e8:	16 c0       	rjmp	.+44     	; 0x2516 <LCD_voidInit+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	fe 01       	movw	r30, r28
    24ec:	ff 96       	adiw	r30, 0x3f	; 63
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9e af       	std	Y+62, r25	; 0x3e
    2500:	8d af       	std	Y+61, r24	; 0x3d
    2502:	8d ad       	ldd	r24, Y+61	; 0x3d
    2504:	9e ad       	ldd	r25, Y+62	; 0x3e
    2506:	9a af       	std	Y+58, r25	; 0x3a
    2508:	89 af       	std	Y+57, r24	; 0x39
    250a:	89 ad       	ldd	r24, Y+57	; 0x39
    250c:	9a ad       	ldd	r25, Y+58	; 0x3a
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_voidInit+0x18a>
    2512:	9a af       	std	Y+58, r25	; 0x3a
    2514:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(30);

	LCD_voidSendCommand(0x33); /* Init. */
    2516:	83 e3       	ldi	r24, 0x33	; 51
    2518:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x32); /* Init. */
    251c:	82 e3       	ldi	r24, 0x32	; 50
    251e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_voidSendCommand>

	LCD_voidSendCommand(LCD_FUNCTION_8BIT_2LINE);
    2522:	88 e3       	ldi	r24, 0x38	; 56
    2524:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_voidSendCommand>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a0 e8       	ldi	r26, 0x80	; 128
    252e:	bf e3       	ldi	r27, 0x3F	; 63
    2530:	8d ab       	std	Y+53, r24	; 0x35
    2532:	9e ab       	std	Y+54, r25	; 0x36
    2534:	af ab       	std	Y+55, r26	; 0x37
    2536:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6d a9       	ldd	r22, Y+53	; 0x35
    253a:	7e a9       	ldd	r23, Y+54	; 0x36
    253c:	8f a9       	ldd	r24, Y+55	; 0x37
    253e:	98 ad       	ldd	r25, Y+56	; 0x38
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	89 ab       	std	Y+49, r24	; 0x31
    2552:	9a ab       	std	Y+50, r25	; 0x32
    2554:	ab ab       	std	Y+51, r26	; 0x33
    2556:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2558:	69 a9       	ldd	r22, Y+49	; 0x31
    255a:	7a a9       	ldd	r23, Y+50	; 0x32
    255c:	8b a9       	ldd	r24, Y+51	; 0x33
    255e:	9c a9       	ldd	r25, Y+52	; 0x34
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <LCD_voidInit+0x1f6>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	98 ab       	std	Y+48, r25	; 0x30
    2576:	8f a7       	std	Y+47, r24	; 0x2f
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <LCD_voidInit+0x274>
	else if (__tmp > 65535)
    257a:	69 a9       	ldd	r22, Y+49	; 0x31
    257c:	7a a9       	ldd	r23, Y+50	; 0x32
    257e:	8b a9       	ldd	r24, Y+51	; 0x33
    2580:	9c a9       	ldd	r25, Y+52	; 0x34
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <LCD_voidInit+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6d a9       	ldd	r22, Y+53	; 0x35
    2594:	7e a9       	ldd	r23, Y+54	; 0x36
    2596:	8f a9       	ldd	r24, Y+55	; 0x37
    2598:	98 ad       	ldd	r25, Y+56	; 0x38
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	98 ab       	std	Y+48, r25	; 0x30
    25b8:	8f a7       	std	Y+47, r24	; 0x2f
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <LCD_voidInit+0x256>
    25bc:	89 e1       	ldi	r24, 0x19	; 25
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9e a7       	std	Y+46, r25	; 0x2e
    25c2:	8d a7       	std	Y+45, r24	; 0x2d
    25c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    25c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_voidInit+0x244>
    25cc:	9e a7       	std	Y+46, r25	; 0x2e
    25ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d2:	98 a9       	ldd	r25, Y+48	; 0x30
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	98 ab       	std	Y+48, r25	; 0x30
    25d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8f a5       	ldd	r24, Y+47	; 0x2f
    25dc:	98 a9       	ldd	r25, Y+48	; 0x30
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <LCD_voidInit+0x238>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <LCD_voidInit+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	69 a9       	ldd	r22, Y+49	; 0x31
    25e6:	7a a9       	ldd	r23, Y+50	; 0x32
    25e8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ea:	9c a9       	ldd	r25, Y+52	; 0x34
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	98 ab       	std	Y+48, r25	; 0x30
    25f6:	8f a7       	std	Y+47, r24	; 0x2f
    25f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25fa:	98 a9       	ldd	r25, Y+48	; 0x30
    25fc:	9c a7       	std	Y+44, r25	; 0x2c
    25fe:	8b a7       	std	Y+43, r24	; 0x2b
    2600:	8b a5       	ldd	r24, Y+43	; 0x2b
    2602:	9c a5       	ldd	r25, Y+44	; 0x2c
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_voidInit+0x280>
    2608:	9c a7       	std	Y+44, r25	; 0x2c
    260a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DISPLAY_ON);
    260c:	8c e0       	ldi	r24, 0x0C	; 12
    260e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_voidSendCommand>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a0 e8       	ldi	r26, 0x80	; 128
    2618:	bf e3       	ldi	r27, 0x3F	; 63
    261a:	8f a3       	std	Y+39, r24	; 0x27
    261c:	98 a7       	std	Y+40, r25	; 0x28
    261e:	a9 a7       	std	Y+41, r26	; 0x29
    2620:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	6f a1       	ldd	r22, Y+39	; 0x27
    2624:	78 a5       	ldd	r23, Y+40	; 0x28
    2626:	89 a5       	ldd	r24, Y+41	; 0x29
    2628:	9a a5       	ldd	r25, Y+42	; 0x2a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a e7       	ldi	r20, 0x7A	; 122
    2630:	53 e4       	ldi	r21, 0x43	; 67
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8b a3       	std	Y+35, r24	; 0x23
    263c:	9c a3       	std	Y+36, r25	; 0x24
    263e:	ad a3       	std	Y+37, r26	; 0x25
    2640:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2642:	6b a1       	ldd	r22, Y+35	; 0x23
    2644:	7c a1       	ldd	r23, Y+36	; 0x24
    2646:	8d a1       	ldd	r24, Y+37	; 0x25
    2648:	9e a1       	ldd	r25, Y+38	; 0x26
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <LCD_voidInit+0x2e0>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9a a3       	std	Y+34, r25	; 0x22
    2660:	89 a3       	std	Y+33, r24	; 0x21
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <LCD_voidInit+0x35e>
	else if (__tmp > 65535)
    2664:	6b a1       	ldd	r22, Y+35	; 0x23
    2666:	7c a1       	ldd	r23, Y+36	; 0x24
    2668:	8d a1       	ldd	r24, Y+37	; 0x25
    266a:	9e a1       	ldd	r25, Y+38	; 0x26
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <LCD_voidInit+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	6f a1       	ldd	r22, Y+39	; 0x27
    267e:	78 a5       	ldd	r23, Y+40	; 0x28
    2680:	89 a5       	ldd	r24, Y+41	; 0x29
    2682:	9a a5       	ldd	r25, Y+42	; 0x2a
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9a a3       	std	Y+34, r25	; 0x22
    26a2:	89 a3       	std	Y+33, r24	; 0x21
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <LCD_voidInit+0x340>
    26a6:	89 e1       	ldi	r24, 0x19	; 25
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	98 a3       	std	Y+32, r25	; 0x20
    26ac:	8f 8f       	std	Y+31, r24	; 0x1f
    26ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26b0:	98 a1       	ldd	r25, Y+32	; 0x20
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_voidInit+0x32e>
    26b6:	98 a3       	std	Y+32, r25	; 0x20
    26b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	89 a1       	ldd	r24, Y+33	; 0x21
    26bc:	9a a1       	ldd	r25, Y+34	; 0x22
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9a a3       	std	Y+34, r25	; 0x22
    26c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	89 a1       	ldd	r24, Y+33	; 0x21
    26c6:	9a a1       	ldd	r25, Y+34	; 0x22
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <LCD_voidInit+0x322>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <LCD_voidInit+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6b a1       	ldd	r22, Y+35	; 0x23
    26d0:	7c a1       	ldd	r23, Y+36	; 0x24
    26d2:	8d a1       	ldd	r24, Y+37	; 0x25
    26d4:	9e a1       	ldd	r25, Y+38	; 0x26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9a a3       	std	Y+34, r25	; 0x22
    26e0:	89 a3       	std	Y+33, r24	; 0x21
    26e2:	89 a1       	ldd	r24, Y+33	; 0x21
    26e4:	9a a1       	ldd	r25, Y+34	; 0x22
    26e6:	9e 8f       	std	Y+30, r25	; 0x1e
    26e8:	8d 8f       	std	Y+29, r24	; 0x1d
    26ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_voidInit+0x36a>
    26f2:	9e 8f       	std	Y+30, r25	; 0x1e
    26f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_voidSendCommand>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	a0 ea       	ldi	r26, 0xA0	; 160
    2702:	b0 e4       	ldi	r27, 0x40	; 64
    2704:	89 8f       	std	Y+25, r24	; 0x19
    2706:	9a 8f       	std	Y+26, r25	; 0x1a
    2708:	ab 8f       	std	Y+27, r26	; 0x1b
    270a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270c:	69 8d       	ldd	r22, Y+25	; 0x19
    270e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4a e7       	ldi	r20, 0x7A	; 122
    271a:	53 e4       	ldi	r21, 0x43	; 67
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	8d 8b       	std	Y+21, r24	; 0x15
    2726:	9e 8b       	std	Y+22, r25	; 0x16
    2728:	af 8b       	std	Y+23, r26	; 0x17
    272a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    272c:	6d 89       	ldd	r22, Y+21	; 0x15
    272e:	7e 89       	ldd	r23, Y+22	; 0x16
    2730:	8f 89       	ldd	r24, Y+23	; 0x17
    2732:	98 8d       	ldd	r25, Y+24	; 0x18
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	2c f4       	brge	.+10     	; 0x274e <LCD_voidInit+0x3ca>
		__ticks = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9c 8b       	std	Y+20, r25	; 0x14
    274a:	8b 8b       	std	Y+19, r24	; 0x13
    274c:	3f c0       	rjmp	.+126    	; 0x27cc <LCD_voidInit+0x448>
	else if (__tmp > 65535)
    274e:	6d 89       	ldd	r22, Y+21	; 0x15
    2750:	7e 89       	ldd	r23, Y+22	; 0x16
    2752:	8f 89       	ldd	r24, Y+23	; 0x17
    2754:	98 8d       	ldd	r25, Y+24	; 0x18
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	4f e7       	ldi	r20, 0x7F	; 127
    275c:	57 e4       	ldi	r21, 0x47	; 71
    275e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2762:	18 16       	cp	r1, r24
    2764:	4c f5       	brge	.+82     	; 0x27b8 <LCD_voidInit+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2766:	69 8d       	ldd	r22, Y+25	; 0x19
    2768:	7a 8d       	ldd	r23, Y+26	; 0x1a
    276a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    276c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e2       	ldi	r20, 0x20	; 32
    2774:	51 e4       	ldi	r21, 0x41	; 65
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	bc 01       	movw	r22, r24
    2780:	cd 01       	movw	r24, r26
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	9c 8b       	std	Y+20, r25	; 0x14
    278c:	8b 8b       	std	Y+19, r24	; 0x13
    278e:	0f c0       	rjmp	.+30     	; 0x27ae <LCD_voidInit+0x42a>
    2790:	89 e1       	ldi	r24, 0x19	; 25
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9a 8b       	std	Y+18, r25	; 0x12
    2796:	89 8b       	std	Y+17, r24	; 0x11
    2798:	89 89       	ldd	r24, Y+17	; 0x11
    279a:	9a 89       	ldd	r25, Y+18	; 0x12
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <LCD_voidInit+0x418>
    27a0:	9a 8b       	std	Y+18, r25	; 0x12
    27a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a4:	8b 89       	ldd	r24, Y+19	; 0x13
    27a6:	9c 89       	ldd	r25, Y+20	; 0x14
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	9c 8b       	std	Y+20, r25	; 0x14
    27ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ae:	8b 89       	ldd	r24, Y+19	; 0x13
    27b0:	9c 89       	ldd	r25, Y+20	; 0x14
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	69 f7       	brne	.-38     	; 0x2790 <LCD_voidInit+0x40c>
    27b6:	14 c0       	rjmp	.+40     	; 0x27e0 <LCD_voidInit+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9c 8b       	std	Y+20, r25	; 0x14
    27ca:	8b 8b       	std	Y+19, r24	; 0x13
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	98 8b       	std	Y+16, r25	; 0x10
    27d2:	8f 87       	std	Y+15, r24	; 0x0f
    27d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d6:	98 89       	ldd	r25, Y+16	; 0x10
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <LCD_voidInit+0x454>
    27dc:	98 8b       	std	Y+16, r25	; 0x10
    27de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(LCD_ENTRY_MODE_INC);
    27e0:	86 e0       	ldi	r24, 0x06	; 6
    27e2:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_voidSendCommand>
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	a0 e0       	ldi	r26, 0x00	; 0
    27ec:	b0 e4       	ldi	r27, 0x40	; 64
    27ee:	8b 87       	std	Y+11, r24	; 0x0b
    27f0:	9c 87       	std	Y+12, r25	; 0x0c
    27f2:	ad 87       	std	Y+13, r26	; 0x0d
    27f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a e7       	ldi	r20, 0x7A	; 122
    2804:	53 e4       	ldi	r21, 0x43	; 67
    2806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	8f 83       	std	Y+7, r24	; 0x07
    2810:	98 87       	std	Y+8, r25	; 0x08
    2812:	a9 87       	std	Y+9, r26	; 0x09
    2814:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2816:	6f 81       	ldd	r22, Y+7	; 0x07
    2818:	78 85       	ldd	r23, Y+8	; 0x08
    281a:	89 85       	ldd	r24, Y+9	; 0x09
    281c:	9a 85       	ldd	r25, Y+10	; 0x0a
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282a:	88 23       	and	r24, r24
    282c:	2c f4       	brge	.+10     	; 0x2838 <LCD_voidInit+0x4b4>
		__ticks = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9e 83       	std	Y+6, r25	; 0x06
    2834:	8d 83       	std	Y+5, r24	; 0x05
    2836:	3f c0       	rjmp	.+126    	; 0x28b6 <LCD_voidInit+0x532>
	else if (__tmp > 65535)
    2838:	6f 81       	ldd	r22, Y+7	; 0x07
    283a:	78 85       	ldd	r23, Y+8	; 0x08
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	3f ef       	ldi	r19, 0xFF	; 255
    2844:	4f e7       	ldi	r20, 0x7F	; 127
    2846:	57 e4       	ldi	r21, 0x47	; 71
    2848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284c:	18 16       	cp	r1, r24
    284e:	4c f5       	brge	.+82     	; 0x28a2 <LCD_voidInit+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2850:	6b 85       	ldd	r22, Y+11	; 0x0b
    2852:	7c 85       	ldd	r23, Y+12	; 0x0c
    2854:	8d 85       	ldd	r24, Y+13	; 0x0d
    2856:	9e 85       	ldd	r25, Y+14	; 0x0e
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e2       	ldi	r20, 0x20	; 32
    285e:	51 e4       	ldi	r21, 0x41	; 65
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	bc 01       	movw	r22, r24
    286a:	cd 01       	movw	r24, r26
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <LCD_voidInit+0x514>
    287a:	89 e1       	ldi	r24, 0x19	; 25
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9c 83       	std	Y+4, r25	; 0x04
    2880:	8b 83       	std	Y+3, r24	; 0x03
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	9c 81       	ldd	r25, Y+4	; 0x04
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_voidInit+0x502>
    288a:	9c 83       	std	Y+4, r25	; 0x04
    288c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	9e 83       	std	Y+6, r25	; 0x06
    2896:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	69 f7       	brne	.-38     	; 0x287a <LCD_voidInit+0x4f6>
    28a0:	14 c0       	rjmp	.+40     	; 0x28ca <LCD_voidInit+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a2:	6f 81       	ldd	r22, Y+7	; 0x07
    28a4:	78 85       	ldd	r23, Y+8	; 0x08
    28a6:	89 85       	ldd	r24, Y+9	; 0x09
    28a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	9a 83       	std	Y+2, r25	; 0x02
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	9a 81       	ldd	r25, Y+2	; 0x02
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <LCD_voidInit+0x53e>
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    28ca:	ca 5b       	subi	r28, 0xBA	; 186
    28cc:	df 4f       	sbci	r29, 0xFF	; 255
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 u8CmdCopy)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	e1 97       	sbiw	r28, 0x31	; 49
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
    28f6:	89 ab       	std	Y+49, r24	; 0x31
	DIO_u8SetPortValue(LCD_DATA_PORT, u8CmdCopy);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	69 a9       	ldd	r22, Y+49	; 0x31
    28fc:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, LOW);
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, LOW);
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	61 e0       	ldi	r22, 0x01	; 1
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    2914:	83 e0       	ldi	r24, 0x03	; 3
    2916:	62 e0       	ldi	r22, 0x02	; 2
    2918:	41 e0       	ldi	r20, 0x01	; 1
    291a:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a0 e8       	ldi	r26, 0x80	; 128
    2924:	bf e3       	ldi	r27, 0x3F	; 63
    2926:	8d a7       	std	Y+45, r24	; 0x2d
    2928:	9e a7       	std	Y+46, r25	; 0x2e
    292a:	af a7       	std	Y+47, r26	; 0x2f
    292c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    292e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2930:	7e a5       	ldd	r23, Y+46	; 0x2e
    2932:	8f a5       	ldd	r24, Y+47	; 0x2f
    2934:	98 a9       	ldd	r25, Y+48	; 0x30
    2936:	2b ea       	ldi	r18, 0xAB	; 171
    2938:	3a ea       	ldi	r19, 0xAA	; 170
    293a:	4a ea       	ldi	r20, 0xAA	; 170
    293c:	5e e3       	ldi	r21, 0x3E	; 62
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	89 a7       	std	Y+41, r24	; 0x29
    2948:	9a a7       	std	Y+42, r25	; 0x2a
    294a:	ab a7       	std	Y+43, r26	; 0x2b
    294c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    294e:	69 a5       	ldd	r22, Y+41	; 0x29
    2950:	7a a5       	ldd	r23, Y+42	; 0x2a
    2952:	8b a5       	ldd	r24, Y+43	; 0x2b
    2954:	9c a5       	ldd	r25, Y+44	; 0x2c
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	1c f4       	brge	.+6      	; 0x296c <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	88 a7       	std	Y+40, r24	; 0x28
    296a:	91 c0       	rjmp	.+290    	; 0x2a8e <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    296c:	69 a5       	ldd	r22, Y+41	; 0x29
    296e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2970:	8b a5       	ldd	r24, Y+43	; 0x2b
    2972:	9c a5       	ldd	r25, Y+44	; 0x2c
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	53 e4       	ldi	r21, 0x43	; 67
    297c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	0c f0       	brlt	.+2      	; 0x2986 <LCD_voidSendCommand+0xa4>
    2984:	7b c0       	rjmp	.+246    	; 0x2a7c <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2986:	6d a5       	ldd	r22, Y+45	; 0x2d
    2988:	7e a5       	ldd	r23, Y+46	; 0x2e
    298a:	8f a5       	ldd	r24, Y+47	; 0x2f
    298c:	98 a9       	ldd	r25, Y+48	; 0x30
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a e7       	ldi	r20, 0x7A	; 122
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	8c a3       	std	Y+36, r24	; 0x24
    29a0:	9d a3       	std	Y+37, r25	; 0x25
    29a2:	ae a3       	std	Y+38, r26	; 0x26
    29a4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a6:	6c a1       	ldd	r22, Y+36	; 0x24
    29a8:	7d a1       	ldd	r23, Y+37	; 0x25
    29aa:	8e a1       	ldd	r24, Y+38	; 0x26
    29ac:	9f a1       	ldd	r25, Y+39	; 0x27
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a e7       	ldi	r20, 0x7A	; 122
    29b4:	53 e4       	ldi	r21, 0x43	; 67
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	88 a3       	std	Y+32, r24	; 0x20
    29c0:	99 a3       	std	Y+33, r25	; 0x21
    29c2:	aa a3       	std	Y+34, r26	; 0x22
    29c4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29c6:	68 a1       	ldd	r22, Y+32	; 0x20
    29c8:	79 a1       	ldd	r23, Y+33	; 0x21
    29ca:	8a a1       	ldd	r24, Y+34	; 0x22
    29cc:	9b a1       	ldd	r25, Y+35	; 0x23
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29da:	88 23       	and	r24, r24
    29dc:	2c f4       	brge	.+10     	; 0x29e8 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	9f 8f       	std	Y+31, r25	; 0x1f
    29e4:	8e 8f       	std	Y+30, r24	; 0x1e
    29e6:	3f c0       	rjmp	.+126    	; 0x2a66 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    29e8:	68 a1       	ldd	r22, Y+32	; 0x20
    29ea:	79 a1       	ldd	r23, Y+33	; 0x21
    29ec:	8a a1       	ldd	r24, Y+34	; 0x22
    29ee:	9b a1       	ldd	r25, Y+35	; 0x23
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	3f ef       	ldi	r19, 0xFF	; 255
    29f4:	4f e7       	ldi	r20, 0x7F	; 127
    29f6:	57 e4       	ldi	r21, 0x47	; 71
    29f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fc:	18 16       	cp	r1, r24
    29fe:	4c f5       	brge	.+82     	; 0x2a52 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	6c a1       	ldd	r22, Y+36	; 0x24
    2a02:	7d a1       	ldd	r23, Y+37	; 0x25
    2a04:	8e a1       	ldd	r24, Y+38	; 0x26
    2a06:	9f a1       	ldd	r25, Y+39	; 0x27
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	51 e4       	ldi	r21, 0x41	; 65
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9f 8f       	std	Y+31, r25	; 0x1f
    2a26:	8e 8f       	std	Y+30, r24	; 0x1e
    2a28:	0f c0       	rjmp	.+30     	; 0x2a48 <LCD_voidSendCommand+0x166>
    2a2a:	89 e1       	ldi	r24, 0x19	; 25
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9d 8f       	std	Y+29, r25	; 0x1d
    2a30:	8c 8f       	std	Y+28, r24	; 0x1c
    2a32:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a34:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_voidSendCommand+0x154>
    2a3a:	9d 8f       	std	Y+29, r25	; 0x1d
    2a3c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	9f 8f       	std	Y+31, r25	; 0x1f
    2a46:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <LCD_voidSendCommand+0x148>
    2a50:	24 c0       	rjmp	.+72     	; 0x2a9a <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a52:	68 a1       	ldd	r22, Y+32	; 0x20
    2a54:	79 a1       	ldd	r23, Y+33	; 0x21
    2a56:	8a a1       	ldd	r24, Y+34	; 0x22
    2a58:	9b a1       	ldd	r25, Y+35	; 0x23
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	9f 8f       	std	Y+31, r25	; 0x1f
    2a64:	8e 8f       	std	Y+30, r24	; 0x1e
    2a66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a68:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a6a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a6c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a70:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <LCD_voidSendCommand+0x190>
    2a76:	9b 8f       	std	Y+27, r25	; 0x1b
    2a78:	8a 8f       	std	Y+26, r24	; 0x1a
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a7c:	69 a5       	ldd	r22, Y+41	; 0x29
    2a7e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	88 a7       	std	Y+40, r24	; 0x28
    2a8e:	88 a5       	ldd	r24, Y+40	; 0x28
    2a90:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a92:	89 8d       	ldd	r24, Y+25	; 0x19
    2a94:	8a 95       	dec	r24
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <LCD_voidSendCommand+0x1b2>
    2a98:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    2a9a:	83 e0       	ldi	r24, 0x03	; 3
    2a9c:	62 e0       	ldi	r22, 0x02	; 2
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	a8 ec       	ldi	r26, 0xC8	; 200
    2aaa:	b2 e4       	ldi	r27, 0x42	; 66
    2aac:	8d 8b       	std	Y+21, r24	; 0x15
    2aae:	9e 8b       	std	Y+22, r25	; 0x16
    2ab0:	af 8b       	std	Y+23, r26	; 0x17
    2ab2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aba:	98 8d       	ldd	r25, Y+24	; 0x18
    2abc:	2b ea       	ldi	r18, 0xAB	; 171
    2abe:	3a ea       	ldi	r19, 0xAA	; 170
    2ac0:	4a ea       	ldi	r20, 0xAA	; 170
    2ac2:	5e e3       	ldi	r21, 0x3E	; 62
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	89 8b       	std	Y+17, r24	; 0x11
    2ace:	9a 8b       	std	Y+18, r25	; 0x12
    2ad0:	ab 8b       	std	Y+19, r26	; 0x13
    2ad2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ad4:	69 89       	ldd	r22, Y+17	; 0x11
    2ad6:	7a 89       	ldd	r23, Y+18	; 0x12
    2ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ada:	9c 89       	ldd	r25, Y+20	; 0x14
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e8       	ldi	r20, 0x80	; 128
    2ae2:	5f e3       	ldi	r21, 0x3F	; 63
    2ae4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae8:	88 23       	and	r24, r24
    2aea:	1c f4       	brge	.+6      	; 0x2af2 <LCD_voidSendCommand+0x210>
		__ticks = 1;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	88 8b       	std	Y+16, r24	; 0x10
    2af0:	91 c0       	rjmp	.+290    	; 0x2c14 <LCD_voidSendCommand+0x332>
	else if (__tmp > 255)
    2af2:	69 89       	ldd	r22, Y+17	; 0x11
    2af4:	7a 89       	ldd	r23, Y+18	; 0x12
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	53 e4       	ldi	r21, 0x43	; 67
    2b02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	0c f0       	brlt	.+2      	; 0x2b0c <LCD_voidSendCommand+0x22a>
    2b0a:	7b c0       	rjmp	.+246    	; 0x2c02 <LCD_voidSendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    2b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b10:	8f 89       	ldd	r24, Y+23	; 0x17
    2b12:	98 8d       	ldd	r25, Y+24	; 0x18
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4a e7       	ldi	r20, 0x7A	; 122
    2b1a:	54 e4       	ldi	r21, 0x44	; 68
    2b1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8c 87       	std	Y+12, r24	; 0x0c
    2b26:	9d 87       	std	Y+13, r25	; 0x0d
    2b28:	ae 87       	std	Y+14, r26	; 0x0e
    2b2a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b30:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b32:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a e7       	ldi	r20, 0x7A	; 122
    2b3a:	53 e4       	ldi	r21, 0x43	; 67
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	88 87       	std	Y+8, r24	; 0x08
    2b46:	99 87       	std	Y+9, r25	; 0x09
    2b48:	aa 87       	std	Y+10, r26	; 0x0a
    2b4a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b4c:	68 85       	ldd	r22, Y+8	; 0x08
    2b4e:	79 85       	ldd	r23, Y+9	; 0x09
    2b50:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b52:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	2c f4       	brge	.+10     	; 0x2b6e <LCD_voidSendCommand+0x28c>
		__ticks = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9f 83       	std	Y+7, r25	; 0x07
    2b6a:	8e 83       	std	Y+6, r24	; 0x06
    2b6c:	3f c0       	rjmp	.+126    	; 0x2bec <LCD_voidSendCommand+0x30a>
	else if (__tmp > 65535)
    2b6e:	68 85       	ldd	r22, Y+8	; 0x08
    2b70:	79 85       	ldd	r23, Y+9	; 0x09
    2b72:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b74:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	3f ef       	ldi	r19, 0xFF	; 255
    2b7a:	4f e7       	ldi	r20, 0x7F	; 127
    2b7c:	57 e4       	ldi	r21, 0x47	; 71
    2b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b82:	18 16       	cp	r1, r24
    2b84:	4c f5       	brge	.+82     	; 0x2bd8 <LCD_voidSendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b88:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e2       	ldi	r20, 0x20	; 32
    2b94:	51 e4       	ldi	r21, 0x41	; 65
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9f 83       	std	Y+7, r25	; 0x07
    2bac:	8e 83       	std	Y+6, r24	; 0x06
    2bae:	0f c0       	rjmp	.+30     	; 0x2bce <LCD_voidSendCommand+0x2ec>
    2bb0:	89 e1       	ldi	r24, 0x19	; 25
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9d 83       	std	Y+5, r25	; 0x05
    2bb6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <LCD_voidSendCommand+0x2da>
    2bc0:	9d 83       	std	Y+5, r25	; 0x05
    2bc2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	9f 83       	std	Y+7, r25	; 0x07
    2bcc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bce:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd0:	9f 81       	ldd	r25, Y+7	; 0x07
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	69 f7       	brne	.-38     	; 0x2bb0 <LCD_voidSendCommand+0x2ce>
    2bd6:	24 c0       	rjmp	.+72     	; 0x2c20 <LCD_voidSendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd8:	68 85       	ldd	r22, Y+8	; 0x08
    2bda:	79 85       	ldd	r23, Y+9	; 0x09
    2bdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bde:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9f 83       	std	Y+7, r25	; 0x07
    2bea:	8e 83       	std	Y+6, r24	; 0x06
    2bec:	8e 81       	ldd	r24, Y+6	; 0x06
    2bee:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf0:	9b 83       	std	Y+3, r25	; 0x03
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <LCD_voidSendCommand+0x316>
    2bfc:	9b 83       	std	Y+3, r25	; 0x03
    2bfe:	8a 83       	std	Y+2, r24	; 0x02
    2c00:	0f c0       	rjmp	.+30     	; 0x2c20 <LCD_voidSendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c02:	69 89       	ldd	r22, Y+17	; 0x11
    2c04:	7a 89       	ldd	r23, Y+18	; 0x12
    2c06:	8b 89       	ldd	r24, Y+19	; 0x13
    2c08:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	88 8b       	std	Y+16, r24	; 0x10
    2c14:	88 89       	ldd	r24, Y+16	; 0x10
    2c16:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	8a 95       	dec	r24
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_voidSendCommand+0x338>
    2c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    2c20:	e1 96       	adiw	r28, 0x31	; 49
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <LCD_voidPrintChar>:

void LCD_voidPrintChar(u8 u8CharCopy)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	e1 97       	sbiw	r28, 0x31	; 49
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	89 ab       	std	Y+49, r24	; 0x31
	DIO_u8SetPortValue(LCD_DATA_PORT, u8CharCopy);
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c4c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8SetPortValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, HIGH);
    2c50:	83 e0       	ldi	r24, 0x03	; 3
    2c52:	60 e0       	ldi	r22, 0x00	; 0
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, LOW);
    2c5a:	83 e0       	ldi	r24, 0x03	; 3
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    2c64:	83 e0       	ldi	r24, 0x03	; 3
    2c66:	62 e0       	ldi	r22, 0x02	; 2
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	a0 e8       	ldi	r26, 0x80	; 128
    2c74:	bf e3       	ldi	r27, 0x3F	; 63
    2c76:	8d a7       	std	Y+45, r24	; 0x2d
    2c78:	9e a7       	std	Y+46, r25	; 0x2e
    2c7a:	af a7       	std	Y+47, r26	; 0x2f
    2c7c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c80:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c84:	98 a9       	ldd	r25, Y+48	; 0x30
    2c86:	2b ea       	ldi	r18, 0xAB	; 171
    2c88:	3a ea       	ldi	r19, 0xAA	; 170
    2c8a:	4a ea       	ldi	r20, 0xAA	; 170
    2c8c:	5e e3       	ldi	r21, 0x3E	; 62
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	89 a7       	std	Y+41, r24	; 0x29
    2c98:	9a a7       	std	Y+42, r25	; 0x2a
    2c9a:	ab a7       	std	Y+43, r26	; 0x2b
    2c9c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c9e:	69 a5       	ldd	r22, Y+41	; 0x29
    2ca0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e8       	ldi	r20, 0x80	; 128
    2cac:	5f e3       	ldi	r21, 0x3F	; 63
    2cae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb2:	88 23       	and	r24, r24
    2cb4:	1c f4       	brge	.+6      	; 0x2cbc <LCD_voidPrintChar+0x8a>
		__ticks = 1;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	88 a7       	std	Y+40, r24	; 0x28
    2cba:	91 c0       	rjmp	.+290    	; 0x2dde <LCD_voidPrintChar+0x1ac>
	else if (__tmp > 255)
    2cbc:	69 a5       	ldd	r22, Y+41	; 0x29
    2cbe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4f e7       	ldi	r20, 0x7F	; 127
    2cca:	53 e4       	ldi	r21, 0x43	; 67
    2ccc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd0:	18 16       	cp	r1, r24
    2cd2:	0c f0       	brlt	.+2      	; 0x2cd6 <LCD_voidPrintChar+0xa4>
    2cd4:	7b c0       	rjmp	.+246    	; 0x2dcc <LCD_voidPrintChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2cd6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cd8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cdc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	4a e7       	ldi	r20, 0x7A	; 122
    2ce4:	54 e4       	ldi	r21, 0x44	; 68
    2ce6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8c a3       	std	Y+36, r24	; 0x24
    2cf0:	9d a3       	std	Y+37, r25	; 0x25
    2cf2:	ae a3       	std	Y+38, r26	; 0x26
    2cf4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf6:	6c a1       	ldd	r22, Y+36	; 0x24
    2cf8:	7d a1       	ldd	r23, Y+37	; 0x25
    2cfa:	8e a1       	ldd	r24, Y+38	; 0x26
    2cfc:	9f a1       	ldd	r25, Y+39	; 0x27
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	4a e7       	ldi	r20, 0x7A	; 122
    2d04:	53 e4       	ldi	r21, 0x43	; 67
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	88 a3       	std	Y+32, r24	; 0x20
    2d10:	99 a3       	std	Y+33, r25	; 0x21
    2d12:	aa a3       	std	Y+34, r26	; 0x22
    2d14:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d16:	68 a1       	ldd	r22, Y+32	; 0x20
    2d18:	79 a1       	ldd	r23, Y+33	; 0x21
    2d1a:	8a a1       	ldd	r24, Y+34	; 0x22
    2d1c:	9b a1       	ldd	r25, Y+35	; 0x23
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e8       	ldi	r20, 0x80	; 128
    2d24:	5f e3       	ldi	r21, 0x3F	; 63
    2d26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d2a:	88 23       	and	r24, r24
    2d2c:	2c f4       	brge	.+10     	; 0x2d38 <LCD_voidPrintChar+0x106>
		__ticks = 1;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	9f 8f       	std	Y+31, r25	; 0x1f
    2d34:	8e 8f       	std	Y+30, r24	; 0x1e
    2d36:	3f c0       	rjmp	.+126    	; 0x2db6 <LCD_voidPrintChar+0x184>
	else if (__tmp > 65535)
    2d38:	68 a1       	ldd	r22, Y+32	; 0x20
    2d3a:	79 a1       	ldd	r23, Y+33	; 0x21
    2d3c:	8a a1       	ldd	r24, Y+34	; 0x22
    2d3e:	9b a1       	ldd	r25, Y+35	; 0x23
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	3f ef       	ldi	r19, 0xFF	; 255
    2d44:	4f e7       	ldi	r20, 0x7F	; 127
    2d46:	57 e4       	ldi	r21, 0x47	; 71
    2d48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d4c:	18 16       	cp	r1, r24
    2d4e:	4c f5       	brge	.+82     	; 0x2da2 <LCD_voidPrintChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d50:	6c a1       	ldd	r22, Y+36	; 0x24
    2d52:	7d a1       	ldd	r23, Y+37	; 0x25
    2d54:	8e a1       	ldd	r24, Y+38	; 0x26
    2d56:	9f a1       	ldd	r25, Y+39	; 0x27
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 e2       	ldi	r20, 0x20	; 32
    2d5e:	51 e4       	ldi	r21, 0x41	; 65
    2d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	bc 01       	movw	r22, r24
    2d6a:	cd 01       	movw	r24, r26
    2d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9f 8f       	std	Y+31, r25	; 0x1f
    2d76:	8e 8f       	std	Y+30, r24	; 0x1e
    2d78:	0f c0       	rjmp	.+30     	; 0x2d98 <LCD_voidPrintChar+0x166>
    2d7a:	89 e1       	ldi	r24, 0x19	; 25
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	9d 8f       	std	Y+29, r25	; 0x1d
    2d80:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <LCD_voidPrintChar+0x154>
    2d8a:	9d 8f       	std	Y+29, r25	; 0x1d
    2d8c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	9f 8f       	std	Y+31, r25	; 0x1f
    2d96:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	69 f7       	brne	.-38     	; 0x2d7a <LCD_voidPrintChar+0x148>
    2da0:	24 c0       	rjmp	.+72     	; 0x2dea <LCD_voidPrintChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da2:	68 a1       	ldd	r22, Y+32	; 0x20
    2da4:	79 a1       	ldd	r23, Y+33	; 0x21
    2da6:	8a a1       	ldd	r24, Y+34	; 0x22
    2da8:	9b a1       	ldd	r25, Y+35	; 0x23
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	9f 8f       	std	Y+31, r25	; 0x1f
    2db4:	8e 8f       	std	Y+30, r24	; 0x1e
    2db6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2db8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dba:	9b 8f       	std	Y+27, r25	; 0x1b
    2dbc:	8a 8f       	std	Y+26, r24	; 0x1a
    2dbe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dc0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	f1 f7       	brne	.-4      	; 0x2dc2 <LCD_voidPrintChar+0x190>
    2dc6:	9b 8f       	std	Y+27, r25	; 0x1b
    2dc8:	8a 8f       	std	Y+26, r24	; 0x1a
    2dca:	0f c0       	rjmp	.+30     	; 0x2dea <LCD_voidPrintChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dcc:	69 a5       	ldd	r22, Y+41	; 0x29
    2dce:	7a a5       	ldd	r23, Y+42	; 0x2a
    2dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	88 a7       	std	Y+40, r24	; 0x28
    2dde:	88 a5       	ldd	r24, Y+40	; 0x28
    2de0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2de2:	89 8d       	ldd	r24, Y+25	; 0x19
    2de4:	8a 95       	dec	r24
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <LCD_voidPrintChar+0x1b2>
    2de8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    2dea:	83 e0       	ldi	r24, 0x03	; 3
    2dec:	62 e0       	ldi	r22, 0x02	; 2
    2dee:	40 e0       	ldi	r20, 0x00	; 0
    2df0:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	a8 ec       	ldi	r26, 0xC8	; 200
    2dfa:	b2 e4       	ldi	r27, 0x42	; 66
    2dfc:	8d 8b       	std	Y+21, r24	; 0x15
    2dfe:	9e 8b       	std	Y+22, r25	; 0x16
    2e00:	af 8b       	std	Y+23, r26	; 0x17
    2e02:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e04:	6d 89       	ldd	r22, Y+21	; 0x15
    2e06:	7e 89       	ldd	r23, Y+22	; 0x16
    2e08:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0c:	2b ea       	ldi	r18, 0xAB	; 171
    2e0e:	3a ea       	ldi	r19, 0xAA	; 170
    2e10:	4a ea       	ldi	r20, 0xAA	; 170
    2e12:	5e e3       	ldi	r21, 0x3E	; 62
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	89 8b       	std	Y+17, r24	; 0x11
    2e1e:	9a 8b       	std	Y+18, r25	; 0x12
    2e20:	ab 8b       	std	Y+19, r26	; 0x13
    2e22:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e24:	69 89       	ldd	r22, Y+17	; 0x11
    2e26:	7a 89       	ldd	r23, Y+18	; 0x12
    2e28:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	1c f4       	brge	.+6      	; 0x2e42 <LCD_voidPrintChar+0x210>
		__ticks = 1;
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	88 8b       	std	Y+16, r24	; 0x10
    2e40:	91 c0       	rjmp	.+290    	; 0x2f64 <LCD_voidPrintChar+0x332>
	else if (__tmp > 255)
    2e42:	69 89       	ldd	r22, Y+17	; 0x11
    2e44:	7a 89       	ldd	r23, Y+18	; 0x12
    2e46:	8b 89       	ldd	r24, Y+19	; 0x13
    2e48:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4f e7       	ldi	r20, 0x7F	; 127
    2e50:	53 e4       	ldi	r21, 0x43	; 67
    2e52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e56:	18 16       	cp	r1, r24
    2e58:	0c f0       	brlt	.+2      	; 0x2e5c <LCD_voidPrintChar+0x22a>
    2e5a:	7b c0       	rjmp	.+246    	; 0x2f52 <LCD_voidPrintChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e60:	8f 89       	ldd	r24, Y+23	; 0x17
    2e62:	98 8d       	ldd	r25, Y+24	; 0x18
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a e7       	ldi	r20, 0x7A	; 122
    2e6a:	54 e4       	ldi	r21, 0x44	; 68
    2e6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	8c 87       	std	Y+12, r24	; 0x0c
    2e76:	9d 87       	std	Y+13, r25	; 0x0d
    2e78:	ae 87       	std	Y+14, r26	; 0x0e
    2e7a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e80:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e82:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a e7       	ldi	r20, 0x7A	; 122
    2e8a:	53 e4       	ldi	r21, 0x43	; 67
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	88 87       	std	Y+8, r24	; 0x08
    2e96:	99 87       	std	Y+9, r25	; 0x09
    2e98:	aa 87       	std	Y+10, r26	; 0x0a
    2e9a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e9c:	68 85       	ldd	r22, Y+8	; 0x08
    2e9e:	79 85       	ldd	r23, Y+9	; 0x09
    2ea0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ea2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <LCD_voidPrintChar+0x28c>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9f 83       	std	Y+7, r25	; 0x07
    2eba:	8e 83       	std	Y+6, r24	; 0x06
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <LCD_voidPrintChar+0x30a>
	else if (__tmp > 65535)
    2ebe:	68 85       	ldd	r22, Y+8	; 0x08
    2ec0:	79 85       	ldd	r23, Y+9	; 0x09
    2ec2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ec4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <LCD_voidPrintChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ed8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2eda:	8e 85       	ldd	r24, Y+14	; 0x0e
    2edc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9f 83       	std	Y+7, r25	; 0x07
    2efc:	8e 83       	std	Y+6, r24	; 0x06
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <LCD_voidPrintChar+0x2ec>
    2f00:	89 e1       	ldi	r24, 0x19	; 25
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9d 83       	std	Y+5, r25	; 0x05
    2f06:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f08:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <LCD_voidPrintChar+0x2da>
    2f10:	9d 83       	std	Y+5, r25	; 0x05
    2f12:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	8e 81       	ldd	r24, Y+6	; 0x06
    2f16:	9f 81       	ldd	r25, Y+7	; 0x07
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9f 83       	std	Y+7, r25	; 0x07
    2f1c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f20:	9f 81       	ldd	r25, Y+7	; 0x07
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <LCD_voidPrintChar+0x2ce>
    2f26:	24 c0       	rjmp	.+72     	; 0x2f70 <LCD_voidPrintChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	68 85       	ldd	r22, Y+8	; 0x08
    2f2a:	79 85       	ldd	r23, Y+9	; 0x09
    2f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9f 83       	std	Y+7, r25	; 0x07
    2f3a:	8e 83       	std	Y+6, r24	; 0x06
    2f3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f40:	9b 83       	std	Y+3, r25	; 0x03
    2f42:	8a 83       	std	Y+2, r24	; 0x02
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	9b 81       	ldd	r25, Y+3	; 0x03
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <LCD_voidPrintChar+0x316>
    2f4c:	9b 83       	std	Y+3, r25	; 0x03
    2f4e:	8a 83       	std	Y+2, r24	; 0x02
    2f50:	0f c0       	rjmp	.+30     	; 0x2f70 <LCD_voidPrintChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f52:	69 89       	ldd	r22, Y+17	; 0x11
    2f54:	7a 89       	ldd	r23, Y+18	; 0x12
    2f56:	8b 89       	ldd	r24, Y+19	; 0x13
    2f58:	9c 89       	ldd	r25, Y+20	; 0x14
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	88 8b       	std	Y+16, r24	; 0x10
    2f64:	88 89       	ldd	r24, Y+16	; 0x10
    2f66:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	8a 95       	dec	r24
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <LCD_voidPrintChar+0x338>
    2f6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    2f70:	e1 96       	adiw	r28, 0x31	; 49
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <LCD_voidPrintStr>:

void LCD_voidPrintStr(const s8 * s8StringCopy)
{
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	00 d0       	rcall	.+0      	; 0x2f88 <LCD_voidPrintStr+0x6>
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	9a 83       	std	Y+2, r25	; 0x02
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	0a c0       	rjmp	.+20     	; 0x2fa6 <LCD_voidPrintStr+0x24>
	while(* s8StringCopy)
	{
		LCD_voidPrintChar(* s8StringCopy);
    2f92:	e9 81       	ldd	r30, Y+1	; 0x01
    2f94:	fa 81       	ldd	r31, Y+2	; 0x02
    2f96:	80 81       	ld	r24, Z
    2f98:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_voidPrintChar>
		s8StringCopy++;
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	9a 83       	std	Y+2, r25	; 0x02
    2fa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}

void LCD_voidPrintStr(const s8 * s8StringCopy)
{
	while(* s8StringCopy)
    2fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2faa:	80 81       	ld	r24, Z
    2fac:	88 23       	and	r24, r24
    2fae:	89 f7       	brne	.-30     	; 0x2f92 <LCD_voidPrintStr+0x10>
	{
		LCD_voidPrintChar(* s8StringCopy);
		s8StringCopy++;
	}
}
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <LCD_display_number>:

void LCD_display_number(int number)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	27 97       	sbiw	r28, 0x07	; 7
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	9f 83       	std	Y+7, r25	; 0x07
    2fd0:	8e 83       	std	Y+6, r24	; 0x06
	char str[5];

	itoa(number , str ,10);
    2fd2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd6:	9e 01       	movw	r18, r28
    2fd8:	2f 5f       	subi	r18, 0xFF	; 255
    2fda:	3f 4f       	sbci	r19, 0xFF	; 255
    2fdc:	b9 01       	movw	r22, r18
    2fde:	4a e0       	ldi	r20, 0x0A	; 10
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <itoa>
	LCD_voidPrintStr(str);
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	01 96       	adiw	r24, 0x01	; 1
    2fea:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <LCD_voidPrintStr>
}
    2fee:	27 96       	adiw	r28, 0x07	; 7
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <LCD_voidGotoRowCol>:

void LCD_voidGotoRowCol(u8 u8RowCopy, u8 u8ColCopy)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	00 d0       	rcall	.+0      	; 0x3006 <LCD_voidGotoRowCol+0x6>
    3006:	00 d0       	rcall	.+0      	; 0x3008 <LCD_voidGotoRowCol+0x8>
    3008:	0f 92       	push	r0
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	8a 83       	std	Y+2, r24	; 0x02
    3010:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch(u8RowCopy)
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	3d 83       	std	Y+5, r19	; 0x05
    301a:	2c 83       	std	Y+4, r18	; 0x04
    301c:	8c 81       	ldd	r24, Y+4	; 0x04
    301e:	9d 81       	ldd	r25, Y+5	; 0x05
    3020:	81 30       	cpi	r24, 0x01	; 1
    3022:	91 05       	cpc	r25, r1
    3024:	c1 f0       	breq	.+48     	; 0x3056 <LCD_voidGotoRowCol+0x56>
    3026:	2c 81       	ldd	r18, Y+4	; 0x04
    3028:	3d 81       	ldd	r19, Y+5	; 0x05
    302a:	22 30       	cpi	r18, 0x02	; 2
    302c:	31 05       	cpc	r19, r1
    302e:	2c f4       	brge	.+10     	; 0x303a <LCD_voidGotoRowCol+0x3a>
    3030:	8c 81       	ldd	r24, Y+4	; 0x04
    3032:	9d 81       	ldd	r25, Y+5	; 0x05
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	61 f0       	breq	.+24     	; 0x3050 <LCD_voidGotoRowCol+0x50>
    3038:	19 c0       	rjmp	.+50     	; 0x306c <LCD_voidGotoRowCol+0x6c>
    303a:	2c 81       	ldd	r18, Y+4	; 0x04
    303c:	3d 81       	ldd	r19, Y+5	; 0x05
    303e:	22 30       	cpi	r18, 0x02	; 2
    3040:	31 05       	cpc	r19, r1
    3042:	69 f0       	breq	.+26     	; 0x305e <LCD_voidGotoRowCol+0x5e>
    3044:	8c 81       	ldd	r24, Y+4	; 0x04
    3046:	9d 81       	ldd	r25, Y+5	; 0x05
    3048:	83 30       	cpi	r24, 0x03	; 3
    304a:	91 05       	cpc	r25, r1
    304c:	61 f0       	breq	.+24     	; 0x3066 <LCD_voidGotoRowCol+0x66>
    304e:	0e c0       	rjmp	.+28     	; 0x306c <LCD_voidGotoRowCol+0x6c>
	{
	case 0:	Address = u8ColCopy;
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	0b c0       	rjmp	.+22     	; 0x306c <LCD_voidGotoRowCol+0x6c>
			break;
	case 1:	Address = u8ColCopy + 0x40;
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	80 5c       	subi	r24, 0xC0	; 192
    305a:	89 83       	std	Y+1, r24	; 0x01
    305c:	07 c0       	rjmp	.+14     	; 0x306c <LCD_voidGotoRowCol+0x6c>
			break;
	case 2:	Address = u8ColCopy + 0x10;
    305e:	8b 81       	ldd	r24, Y+3	; 0x03
    3060:	80 5f       	subi	r24, 0xF0	; 240
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	03 c0       	rjmp	.+6      	; 0x306c <LCD_voidGotoRowCol+0x6c>
			break;
	case 3:	Address = u8ColCopy + 0x50;
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	80 5b       	subi	r24, 0xB0	; 176
    306a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_voidSendCommand(LCD_MOVE_CURSOR | Address);
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	80 68       	ori	r24, 0x80	; 128
    3070:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_voidSendCommand>
}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	08 95       	ret

00003084 <Keypad_voidInit>:




void Keypad_voidInit(void)
{
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	00 d0       	rcall	.+0      	; 0x308a <Keypad_voidInit+0x6>
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
	for(u8 i=0; i<NUMBER_OF_COLS; i++)
    308e:	1a 82       	std	Y+2, r1	; 0x02
    3090:	31 c0       	rjmp	.+98     	; 0x30f4 <Keypad_voidInit+0x70>
	{
		DIO_u8SetPinDirection(cols[i].port, cols[i].pin, OUTPUT);
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	88 2f       	mov	r24, r24
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	fc 01       	movw	r30, r24
    309e:	e6 55       	subi	r30, 0x56	; 86
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	20 81       	ld	r18, Z
    30a4:	8a 81       	ldd	r24, Y+2	; 0x02
    30a6:	88 2f       	mov	r24, r24
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	88 0f       	add	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	fc 01       	movw	r30, r24
    30b0:	e5 55       	subi	r30, 0x55	; 85
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	90 81       	ld	r25, Z
    30b6:	82 2f       	mov	r24, r18
    30b8:	69 2f       	mov	r22, r25
    30ba:	41 e0       	ldi	r20, 0x01	; 1
    30bc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
    30c0:	8a 81       	ldd	r24, Y+2	; 0x02
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	88 0f       	add	r24, r24
    30c8:	99 1f       	adc	r25, r25
    30ca:	fc 01       	movw	r30, r24
    30cc:	e6 55       	subi	r30, 0x56	; 86
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	20 81       	ld	r18, Z
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	88 2f       	mov	r24, r24
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	fc 01       	movw	r30, r24
    30de:	e5 55       	subi	r30, 0x55	; 85
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	90 81       	ld	r25, Z
    30e4:	82 2f       	mov	r24, r18
    30e6:	69 2f       	mov	r22, r25
    30e8:	41 e0       	ldi	r20, 0x01	; 1
    30ea:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>



void Keypad_voidInit(void)
{
	for(u8 i=0; i<NUMBER_OF_COLS; i++)
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	8f 5f       	subi	r24, 0xFF	; 255
    30f2:	8a 83       	std	Y+2, r24	; 0x02
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	84 30       	cpi	r24, 0x04	; 4
    30f8:	60 f2       	brcs	.-104    	; 0x3092 <Keypad_voidInit+0xe>
	{
		DIO_u8SetPinDirection(cols[i].port, cols[i].pin, OUTPUT);
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
	}

	for(u8 i=0; i<NUMBER_OF_ROWS; i++)
    30fa:	19 82       	std	Y+1, r1	; 0x01
    30fc:	31 c0       	rjmp	.+98     	; 0x3160 <Keypad_voidInit+0xdc>
	{
		DIO_u8SetPinDirection(rows[i].port, rows[i].pin, INPUT);
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	88 2f       	mov	r24, r24
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	88 0f       	add	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	fc 01       	movw	r30, r24
    310a:	ee 54       	subi	r30, 0x4E	; 78
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	20 81       	ld	r18, Z
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	fc 01       	movw	r30, r24
    311c:	ed 54       	subi	r30, 0x4D	; 77
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	90 81       	ld	r25, Z
    3122:	82 2f       	mov	r24, r18
    3124:	69 2f       	mov	r22, r25
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
		DIO_PULLUP_PIN(rows[i].port, rows[i].pin);
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	88 0f       	add	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	fc 01       	movw	r30, r24
    3138:	ee 54       	subi	r30, 0x4E	; 78
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	20 81       	ld	r18, Z
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	88 2f       	mov	r24, r24
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	fc 01       	movw	r30, r24
    314a:	ed 54       	subi	r30, 0x4D	; 77
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	90 81       	ld	r25, Z
    3150:	82 2f       	mov	r24, r18
    3152:	69 2f       	mov	r22, r25
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
	{
		DIO_u8SetPinDirection(cols[i].port, cols[i].pin, OUTPUT);
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
	}

	for(u8 i=0; i<NUMBER_OF_ROWS; i++)
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	8f 5f       	subi	r24, 0xFF	; 255
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	84 30       	cpi	r24, 0x04	; 4
    3164:	60 f2       	brcs	.-104    	; 0x30fe <Keypad_voidInit+0x7a>
	{
		DIO_u8SetPinDirection(rows[i].port, rows[i].pin, INPUT);
		DIO_PULLUP_PIN(rows[i].port, rows[i].pin);
	}

}
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <Keypad_u8GetValue>:


u8 Keypad_u8GetValue(void)
{
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	00 d0       	rcall	.+0      	; 0x3176 <Keypad_u8GetValue+0x6>
    3176:	00 d0       	rcall	.+0      	; 0x3178 <Keypad_u8GetValue+0x8>
    3178:	0f 92       	push	r0
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i<NUMBER_OF_COLS;i++)
    317e:	1c 82       	std	Y+4, r1	; 0x04
    3180:	1b 82       	std	Y+3, r1	; 0x03
    3182:	79 c0       	rjmp	.+242    	; 0x3276 <Keypad_u8GetValue+0x106>
	{
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, LOW);
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	9c 81       	ldd	r25, Y+4	; 0x04
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	fc 01       	movw	r30, r24
    318e:	e6 55       	subi	r30, 0x56	; 86
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	20 81       	ld	r18, Z
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	9c 81       	ldd	r25, Y+4	; 0x04
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	fc 01       	movw	r30, r24
    319e:	e5 55       	subi	r30, 0x55	; 85
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	90 81       	ld	r25, Z
    31a4:	82 2f       	mov	r24, r18
    31a6:	69 2f       	mov	r22, r25
    31a8:	40 e0       	ldi	r20, 0x00	; 0
    31aa:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
		for(int j=0; j<NUMBER_OF_ROWS;j++)
    31ae:	1a 82       	std	Y+2, r1	; 0x02
    31b0:	19 82       	std	Y+1, r1	; 0x01
    31b2:	41 c0       	rjmp	.+130    	; 0x3236 <Keypad_u8GetValue+0xc6>
		{
			if(DIO_u8GetPinValue(rows[j].port, rows[j].pin) == LOW)
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	88 0f       	add	r24, r24
    31ba:	99 1f       	adc	r25, r25
    31bc:	fc 01       	movw	r30, r24
    31be:	ee 54       	subi	r30, 0x4E	; 78
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	20 81       	ld	r18, Z
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	88 0f       	add	r24, r24
    31ca:	99 1f       	adc	r25, r25
    31cc:	fc 01       	movw	r30, r24
    31ce:	ed 54       	subi	r30, 0x4D	; 77
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	90 81       	ld	r25, Z
    31d4:	82 2f       	mov	r24, r18
    31d6:	69 2f       	mov	r22, r25
    31d8:	0e 94 2d 0c 	call	0x185a	; 0x185a <DIO_u8GetPinValue>
    31dc:	88 23       	and	r24, r24
    31de:	31 f5       	brne	.+76     	; 0x322c <Keypad_u8GetValue+0xbc>
			{
				while(DIO_u8GetPinValue(rows[j].port, rows[j].pin) == LOW);
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	fc 01       	movw	r30, r24
    31ea:	ee 54       	subi	r30, 0x4E	; 78
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	20 81       	ld	r18, Z
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	9a 81       	ldd	r25, Y+2	; 0x02
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	fc 01       	movw	r30, r24
    31fa:	ed 54       	subi	r30, 0x4D	; 77
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	90 81       	ld	r25, Z
    3200:	82 2f       	mov	r24, r18
    3202:	69 2f       	mov	r22, r25
    3204:	0e 94 2d 0c 	call	0x185a	; 0x185a <DIO_u8GetPinValue>
    3208:	88 23       	and	r24, r24
    320a:	51 f3       	breq	.-44     	; 0x31e0 <Keypad_u8GetValue+0x70>
				return characters[i][j];
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	9c 81       	ldd	r25, Y+4	; 0x04
    3210:	29 81       	ldd	r18, Y+1	; 0x01
    3212:	3a 81       	ldd	r19, Y+2	; 0x02
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	82 0f       	add	r24, r18
    321e:	93 1f       	adc	r25, r19
    3220:	fc 01       	movw	r30, r24
    3222:	e8 57       	subi	r30, 0x78	; 120
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	80 81       	ld	r24, Z
    3228:	8d 83       	std	Y+5, r24	; 0x05
    322a:	2d c0       	rjmp	.+90     	; 0x3286 <Keypad_u8GetValue+0x116>
u8 Keypad_u8GetValue(void)
{
	for(int i=0; i<NUMBER_OF_COLS;i++)
	{
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, LOW);
		for(int j=0; j<NUMBER_OF_ROWS;j++)
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	01 96       	adiw	r24, 0x01	; 1
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	84 30       	cpi	r24, 0x04	; 4
    323c:	91 05       	cpc	r25, r1
    323e:	08 f4       	brcc	.+2      	; 0x3242 <Keypad_u8GetValue+0xd2>
    3240:	b9 cf       	rjmp	.-142    	; 0x31b4 <Keypad_u8GetValue+0x44>
			{
				while(DIO_u8GetPinValue(rows[j].port, rows[j].pin) == LOW);
				return characters[i][j];
			}
		}
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	fc 01       	movw	r30, r24
    324c:	e6 55       	subi	r30, 0x56	; 86
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	20 81       	ld	r18, Z
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	9c 81       	ldd	r25, Y+4	; 0x04
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	fc 01       	movw	r30, r24
    325c:	e5 55       	subi	r30, 0x55	; 85
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	90 81       	ld	r25, Z
    3262:	82 2f       	mov	r24, r18
    3264:	69 2f       	mov	r22, r25
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
}


u8 Keypad_u8GetValue(void)
{
	for(int i=0; i<NUMBER_OF_COLS;i++)
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
    326e:	9c 81       	ldd	r25, Y+4	; 0x04
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	9c 83       	std	Y+4, r25	; 0x04
    3274:	8b 83       	std	Y+3, r24	; 0x03
    3276:	8b 81       	ldd	r24, Y+3	; 0x03
    3278:	9c 81       	ldd	r25, Y+4	; 0x04
    327a:	84 30       	cpi	r24, 0x04	; 4
    327c:	91 05       	cpc	r25, r1
    327e:	08 f4       	brcc	.+2      	; 0x3282 <Keypad_u8GetValue+0x112>
    3280:	81 cf       	rjmp	.-254    	; 0x3184 <Keypad_u8GetValue+0x14>
				return characters[i][j];
			}
		}
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
	}
	return KEYPAD_NULL_RETURN;
    3282:	8f ef       	ldi	r24, 0xFF	; 255
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <ICU_Init>:
#include "ICU_private.h"
#include "ICU_config.h"
#include "ICU_interface.h"

void ICU_Init(void)
{
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
#if ICU_EXTI_CHANNEL == EXTI0
	DIO_u8SetPinDirection(PORTD, PIN2, INPUT);
    32a0:	84 e0       	ldi	r24, 0x04	; 4
    32a2:	62 e0       	ldi	r22, 0x02	; 2
    32a4:	40 e0       	ldi	r20, 0x00	; 0
    32a6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTD, PIN3, INPUT);
#elif ICU_EXTI_CHANNEL == EXTI2
	DIO_u8SetPinDirection(PORTB, PIN2, INPUT);
#endif

	EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	63 e0       	ldi	r22, 0x03	; 3
    32ae:	0e 94 86 09 	call	0x130c	; 0x130c <EXTI_SetMode>
	EXTI_SetCallback(ICU_EXTI_CHANNEL, EXTI_Callback);
    32b2:	22 e9       	ldi	r18, 0x92	; 146
    32b4:	39 e1       	ldi	r19, 0x19	; 25
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	b9 01       	movw	r22, r18
    32ba:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <EXTI_SetCallback>
	EXTI_Enable(ICU_EXTI_CHANNEL);
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <EXTI_Enable>

	TIM1_voidInit();
    32c4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIM1_voidInit>
	TIM1_ClearCounterValue();
    32c8:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TIM1_ClearCounterValue>
}
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	08 95       	ret

000032d2 <ICU_GetOnTimeUs>:

u16 ICU_GetOnTimeUs(void)
{
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
	return t_on;
    32da:	80 91 c3 00 	lds	r24, 0x00C3
    32de:	90 91 c4 00 	lds	r25, 0x00C4
}
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <ICU_GetOFFTimeUs>:

u16 ICU_GetOFFTimeUs(void)
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
	return period - t_on;
    32f0:	20 91 c5 00 	lds	r18, 0x00C5
    32f4:	30 91 c6 00 	lds	r19, 0x00C6
    32f8:	80 91 c3 00 	lds	r24, 0x00C3
    32fc:	90 91 c4 00 	lds	r25, 0x00C4
    3300:	a9 01       	movw	r20, r18
    3302:	48 1b       	sub	r20, r24
    3304:	59 0b       	sbc	r21, r25
    3306:	ca 01       	movw	r24, r20
}
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <ICU_GetPeriodUs>:
u16 ICU_GetPeriodUs(void)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
	return period;
    3316:	80 91 c5 00 	lds	r24, 0x00C5
    331a:	90 91 c6 00 	lds	r25, 0x00C6
}
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	08 95       	ret

00003324 <EXTI_Callback>:

void EXTI_Callback(void)
{
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	00 d0       	rcall	.+0      	; 0x332a <EXTI_Callback+0x6>
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
	static u8 state = ICU_STATE_WAIT_FOR_RISINGEDGE1;

	switch(state)
    332e:	80 91 c7 00 	lds	r24, 0x00C7
    3332:	28 2f       	mov	r18, r24
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	3a 83       	std	Y+2, r19	; 0x02
    3338:	29 83       	std	Y+1, r18	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	81 30       	cpi	r24, 0x01	; 1
    3340:	91 05       	cpc	r25, r1
    3342:	99 f0       	breq	.+38     	; 0x336a <EXTI_Callback+0x46>
    3344:	29 81       	ldd	r18, Y+1	; 0x01
    3346:	3a 81       	ldd	r19, Y+2	; 0x02
    3348:	22 30       	cpi	r18, 0x02	; 2
    334a:	31 05       	cpc	r19, r1
    334c:	e1 f0       	breq	.+56     	; 0x3386 <EXTI_Callback+0x62>
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	31 f5       	brne	.+76     	; 0x33a2 <EXTI_Callback+0x7e>
	{
	case ICU_STATE_WAIT_FOR_RISINGEDGE1:
		TIM1_ClearCounterValue();
    3356:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TIM1_ClearCounterValue>
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_FALLING);
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	62 e0       	ldi	r22, 0x02	; 2
    335e:	0e 94 86 09 	call	0x130c	; 0x130c <EXTI_SetMode>
		state = ICU_STATE_WAIT_FOR_FALLINGEDGE;
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	80 93 c7 00 	sts	0x00C7, r24
    3368:	1c c0       	rjmp	.+56     	; 0x33a2 <EXTI_Callback+0x7e>
		break;
	case ICU_STATE_WAIT_FOR_FALLINGEDGE:
		t_on = TIM1_GetCounterValueUs();
    336a:	0e 94 42 07 	call	0xe84	; 0xe84 <TIM1_GetCounterValueUs>
    336e:	90 93 c4 00 	sts	0x00C4, r25
    3372:	80 93 c3 00 	sts	0x00C3, r24
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	63 e0       	ldi	r22, 0x03	; 3
    337a:	0e 94 86 09 	call	0x130c	; 0x130c <EXTI_SetMode>
		state = ICU_STATE_WAIT_FOR_RISINGEDGE2;
    337e:	82 e0       	ldi	r24, 0x02	; 2
    3380:	80 93 c7 00 	sts	0x00C7, r24
    3384:	0e c0       	rjmp	.+28     	; 0x33a2 <EXTI_Callback+0x7e>
		break;
	case ICU_STATE_WAIT_FOR_RISINGEDGE2:
		period = TIM1_GetCounterValueUs();
    3386:	0e 94 42 07 	call	0xe84	; 0xe84 <TIM1_GetCounterValueUs>
    338a:	90 93 c6 00 	sts	0x00C6, r25
    338e:	80 93 c5 00 	sts	0x00C5, r24
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	63 e0       	ldi	r22, 0x03	; 3
    3396:	0e 94 86 09 	call	0x130c	; 0x130c <EXTI_SetMode>
		state = ICU_STATE_WAIT_FOR_RISINGEDGE1;
    339a:	10 92 c7 00 	sts	0x00C7, r1
		TIM1_ClearCounterValue();
    339e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TIM1_ClearCounterValue>
		break;
	}
}
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <FastICU_Init>:

u16 t_on = 0;
u16 period = 0;

void FastICU_Init(void)
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTD, PIN6, INPUT);
    33b4:	84 e0       	ldi	r24, 0x04	; 4
    33b6:	66 e0       	ldi	r22, 0x06	; 6
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	TIM1_voidICUInit();
    33be:	0e 94 8b 06 	call	0xd16	; 0xd16 <TIM1_voidICUInit>
	TIM1_SetEdge(ICU_EDGE_RISING);
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIM1_SetEdge>
	TIM1_setCallback(FastICU_Process);
    33c8:	84 e1       	ldi	r24, 0x14	; 20
    33ca:	9a e1       	ldi	r25, 0x1A	; 26
    33cc:	0e 94 03 07 	call	0xe06	; 0xe06 <TIM1_setCallback>

}
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <FastICU_GetOnTime>:

u16 FastICU_GetOnTime(void)
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
	return t_on;
    33de:	80 91 c8 00 	lds	r24, 0x00C8
    33e2:	90 91 c9 00 	lds	r25, 0x00C9
}
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <FastICU_GetOffTime>:

u16 FastICU_GetOffTime(void)
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
	return period - t_on;
    33f4:	20 91 ca 00 	lds	r18, 0x00CA
    33f8:	30 91 cb 00 	lds	r19, 0x00CB
    33fc:	80 91 c8 00 	lds	r24, 0x00C8
    3400:	90 91 c9 00 	lds	r25, 0x00C9
    3404:	a9 01       	movw	r20, r18
    3406:	48 1b       	sub	r20, r24
    3408:	59 0b       	sbc	r21, r25
    340a:	ca 01       	movw	r24, r20
}
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <FastICU_GetPeriod>:

u16 FastICU_GetPeriod(void)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	return period;
    341a:	80 91 ca 00 	lds	r24, 0x00CA
    341e:	90 91 cb 00 	lds	r25, 0x00CB
}
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <FastICU_Process>:

void FastICU_Process(void)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	00 d0       	rcall	.+0      	; 0x342e <FastICU_Process+0x6>
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
	static u8 state = FASTICU_FIRST_RISING;
	static u16 point_1 = 0;
	static u16 point_2 = 0;
	static u16 point_3 = 0;

	switch(state)
    3432:	80 91 d2 00 	lds	r24, 0x00D2
    3436:	28 2f       	mov	r18, r24
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	3a 83       	std	Y+2, r19	; 0x02
    343c:	29 83       	std	Y+1, r18	; 0x01
    343e:	49 81       	ldd	r20, Y+1	; 0x01
    3440:	5a 81       	ldd	r21, Y+2	; 0x02
    3442:	41 30       	cpi	r20, 0x01	; 1
    3444:	51 05       	cpc	r21, r1
    3446:	c1 f0       	breq	.+48     	; 0x3478 <FastICU_Process+0x50>
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	9a 81       	ldd	r25, Y+2	; 0x02
    344c:	82 30       	cpi	r24, 0x02	; 2
    344e:	91 05       	cpc	r25, r1
    3450:	01 f1       	breq	.+64     	; 0x3492 <FastICU_Process+0x6a>
    3452:	29 81       	ldd	r18, Y+1	; 0x01
    3454:	3a 81       	ldd	r19, Y+2	; 0x02
    3456:	21 15       	cp	r18, r1
    3458:	31 05       	cpc	r19, r1
    345a:	09 f0       	breq	.+2      	; 0x345e <FastICU_Process+0x36>
    345c:	45 c0       	rjmp	.+138    	; 0x34e8 <FastICU_Process+0xc0>
	{
	case FASTICU_FIRST_RISING:
		point_1 = TIM1_GetICRValue();
    345e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TIM1_GetICRValue>
    3462:	90 93 d1 00 	sts	0x00D1, r25
    3466:	80 93 d0 00 	sts	0x00D0, r24
		TIM1_SetEdge(ICU_EDGE_FALLING);
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIM1_SetEdge>
		state = FASTICU_FALLING;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	80 93 d2 00 	sts	0x00D2, r24
    3476:	38 c0       	rjmp	.+112    	; 0x34e8 <FastICU_Process+0xc0>
		break;
	case FASTICU_FALLING:
		point_2 = TIM1_GetICRValue();
    3478:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TIM1_GetICRValue>
    347c:	90 93 cf 00 	sts	0x00CF, r25
    3480:	80 93 ce 00 	sts	0x00CE, r24
		TIM1_SetEdge(ICU_EDGE_RISING);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIM1_SetEdge>
		state = FASTICU_SECOND_RISING;
    348a:	82 e0       	ldi	r24, 0x02	; 2
    348c:	80 93 d2 00 	sts	0x00D2, r24
    3490:	2b c0       	rjmp	.+86     	; 0x34e8 <FastICU_Process+0xc0>
		break;
	case FASTICU_SECOND_RISING:
		point_3 = TIM1_GetICRValue();
    3492:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TIM1_GetICRValue>
    3496:	90 93 cd 00 	sts	0x00CD, r25
    349a:	80 93 cc 00 	sts	0x00CC, r24
		TIM1_SetEdge(ICU_EDGE_RISING);
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIM1_SetEdge>
		state = FASTICU_FIRST_RISING;
    34a4:	10 92 d2 00 	sts	0x00D2, r1
		period = point_3 - point_1;
    34a8:	20 91 cc 00 	lds	r18, 0x00CC
    34ac:	30 91 cd 00 	lds	r19, 0x00CD
    34b0:	80 91 d0 00 	lds	r24, 0x00D0
    34b4:	90 91 d1 00 	lds	r25, 0x00D1
    34b8:	a9 01       	movw	r20, r18
    34ba:	48 1b       	sub	r20, r24
    34bc:	59 0b       	sbc	r21, r25
    34be:	ca 01       	movw	r24, r20
    34c0:	90 93 cb 00 	sts	0x00CB, r25
    34c4:	80 93 ca 00 	sts	0x00CA, r24
		t_on = point_2 - point_1;
    34c8:	20 91 ce 00 	lds	r18, 0x00CE
    34cc:	30 91 cf 00 	lds	r19, 0x00CF
    34d0:	80 91 d0 00 	lds	r24, 0x00D0
    34d4:	90 91 d1 00 	lds	r25, 0x00D1
    34d8:	a9 01       	movw	r20, r18
    34da:	48 1b       	sub	r20, r24
    34dc:	59 0b       	sbc	r21, r25
    34de:	ca 01       	movw	r24, r20
    34e0:	90 93 c9 00 	sts	0x00C9, r25
    34e4:	80 93 c8 00 	sts	0x00C8, r24
		break;
	}
}
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	08 95       	ret

000034f2 <Button_voidInit>:
#include "Button_private.h"
#include "Button_config.h"
#include "Button_interface.h"

void Button_voidInit()
{
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(BUTTON1_PORT, BUTTON1_PIN, INPUT);
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	63 e0       	ldi	r22, 0x03	; 3
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinDirection>
	DIO_PULLUP_PIN(BUTTON1_PORT, BUTTON1_PIN);
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	63 e0       	ldi	r22, 0x03	; 3
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8SetPinValue>
}
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	08 95       	ret

00003514 <Button_u8GetStatus>:

u8 Button_u8GetStatus(u8 L_u8ButtonNo)
{
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	00 d0       	rcall	.+0      	; 0x351a <Button_u8GetStatus+0x6>
    351a:	0f 92       	push	r0
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8ButtonNo)
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	88 2f       	mov	r24, r24
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	81 30       	cpi	r24, 0x01	; 1
    352a:	91 05       	cpc	r25, r1
    352c:	69 f4       	brne	.+26     	; 0x3548 <Button_u8GetStatus+0x34>
	{
	case BUTTON1: return DIO_u8GetPinValue(BUTTON1_PORT, BUTTON1_PIN)? BUTTON_RELEASED:BUTTON_PRESSED;
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	63 e0       	ldi	r22, 0x03	; 3
    3532:	0e 94 2d 0c 	call	0x185a	; 0x185a <DIO_u8GetPinValue>
    3536:	8b 83       	std	Y+3, r24	; 0x03
    3538:	8b 81       	ldd	r24, Y+3	; 0x03
    353a:	88 23       	and	r24, r24
    353c:	11 f0       	breq	.+4      	; 0x3542 <Button_u8GetStatus+0x2e>
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	8b 83       	std	Y+3, r24	; 0x03
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	8a 83       	std	Y+2, r24	; 0x02
    3546:	02 c0       	rjmp	.+4      	; 0x354c <Button_u8GetStatus+0x38>
	}
	return DIO_ERROR;
    3548:	8f ef       	ldi	r24, 0xFF	; 255
    354a:	8a 83       	std	Y+2, r24	; 0x02
    354c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	08 95       	ret

0000355a <Button_voidWaitForButton>:

void Button_voidWaitForButton(u8 L_u8ButtonNo)
{
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	0f 92       	push	r0
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8ButtonNo)
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	81 30       	cpi	r24, 0x01	; 1
    356e:	91 05       	cpc	r25, r1
    3570:	31 f4       	brne	.+12     	; 0x357e <Button_voidWaitForButton+0x24>
	{
	case BUTTON1: while(DIO_u8GetPinValue(BUTTON1_PORT, BUTTON1_PIN) == HIGH);break;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	63 e0       	ldi	r22, 0x03	; 3
    3576:	0e 94 2d 0c 	call	0x185a	; 0x185a <DIO_u8GetPinValue>
    357a:	81 30       	cpi	r24, 0x01	; 1
    357c:	d1 f3       	breq	.-12     	; 0x3572 <Button_voidWaitForButton+0x18>
	}
}
    357e:	0f 90       	pop	r0
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <main>:
#include "../MCAL/GIE/GIE_interface.h"
#include "../HAL/LCD/LCD_interface.h"
#include <avr/delay.h>

int main()
{
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    LCD_voidInit();
    358e:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidInit>
	FastICU_Init();
    3592:	0e 94 d6 19 	call	0x33ac	; 0x33ac <FastICU_Init>
	GIE_Enable();
    3596:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <GIE_Enable>
    LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_voidSendCommand>
    LCD_voidGotoRowCol(0,0);
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	0e 94 00 18 	call	0x3000	; 0x3000 <LCD_voidGotoRowCol>
    LCD_voidPrintStr("T_ON:");
    35a8:	80 e6       	ldi	r24, 0x60	; 96
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <LCD_voidPrintStr>
    LCD_voidGotoRowCol(1,0);
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	0e 94 00 18 	call	0x3000	; 0x3000 <LCD_voidGotoRowCol>
    LCD_voidPrintStr("Period:");
    35b8:	86 e6       	ldi	r24, 0x66	; 102
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <LCD_voidPrintStr>

	while(1){
		LCD_voidGotoRowCol(0,6);
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	66 e0       	ldi	r22, 0x06	; 6
    35c4:	0e 94 00 18 	call	0x3000	; 0x3000 <LCD_voidGotoRowCol>
	    LCD_display_number((u16)FastICU_GetOnTime());
    35c8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <FastICU_GetOnTime>
    35cc:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_display_number>
	    ICU_GetPeriodUs();
    35d0:	0e 94 87 19 	call	0x330e	; 0x330e <ICU_GetPeriodUs>
	    LCD_voidGotoRowCol(1,8);
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	68 e0       	ldi	r22, 0x08	; 8
    35d8:	0e 94 00 18 	call	0x3000	; 0x3000 <LCD_voidGotoRowCol>
	    LCD_display_number((u16)FastICU_GetPeriod());
    35dc:	0e 94 09 1a 	call	0x3412	; 0x3412 <FastICU_GetPeriod>
    35e0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_display_number>
    35e4:	ed cf       	rjmp	.-38     	; 0x35c0 <main+0x3a>

000035e6 <__mulsi3>:
    35e6:	62 9f       	mul	r22, r18
    35e8:	d0 01       	movw	r26, r0
    35ea:	73 9f       	mul	r23, r19
    35ec:	f0 01       	movw	r30, r0
    35ee:	82 9f       	mul	r24, r18
    35f0:	e0 0d       	add	r30, r0
    35f2:	f1 1d       	adc	r31, r1
    35f4:	64 9f       	mul	r22, r20
    35f6:	e0 0d       	add	r30, r0
    35f8:	f1 1d       	adc	r31, r1
    35fa:	92 9f       	mul	r25, r18
    35fc:	f0 0d       	add	r31, r0
    35fe:	83 9f       	mul	r24, r19
    3600:	f0 0d       	add	r31, r0
    3602:	74 9f       	mul	r23, r20
    3604:	f0 0d       	add	r31, r0
    3606:	65 9f       	mul	r22, r21
    3608:	f0 0d       	add	r31, r0
    360a:	99 27       	eor	r25, r25
    360c:	72 9f       	mul	r23, r18
    360e:	b0 0d       	add	r27, r0
    3610:	e1 1d       	adc	r30, r1
    3612:	f9 1f       	adc	r31, r25
    3614:	63 9f       	mul	r22, r19
    3616:	b0 0d       	add	r27, r0
    3618:	e1 1d       	adc	r30, r1
    361a:	f9 1f       	adc	r31, r25
    361c:	bd 01       	movw	r22, r26
    361e:	cf 01       	movw	r24, r30
    3620:	11 24       	eor	r1, r1
    3622:	08 95       	ret

00003624 <__udivmodsi4>:
    3624:	a1 e2       	ldi	r26, 0x21	; 33
    3626:	1a 2e       	mov	r1, r26
    3628:	aa 1b       	sub	r26, r26
    362a:	bb 1b       	sub	r27, r27
    362c:	fd 01       	movw	r30, r26
    362e:	0d c0       	rjmp	.+26     	; 0x364a <__udivmodsi4_ep>

00003630 <__udivmodsi4_loop>:
    3630:	aa 1f       	adc	r26, r26
    3632:	bb 1f       	adc	r27, r27
    3634:	ee 1f       	adc	r30, r30
    3636:	ff 1f       	adc	r31, r31
    3638:	a2 17       	cp	r26, r18
    363a:	b3 07       	cpc	r27, r19
    363c:	e4 07       	cpc	r30, r20
    363e:	f5 07       	cpc	r31, r21
    3640:	20 f0       	brcs	.+8      	; 0x364a <__udivmodsi4_ep>
    3642:	a2 1b       	sub	r26, r18
    3644:	b3 0b       	sbc	r27, r19
    3646:	e4 0b       	sbc	r30, r20
    3648:	f5 0b       	sbc	r31, r21

0000364a <__udivmodsi4_ep>:
    364a:	66 1f       	adc	r22, r22
    364c:	77 1f       	adc	r23, r23
    364e:	88 1f       	adc	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	1a 94       	dec	r1
    3654:	69 f7       	brne	.-38     	; 0x3630 <__udivmodsi4_loop>
    3656:	60 95       	com	r22
    3658:	70 95       	com	r23
    365a:	80 95       	com	r24
    365c:	90 95       	com	r25
    365e:	9b 01       	movw	r18, r22
    3660:	ac 01       	movw	r20, r24
    3662:	bd 01       	movw	r22, r26
    3664:	cf 01       	movw	r24, r30
    3666:	08 95       	ret

00003668 <__prologue_saves__>:
    3668:	2f 92       	push	r2
    366a:	3f 92       	push	r3
    366c:	4f 92       	push	r4
    366e:	5f 92       	push	r5
    3670:	6f 92       	push	r6
    3672:	7f 92       	push	r7
    3674:	8f 92       	push	r8
    3676:	9f 92       	push	r9
    3678:	af 92       	push	r10
    367a:	bf 92       	push	r11
    367c:	cf 92       	push	r12
    367e:	df 92       	push	r13
    3680:	ef 92       	push	r14
    3682:	ff 92       	push	r15
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	ca 1b       	sub	r28, r26
    3692:	db 0b       	sbc	r29, r27
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	09 94       	ijmp

000036a0 <__epilogue_restores__>:
    36a0:	2a 88       	ldd	r2, Y+18	; 0x12
    36a2:	39 88       	ldd	r3, Y+17	; 0x11
    36a4:	48 88       	ldd	r4, Y+16	; 0x10
    36a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    36a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    36aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    36ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    36ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    36b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    36b2:	b9 84       	ldd	r11, Y+9	; 0x09
    36b4:	c8 84       	ldd	r12, Y+8	; 0x08
    36b6:	df 80       	ldd	r13, Y+7	; 0x07
    36b8:	ee 80       	ldd	r14, Y+6	; 0x06
    36ba:	fd 80       	ldd	r15, Y+5	; 0x05
    36bc:	0c 81       	ldd	r16, Y+4	; 0x04
    36be:	1b 81       	ldd	r17, Y+3	; 0x03
    36c0:	aa 81       	ldd	r26, Y+2	; 0x02
    36c2:	b9 81       	ldd	r27, Y+1	; 0x01
    36c4:	ce 0f       	add	r28, r30
    36c6:	d1 1d       	adc	r29, r1
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	ed 01       	movw	r28, r26
    36d4:	08 95       	ret

000036d6 <itoa>:
    36d6:	fb 01       	movw	r30, r22
    36d8:	9f 01       	movw	r18, r30
    36da:	e8 94       	clt
    36dc:	42 30       	cpi	r20, 0x02	; 2
    36de:	c4 f0       	brlt	.+48     	; 0x3710 <itoa+0x3a>
    36e0:	45 32       	cpi	r20, 0x25	; 37
    36e2:	b4 f4       	brge	.+44     	; 0x3710 <itoa+0x3a>
    36e4:	4a 30       	cpi	r20, 0x0A	; 10
    36e6:	29 f4       	brne	.+10     	; 0x36f2 <itoa+0x1c>
    36e8:	97 fb       	bst	r25, 7
    36ea:	1e f4       	brtc	.+6      	; 0x36f2 <itoa+0x1c>
    36ec:	90 95       	com	r25
    36ee:	81 95       	neg	r24
    36f0:	9f 4f       	sbci	r25, 0xFF	; 255
    36f2:	64 2f       	mov	r22, r20
    36f4:	77 27       	eor	r23, r23
    36f6:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__udivmodhi4>
    36fa:	80 5d       	subi	r24, 0xD0	; 208
    36fc:	8a 33       	cpi	r24, 0x3A	; 58
    36fe:	0c f0       	brlt	.+2      	; 0x3702 <itoa+0x2c>
    3700:	89 5d       	subi	r24, 0xD9	; 217
    3702:	81 93       	st	Z+, r24
    3704:	cb 01       	movw	r24, r22
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	a1 f7       	brne	.-24     	; 0x36f2 <itoa+0x1c>
    370a:	16 f4       	brtc	.+4      	; 0x3710 <itoa+0x3a>
    370c:	5d e2       	ldi	r21, 0x2D	; 45
    370e:	51 93       	st	Z+, r21
    3710:	10 82       	st	Z, r1
    3712:	c9 01       	movw	r24, r18
    3714:	0c 94 8c 1b 	jmp	0x3718	; 0x3718 <strrev>

00003718 <strrev>:
    3718:	dc 01       	movw	r26, r24
    371a:	fc 01       	movw	r30, r24
    371c:	67 2f       	mov	r22, r23
    371e:	71 91       	ld	r23, Z+
    3720:	77 23       	and	r23, r23
    3722:	e1 f7       	brne	.-8      	; 0x371c <strrev+0x4>
    3724:	32 97       	sbiw	r30, 0x02	; 2
    3726:	04 c0       	rjmp	.+8      	; 0x3730 <strrev+0x18>
    3728:	7c 91       	ld	r23, X
    372a:	6d 93       	st	X+, r22
    372c:	70 83       	st	Z, r23
    372e:	62 91       	ld	r22, -Z
    3730:	ae 17       	cp	r26, r30
    3732:	bf 07       	cpc	r27, r31
    3734:	c8 f3       	brcs	.-14     	; 0x3728 <strrev+0x10>
    3736:	08 95       	ret

00003738 <__udivmodhi4>:
    3738:	aa 1b       	sub	r26, r26
    373a:	bb 1b       	sub	r27, r27
    373c:	51 e1       	ldi	r21, 0x11	; 17
    373e:	07 c0       	rjmp	.+14     	; 0x374e <__udivmodhi4_ep>

00003740 <__udivmodhi4_loop>:
    3740:	aa 1f       	adc	r26, r26
    3742:	bb 1f       	adc	r27, r27
    3744:	a6 17       	cp	r26, r22
    3746:	b7 07       	cpc	r27, r23
    3748:	10 f0       	brcs	.+4      	; 0x374e <__udivmodhi4_ep>
    374a:	a6 1b       	sub	r26, r22
    374c:	b7 0b       	sbc	r27, r23

0000374e <__udivmodhi4_ep>:
    374e:	88 1f       	adc	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	5a 95       	dec	r21
    3754:	a9 f7       	brne	.-22     	; 0x3740 <__udivmodhi4_loop>
    3756:	80 95       	com	r24
    3758:	90 95       	com	r25
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	08 95       	ret

00003760 <_exit>:
    3760:	f8 94       	cli

00003762 <__stop_program>:
    3762:	ff cf       	rjmp	.-2      	; 0x3762 <__stop_program>
