
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  000038c0  00003954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  008000ac  008000ac  000039a0  2**0
                  ALLOC
  3 .debug_aranges 00000538  00000000  00000000  000039a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000937  00000000  00000000  00003ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b16  00000000  00000000  0000480f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001cab  00000000  00000000  00008325  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003190  00000000  00000000  00009fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000710  00000000  00000000  0000d160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ba7  00000000  00000000  0000d870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000e417  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a0  00000000  00000000  0000eca5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_1>
       8:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__vector_2>
       c:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_10>
      2c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 1b 	call	0x378a	; 0x378a <main>
      8a:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 27 1c 	jmp	0x384e	; 0x384e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 27 1c 	jmp	0x384e	; 0x384e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIM1_voidInit>:
void (* tim1_callback_ptr)(void);

///////////////////////////////////////
// Normal Mode
void TIM1_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
     ca6:	ec e4       	ldi	r30, 0x4C	; 76
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	11 82       	std	Z+1, r1	; 0x01
     cac:	10 82       	st	Z, r1

	/* Select Normal (OVF) Mode */
	CLEAR_BIT(TCCR1A_Register, WGM10);
     cae:	af e4       	ldi	r26, 0x4F	; 79
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ef e4       	ldi	r30, 0x4F	; 79
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8e 7f       	andi	r24, 0xFE	; 254
     cba:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_Register, WGM11);
     cbc:	af e4       	ldi	r26, 0x4F	; 79
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ef e4       	ldi	r30, 0x4F	; 79
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8d 7f       	andi	r24, 0xFD	; 253
     cc8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM12);
     cca:	ae e4       	ldi	r26, 0x4E	; 78
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	87 7f       	andi	r24, 0xF7	; 247
     cd6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM13);
     cd8:	ae e4       	ldi	r26, 0x4E	; 78
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	ee e4       	ldi	r30, 0x4E	; 78
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8f 7e       	andi	r24, 0xEF	; 239
     ce4:	8c 93       	st	X, r24


	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
     ce6:	ae e4       	ldi	r26, 0x4E	; 78
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ee e4       	ldi	r30, 0x4E	; 78
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8e 7f       	andi	r24, 0xFE	; 254
     cf2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
     cf4:	ae e4       	ldi	r26, 0x4E	; 78
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ee e4       	ldi	r30, 0x4E	; 78
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
     d02:	ae e4       	ldi	r26, 0x4E	; 78
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ee e4       	ldi	r30, 0x4E	; 78
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8b 7f       	andi	r24, 0xFB	; 251
     d0e:	8c 93       	st	X, r24

}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <TIM1_voidICUInit>:

///////////////////////////////////////
// ICU Mode

void TIM1_voidICUInit(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
     d1e:	ec e4       	ldi	r30, 0x4C	; 76
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	11 82       	std	Z+1, r1	; 0x01
     d24:	10 82       	st	Z, r1

	/* Select Normal (OVF) Mode */
	CLEAR_BIT(TCCR1A_Register, WGM10);
     d26:	af e4       	ldi	r26, 0x4F	; 79
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ef e4       	ldi	r30, 0x4F	; 79
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8e 7f       	andi	r24, 0xFE	; 254
     d32:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_Register, WGM11);
     d34:	af e4       	ldi	r26, 0x4F	; 79
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ef e4       	ldi	r30, 0x4F	; 79
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8d 7f       	andi	r24, 0xFD	; 253
     d40:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM12);
     d42:	ae e4       	ldi	r26, 0x4E	; 78
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ee e4       	ldi	r30, 0x4E	; 78
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	87 7f       	andi	r24, 0xF7	; 247
     d4e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM13);
     d50:	ae e4       	ldi	r26, 0x4E	; 78
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ee e4       	ldi	r30, 0x4E	; 78
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 7e       	andi	r24, 0xEF	; 239
     d5c:	8c 93       	st	X, r24

	/* Enable Input Capture Interrupt */
	SET_BIT(TIMSK_Register, TICIE1);
     d5e:	a9 e5       	ldi	r26, 0x59	; 89
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e9 e5       	ldi	r30, 0x59	; 89
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 62       	ori	r24, 0x20	; 32
     d6a:	8c 93       	st	X, r24

	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
     d6c:	ae e4       	ldi	r26, 0x4E	; 78
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ee e4       	ldi	r30, 0x4E	; 78
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
     d7a:	ae e4       	ldi	r26, 0x4E	; 78
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	ee e4       	ldi	r30, 0x4E	; 78
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	82 60       	ori	r24, 0x02	; 2
     d86:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
     d88:	ae e4       	ldi	r26, 0x4E	; 78
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ee e4       	ldi	r30, 0x4E	; 78
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8b 7f       	andi	r24, 0xFB	; 251
     d94:	8c 93       	st	X, r24

}
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <TIM1_SetEdge>:

void TIM1_SetEdge(u8 edge)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <TIM1_SetEdge+0x6>
     da2:	0f 92       	push	r0
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	89 83       	std	Y+1, r24	; 0x01
	switch(edge)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3b 83       	std	Y+3, r19	; 0x03
     db2:	2a 83       	std	Y+2, r18	; 0x02
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <TIM1_SetEdge+0x3a>
     dbc:	2a 81       	ldd	r18, Y+2	; 0x02
     dbe:	3b 81       	ldd	r19, Y+3	; 0x03
     dc0:	21 30       	cpi	r18, 0x01	; 1
     dc2:	31 05       	cpc	r19, r1
     dc4:	79 f4       	brne	.+30     	; 0xde4 <TIM1_SetEdge+0x48>
	{
	case ICU_EDGE_FALLING: CLEAR_BIT(TCCR1B_Register, ICES1); break;
     dc6:	ae e4       	ldi	r26, 0x4E	; 78
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ee e4       	ldi	r30, 0x4E	; 78
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 7b       	andi	r24, 0xBF	; 191
     dd2:	8c 93       	st	X, r24
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <TIM1_SetEdge+0x48>
	case ICU_EDGE_RISING: SET_BIT(TCCR1B_Register, ICES1); break;
     dd6:	ae e4       	ldi	r26, 0x4E	; 78
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ee e4       	ldi	r30, 0x4E	; 78
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	80 64       	ori	r24, 0x40	; 64
     de2:	8c 93       	st	X, r24
	}
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <TIM1_GetICRValue>:

u16 TIM1_GetICRValue(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	return ICR1_Register;
     df8:	e6 e4       	ldi	r30, 0x46	; 70
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
}
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <TIM1_setCallback>:

void TIM1_setCallback(void (* ptr)(void))
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <TIM1_setCallback+0x6>
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
	tim1_callback_ptr = ptr;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	90 93 cf 00 	sts	0x00CF, r25
     e1c:	80 93 ce 00 	sts	0x00CE, r24
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <__vector_6>:


void __vector_6(void)
{
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	tim1_callback_ptr();
     e54:	e0 91 ce 00 	lds	r30, 0x00CE
     e58:	f0 91 cf 00 	lds	r31, 0x00CF
     e5c:	09 95       	icall
}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <TIM1_GetCounterValueUs>:

////////////////////////////////////////////////
/// Normal

u16 TIM1_GetCounterValueUs(void)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_Register;
     e8c:	ec e4       	ldi	r30, 0x4C	; 76
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <TIM1_ClearCounterValue>:

void TIM1_ClearCounterValue(void)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
     ea2:	ec e4       	ldi	r30, 0x4C	; 76
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	11 82       	std	Z+1, r1	; 0x01
     ea8:	10 82       	st	Z, r1
}
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <TIM1_voidFPWMInit>:


///////////////////////////////////////
// PWM Mode
void TIM1_voidFPWMInit(u16 period_us)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <TIM1_voidFPWMInit+0x6>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Register = 0;
     ebe:	ec e4       	ldi	r30, 0x4C	; 76
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	11 82       	std	Z+1, r1	; 0x01
     ec4:	10 82       	st	Z, r1

	/* Select Mode 14 (Fast PWM) */
	CLEAR_BIT(TCCR1A_Register, WGM10);
     ec6:	af e4       	ldi	r26, 0x4F	; 79
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ef e4       	ldi	r30, 0x4F	; 79
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8e 7f       	andi	r24, 0xFE	; 254
     ed2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register, WGM11);
     ed4:	af e4       	ldi	r26, 0x4F	; 79
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ef e4       	ldi	r30, 0x4F	; 79
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, WGM12);
     ee2:	ae e4       	ldi	r26, 0x4E	; 78
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ee e4       	ldi	r30, 0x4E	; 78
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, WGM13);
     ef0:	ae e4       	ldi	r26, 0x4E	; 78
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ee e4       	ldi	r30, 0x4E	; 78
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	8c 93       	st	X, r24

	/* Select OC1A mode */
	TCCR1A_Register &= ~(0b11 << COM1A0);
     efe:	af e4       	ldi	r26, 0x4F	; 79
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ef e4       	ldi	r30, 0x4F	; 79
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 73       	andi	r24, 0x3F	; 63
     f0a:	8c 93       	st	X, r24
	TCCR1A_Register |= TIM1_PWM_OC1A_MODE << COM1A0;
     f0c:	af e4       	ldi	r26, 0x4F	; 79
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ef e4       	ldi	r30, 0x4F	; 79
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	8c 93       	st	X, r24

	/* Select OC1B mode */
	TCCR1A_Register &= ~(0b11 << COM1B0);
     f1a:	af e4       	ldi	r26, 0x4F	; 79
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ef e4       	ldi	r30, 0x4F	; 79
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 7c       	andi	r24, 0xCF	; 207
     f26:	8c 93       	st	X, r24
	TCCR1A_Register |= TIM1_PWM_OC1B_MODE << COM1B0;
     f28:	af e4       	ldi	r26, 0x4F	; 79
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ef e4       	ldi	r30, 0x4F	; 79
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 63       	ori	r24, 0x30	; 48
     f34:	8c 93       	st	X, r24

	ICR1_Register = period_us;
     f36:	e6 e4       	ldi	r30, 0x46	; 70
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	9a 81       	ldd	r25, Y+2	; 0x02
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24

	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
     f42:	ae e4       	ldi	r26, 0x4E	; 78
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
     f50:	ae e4       	ldi	r26, 0x4E	; 78
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee e4       	ldi	r30, 0x4E	; 78
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
     f5e:	ae e4       	ldi	r26, 0x4E	; 78
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ee e4       	ldi	r30, 0x4E	; 78
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8b 7f       	andi	r24, 0xFB	; 251
     f6a:	8c 93       	st	X, r24
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <TIM1_setDutyCycle>:

void TIM1_setDutyCycle(u8 channel, u16 value_us)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <TIM1_setDutyCycle+0x6>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <TIM1_setDutyCycle+0x8>
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	7b 83       	std	Y+3, r23	; 0x03
     f88:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel)
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3d 83       	std	Y+5, r19	; 0x05
     f92:	2c 83       	std	Y+4, r18	; 0x04
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <TIM1_setDutyCycle+0x32>
     f9c:	2c 81       	ldd	r18, Y+4	; 0x04
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	31 05       	cpc	r19, r1
     fa4:	41 f0       	breq	.+16     	; 0xfb6 <TIM1_setDutyCycle+0x40>
     fa6:	0d c0       	rjmp	.+26     	; 0xfc2 <TIM1_setDutyCycle+0x4c>
	{
	case PWM_OCR1A:	OCR1A_Register = value_us; break;
     fa8:	ea e4       	ldi	r30, 0x4A	; 74
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <TIM1_setDutyCycle+0x4c>
	case PWM_OCR1B:	OCR1B_Register = value_us; break;
     fb6:	e8 e4       	ldi	r30, 0x48	; 72
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24
	}
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <TIM0_Init>:

void (* func_ptr_ovf)(void);
void (* func_ptr_ctc)(void);

void TIM0_Init(void)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62

	// Enable Overflow Interrupt
	SET_BIT(TIMSK_Register, TOIE0);
#elif TIM0_MODE == TIM_CTC
	// Normal Mode
	CLEAR_BIT(TCCR0_Register, WGM00);
     fda:	a3 e5       	ldi	r26, 0x53	; 83
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e3 e5       	ldi	r30, 0x53	; 83
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7b       	andi	r24, 0xBF	; 191
     fe6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, WGM01);
     fe8:	a3 e5       	ldi	r26, 0x53	; 83
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e3 e5       	ldi	r30, 0x53	; 83
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	88 60       	ori	r24, 0x08	; 8
     ff4:	8c 93       	st	X, r24

	// Enable CTC Interrupt
	SET_BIT(TIMSK_Register, OCIE0);
     ff6:	a9 e5       	ldi	r26, 0x59	; 89
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e9 e5       	ldi	r30, 0x59	; 89
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	82 60       	ori	r24, 0x02	; 2
    1002:	8c 93       	st	X, r24
#endif


}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <TIM0_SetValueUS>:

void TIM0_SetValueUS(u32 us)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <TIM0_SetValueUS+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <TIM0_SetValueUS+0x8>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	6a 83       	std	Y+2, r22	; 0x02
    101a:	7b 83       	std	Y+3, r23	; 0x03
    101c:	8c 83       	std	Y+4, r24	; 0x04
    101e:	9d 83       	std	Y+5, r25	; 0x05
	u32 mod = us%256;
	preload = 256 - mod;

	TCNT0_Register = preload;
#elif TIM0_MODE == TIM_CTC
	for(u8 x = 255; x > 0; x--)
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	32 c0       	rjmp	.+100    	; 0x108a <TIM0_SetValueUS+0x80>
	{
		if(us%x == 0)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	ac 81       	ldd	r26, Y+4	; 0x04
    1036:	bd 81       	ldd	r27, Y+5	; 0x05
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 05 1c 	call	0x380a	; 0x380a <__udivmodsi4>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	a1 05       	cpc	r26, r1
    1048:	b1 05       	cpc	r27, r1
    104a:	e1 f4       	brne	.+56     	; 0x1084 <TIM0_SetValueUS+0x7a>
		{
			OCR0_Register = x;
    104c:	ec e5       	ldi	r30, 0x5C	; 92
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 83       	st	Z, r24
			NoCounts = us/x;
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	ac 81       	ldd	r26, Y+4	; 0x04
    1064:	bd 81       	ldd	r27, Y+5	; 0x05
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 05 1c 	call	0x380a	; 0x380a <__udivmodsi4>
    106e:	da 01       	movw	r26, r20
    1070:	c9 01       	movw	r24, r18
    1072:	80 93 d6 00 	sts	0x00D6, r24
    1076:	90 93 d7 00 	sts	0x00D7, r25
    107a:	a0 93 d8 00 	sts	0x00D8, r26
    107e:	b0 93 d9 00 	sts	0x00D9, r27
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <TIM0_SetValueUS+0x86>
	u32 mod = us%256;
	preload = 256 - mod;

	TCNT0_Register = preload;
#elif TIM0_MODE == TIM_CTC
	for(u8 x = 255; x > 0; x--)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	81 50       	subi	r24, 0x01	; 1
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	88 23       	and	r24, r24
    108e:	59 f6       	brne	.-106    	; 0x1026 <TIM0_SetValueUS+0x1c>
		}
	}
#endif

	// Set Clock Source (Prescaler: 8)
	CLEAR_BIT(TCCR0_Register, CS00);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8e 7f       	andi	r24, 0xFE	; 254
    109c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, CS01);
    109e:	a3 e5       	ldi	r26, 0x53	; 83
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e3 e5       	ldi	r30, 0x53	; 83
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS02);
    10ac:	a3 e5       	ldi	r26, 0x53	; 83
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e3 e5       	ldi	r30, 0x53	; 83
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8b 7f       	andi	r24, 0xFB	; 251
    10b8:	8c 93       	st	X, r24
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <TIM0_Disable>:

void TIM0_Disable(void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer (No clk)
	CLEAR_BIT(TCCR0_Register, CS00);
    10d2:	a3 e5       	ldi	r26, 0x53	; 83
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e3 e5       	ldi	r30, 0x53	; 83
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS01);
    10e0:	a3 e5       	ldi	r26, 0x53	; 83
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e3 e5       	ldi	r30, 0x53	; 83
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS02);
    10ee:	a3 e5       	ldi	r26, 0x53	; 83
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e3 e5       	ldi	r30, 0x53	; 83
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8b 7f       	andi	r24, 0xFB	; 251
    10fa:	8c 93       	st	X, r24
}
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <TIM0_SetOVFCallback>:

void TIM0_SetOVFCallback(void (* ptr)(void))
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <TIM0_SetOVFCallback+0x6>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
	func_ptr_ovf = ptr;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	90 93 d5 00 	sts	0x00D5, r25
    1118:	80 93 d4 00 	sts	0x00D4, r24
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <TIM0_SetCTCCallback>:

void TIM0_SetCTCCallback(void (* ptr)(void))
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <TIM0_SetCTCCallback+0x6>
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
	func_ptr_ctc = ptr;
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	90 93 db 00 	sts	0x00DB, r25
    113c:	80 93 da 00 	sts	0x00DA, r24
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <__vector_11>:

void __vector_11(void)
{
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	if(counter == NoCounts)
    1174:	20 91 ac 00 	lds	r18, 0x00AC
    1178:	30 91 ad 00 	lds	r19, 0x00AD
    117c:	40 91 ae 00 	lds	r20, 0x00AE
    1180:	50 91 af 00 	lds	r21, 0x00AF
    1184:	80 91 d6 00 	lds	r24, 0x00D6
    1188:	90 91 d7 00 	lds	r25, 0x00D7
    118c:	a0 91 d8 00 	lds	r26, 0x00D8
    1190:	b0 91 d9 00 	lds	r27, 0x00D9
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	4a 07       	cpc	r20, r26
    119a:	5b 07       	cpc	r21, r27
    119c:	c1 f4       	brne	.+48     	; 0x11ce <__vector_11+0x84>
	{
		func_ptr_ovf();
    119e:	e0 91 d4 00 	lds	r30, 0x00D4
    11a2:	f0 91 d5 00 	lds	r31, 0x00D5
    11a6:	09 95       	icall
		counter = 0;
    11a8:	10 92 ac 00 	sts	0x00AC, r1
    11ac:	10 92 ad 00 	sts	0x00AD, r1
    11b0:	10 92 ae 00 	sts	0x00AE, r1
    11b4:	10 92 af 00 	sts	0x00AF, r1
		TCNT0_Register = preload;
    11b8:	e2 e5       	ldi	r30, 0x52	; 82
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 91 d0 00 	lds	r24, 0x00D0
    11c0:	90 91 d1 00 	lds	r25, 0x00D1
    11c4:	a0 91 d2 00 	lds	r26, 0x00D2
    11c8:	b0 91 d3 00 	lds	r27, 0x00D3
    11cc:	80 83       	st	Z, r24
	}
	counter++;
    11ce:	80 91 ac 00 	lds	r24, 0x00AC
    11d2:	90 91 ad 00 	lds	r25, 0x00AD
    11d6:	a0 91 ae 00 	lds	r26, 0x00AE
    11da:	b0 91 af 00 	lds	r27, 0x00AF
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	a1 1d       	adc	r26, r1
    11e2:	b1 1d       	adc	r27, r1
    11e4:	80 93 ac 00 	sts	0x00AC, r24
    11e8:	90 93 ad 00 	sts	0x00AD, r25
    11ec:	a0 93 ae 00 	sts	0x00AE, r26
    11f0:	b0 93 af 00 	sts	0x00AF, r27
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <__vector_10>:

void __vector_10(void)
{
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	if(counter == NoCounts)
    1244:	20 91 b0 00 	lds	r18, 0x00B0
    1248:	30 91 b1 00 	lds	r19, 0x00B1
    124c:	40 91 b2 00 	lds	r20, 0x00B2
    1250:	50 91 b3 00 	lds	r21, 0x00B3
    1254:	80 91 d6 00 	lds	r24, 0x00D6
    1258:	90 91 d7 00 	lds	r25, 0x00D7
    125c:	a0 91 d8 00 	lds	r26, 0x00D8
    1260:	b0 91 d9 00 	lds	r27, 0x00D9
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	4a 07       	cpc	r20, r26
    126a:	5b 07       	cpc	r21, r27
    126c:	69 f4       	brne	.+26     	; 0x1288 <__vector_10+0x6e>
	{
		func_ptr_ctc();
    126e:	e0 91 da 00 	lds	r30, 0x00DA
    1272:	f0 91 db 00 	lds	r31, 0x00DB
    1276:	09 95       	icall
		counter = 0;
    1278:	10 92 b0 00 	sts	0x00B0, r1
    127c:	10 92 b1 00 	sts	0x00B1, r1
    1280:	10 92 b2 00 	sts	0x00B2, r1
    1284:	10 92 b3 00 	sts	0x00B3, r1
	}
	counter++;
    1288:	80 91 b0 00 	lds	r24, 0x00B0
    128c:	90 91 b1 00 	lds	r25, 0x00B1
    1290:	a0 91 b2 00 	lds	r26, 0x00B2
    1294:	b0 91 b3 00 	lds	r27, 0x00B3
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	a1 1d       	adc	r26, r1
    129c:	b1 1d       	adc	r27, r1
    129e:	80 93 b0 00 	sts	0x00B0, r24
    12a2:	90 93 b1 00 	sts	0x00B1, r25
    12a6:	a0 93 b2 00 	sts	0x00B2, r26
    12aa:	b0 93 b3 00 	sts	0x00B3, r27
}
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <I2C_InitMaster>:
#include "I2C_config.h"
#include "I2C_interface.h"

#include <avr/delay.h>
void I2C_InitMaster(u16 SCL_Clock)
{
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <I2C_InitMaster+0xa>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR ,TWEN);
    12e6:	a6 e5       	ldi	r26, 0x56	; 86
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e6 e5       	ldi	r30, 0x56	; 86
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	84 60       	ori	r24, 0x04	; 4
    12f2:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR , TWPS0);
    12f4:	a1 e2       	ldi	r26, 0x21	; 33
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e1 e2       	ldi	r30, 0x21	; 33
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8e 7f       	andi	r24, 0xFE	; 254
    1300:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR , TWPS1);
    1302:	a1 e2       	ldi	r26, 0x21	; 33
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e1 e2       	ldi	r30, 0x21	; 33
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8d 7f       	andi	r24, 0xFD	; 253
    130e:	8c 93       	st	X, r24
	TWBR = (u8)((8000000/8*SCL_Clock)-2);
    1310:	00 e2       	ldi	r16, 0x20	; 32
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	cc 01       	movw	r24, r24
    131a:	a0 e0       	ldi	r26, 0x00	; 0
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	20 ee       	ldi	r18, 0xE0	; 224
    1320:	3e e5       	ldi	r19, 0x5E	; 94
    1322:	48 ef       	ldi	r20, 0xF8	; 248
    1324:	5f ef       	ldi	r21, 0xFF	; 255
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <__mulsi3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	80 95       	com	r24
    1334:	90 95       	com	r25
    1336:	a0 95       	com	r26
    1338:	b0 95       	com	r27
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	aa 1f       	adc	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	f8 01       	movw	r30, r16
    1344:	80 83       	st	Z, r24
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <I2C_InitSlave>:

void I2C_InitSlave(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR ,TWEN);
    135c:	a6 e5       	ldi	r26, 0x56	; 86
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e6 e5       	ldi	r30, 0x56	; 86
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	84 60       	ori	r24, 0x04	; 4
    1368:	8c 93       	st	X, r24

	TWAR = I2C_SLAVE_ADRESS <<1;
    136a:	e2 e2       	ldi	r30, 0x22	; 34
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	84 e2       	ldi	r24, 0x24	; 36
    1370:	80 83       	st	Z, r24
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <I2C_SendStart>:

u8 I2C_SendStart(void)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	//if(GET_BIT(TWCR , TWINT)== 0) return 0xFF ;
     TWCR|=(1<<TWSTA) |(1<<TWINT)|(1<<TWEN);
    1380:	a6 e5       	ldi	r26, 0x56	; 86
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e6 e5       	ldi	r30, 0x56	; 86
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	84 6a       	ori	r24, 0xA4	; 164
    138c:	8c 93       	st	X, r24

	while(GET_BIT(TWCR , TWINT)== 0);
    138e:	e6 e5       	ldi	r30, 0x56	; 86
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	88 23       	and	r24, r24
    1396:	dc f7       	brge	.-10     	; 0x138e <I2C_SendStart+0x16>
	return TWSR & 0xF8;
    1398:	e1 e2       	ldi	r30, 0x21	; 33
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 7f       	andi	r24, 0xF8	; 248

}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <I2C_SendAddress>:
u8 I2C_SendAddress(u8 address , u8 opp)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <I2C_SendAddress+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
	TWDR =  (address <<TWA0 )| (opp);
    13b4:	e3 e2       	ldi	r30, 0x23	; 35
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	98 2f       	mov	r25, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	89 2b       	or	r24, r25
    13c8:	80 83       	st	Z, r24

	TWCR |= (1<<TWINT)|(1<<TWEN);
    13ca:	a6 e5       	ldi	r26, 0x56	; 86
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e6 e5       	ldi	r30, 0x56	; 86
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	84 68       	ori	r24, 0x84	; 132
    13d6:	8c 93       	st	X, r24
	while(GET_BIT(TWCR , TWINT) == 0);
    13d8:	e6 e5       	ldi	r30, 0x56	; 86
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	dc f7       	brge	.-10     	; 0x13d8 <I2C_SendAddress+0x32>
	return TWSR & 0xF8 ;
    13e2:	e1 e2       	ldi	r30, 0x21	; 33
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	88 7f       	andi	r24, 0xF8	; 248

}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <I2C_SendData>:
u8 I2C_SendData(u8 data)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	0f 92       	push	r0
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data ;
    1400:	e3 e2       	ldi	r30, 0x23	; 35
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	80 83       	st	Z, r24

  TWCR |=(1<TWINT)|(1<<TWEN) ;
    1408:	a6 e5       	ldi	r26, 0x56	; 86
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e6 e5       	ldi	r30, 0x56	; 86
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	85 60       	ori	r24, 0x05	; 5
    1414:	8c 93       	st	X, r24

  while(GET_BIT(TWCR , TWINT)== 0);
    1416:	e6 e5       	ldi	r30, 0x56	; 86
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	88 23       	and	r24, r24
    141e:	dc f7       	brge	.-10     	; 0x1416 <I2C_SendData+0x22>

  return TWSR & 0xF8;
    1420:	e1 e2       	ldi	r30, 0x21	; 33
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	88 7f       	andi	r24, 0xF8	; 248

}
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <I2C_SendStop>:
u8 I2C_SendStop(void)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	//if(GET_BIT(TWCR , TWINT)== 0) return 0xFF ;
     TWCR |=(1<<TWSTO) |(1<<TWINT)|(1<<TWEN);
    1438:	a6 e5       	ldi	r26, 0x56	; 86
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e6 e5       	ldi	r30, 0x56	; 86
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	84 69       	ori	r24, 0x94	; 148
    1444:	8c 93       	st	X, r24

	return TWSR & 0xF8;
    1446:	e1 e2       	ldi	r30, 0x21	; 33
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	88 7f       	andi	r24, 0xF8	; 248
}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <I2C_ReceiveWihtAck>:
u8 I2C_ReceiveWihtAck(void)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
  TWCR |=(1<<TWEA) | (1<< TWINT)|(1<<TWEN) ;
    145c:	a6 e5       	ldi	r26, 0x56	; 86
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e6 e5       	ldi	r30, 0x56	; 86
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	84 6c       	ori	r24, 0xC4	; 196
    1468:	8c 93       	st	X, r24

  while(GET_BIT(TWCR , TWINT)== 0);
    146a:	e6 e5       	ldi	r30, 0x56	; 86
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	88 23       	and	r24, r24
    1472:	dc f7       	brge	.-10     	; 0x146a <I2C_ReceiveWihtAck+0x16>

  return TWDR ;
    1474:	e3 e2       	ldi	r30, 0x23	; 35
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <I2C_ReceiveWihoutAck>:
u8 I2C_ReceiveWihoutAck(void)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	  TWCR |=(1<<TWEN) | (1<< TWINT) ;
    1488:	a6 e5       	ldi	r26, 0x56	; 86
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e6 e5       	ldi	r30, 0x56	; 86
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	84 68       	ori	r24, 0x84	; 132
    1494:	8c 93       	st	X, r24

	  while(GET_BIT(TWCR , TWINT)== 0);
    1496:	e6 e5       	ldi	r30, 0x56	; 86
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	88 23       	and	r24, r24
    149e:	dc f7       	brge	.-10     	; 0x1496 <I2C_ReceiveWihoutAck+0x16>

	  return TWDR ;
    14a0:	e3 e2       	ldi	r30, 0x23	; 35
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <I2C_SendFram>:

u8 I2C_SendFram(u8 address , u8*buf , u8 len)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	66 97       	sbiw	r28, 0x16	; 22
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	8a 8b       	std	Y+18, r24	; 0x12
    14c2:	7c 8b       	std	Y+20, r23	; 0x14
    14c4:	6b 8b       	std	Y+19, r22	; 0x13
    14c6:	4d 8b       	std	Y+21, r20	; 0x15
	u8 state ;
	//send start condition
	state = I2C_SendStart();
    14c8:	0e 94 bc 09 	call	0x1378	; 0x1378 <I2C_SendStart>
    14cc:	89 8b       	std	Y+17, r24	; 0x11

	if(state != I2C_STAT_STA) return state ;
    14ce:	89 89       	ldd	r24, Y+17	; 0x11
    14d0:	88 30       	cpi	r24, 0x08	; 8
    14d2:	19 f0       	breq	.+6      	; 0x14da <I2C_SendFram+0x2e>
    14d4:	89 89       	ldd	r24, Y+17	; 0x11
    14d6:	8e 8b       	std	Y+22, r24	; 0x16
    14d8:	a3 c0       	rjmp	.+326    	; 0x1620 <I2C_SendFram+0x174>

	state = I2C_SendAddress(address , I2C_WRITE_OPP);
    14da:	8a 89       	ldd	r24, Y+18	; 0x12
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <I2C_SendAddress>
    14e2:	89 8b       	std	Y+17, r24	; 0x11

	if(state != I2C_STAT_ADDRESS_ACK) return state ;
    14e4:	89 89       	ldd	r24, Y+17	; 0x11
    14e6:	88 31       	cpi	r24, 0x18	; 24
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <I2C_SendFram+0x44>
    14ea:	89 89       	ldd	r24, Y+17	; 0x11
    14ec:	8e 8b       	std	Y+22, r24	; 0x16
    14ee:	98 c0       	rjmp	.+304    	; 0x1620 <I2C_SendFram+0x174>

	for(int i= 0 ; i<len-1; i++)
    14f0:	18 8a       	std	Y+16, r1	; 0x10
    14f2:	1f 86       	std	Y+15, r1	; 0x0f
    14f4:	85 c0       	rjmp	.+266    	; 0x1600 <I2C_SendFram+0x154>
	{
		state = I2C_SendData(buf[i]);
    14f6:	2f 85       	ldd	r18, Y+15	; 0x0f
    14f8:	38 89       	ldd	r19, Y+16	; 0x10
    14fa:	8b 89       	ldd	r24, Y+19	; 0x13
    14fc:	9c 89       	ldd	r25, Y+20	; 0x14
    14fe:	fc 01       	movw	r30, r24
    1500:	e2 0f       	add	r30, r18
    1502:	f3 1f       	adc	r31, r19
    1504:	80 81       	ld	r24, Z
    1506:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <I2C_SendData>
    150a:	89 8b       	std	Y+17, r24	; 0x11
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a8 ec       	ldi	r26, 0xC8	; 200
    1512:	b2 e4       	ldi	r27, 0x42	; 66
    1514:	8b 87       	std	Y+11, r24	; 0x0b
    1516:	9c 87       	std	Y+12, r25	; 0x0c
    1518:	ad 87       	std	Y+13, r26	; 0x0d
    151a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151c:	6b 85       	ldd	r22, Y+11	; 0x0b
    151e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1520:	8d 85       	ldd	r24, Y+13	; 0x0d
    1522:	9e 85       	ldd	r25, Y+14	; 0x0e
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	4a e7       	ldi	r20, 0x7A	; 122
    152a:	53 e4       	ldi	r21, 0x43	; 67
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	8f 83       	std	Y+7, r24	; 0x07
    1536:	98 87       	std	Y+8, r25	; 0x08
    1538:	a9 87       	std	Y+9, r26	; 0x09
    153a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153c:	6f 81       	ldd	r22, Y+7	; 0x07
    153e:	78 85       	ldd	r23, Y+8	; 0x08
    1540:	89 85       	ldd	r24, Y+9	; 0x09
    1542:	9a 85       	ldd	r25, Y+10	; 0x0a
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	5f e3       	ldi	r21, 0x3F	; 63
    154c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1550:	88 23       	and	r24, r24
    1552:	2c f4       	brge	.+10     	; 0x155e <I2C_SendFram+0xb2>
		__ticks = 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	3f c0       	rjmp	.+126    	; 0x15dc <I2C_SendFram+0x130>
	else if (__tmp > 65535)
    155e:	6f 81       	ldd	r22, Y+7	; 0x07
    1560:	78 85       	ldd	r23, Y+8	; 0x08
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	9a 85       	ldd	r25, Y+10	; 0x0a
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1572:	18 16       	cp	r1, r24
    1574:	4c f5       	brge	.+82     	; 0x15c8 <I2C_SendFram+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1576:	6b 85       	ldd	r22, Y+11	; 0x0b
    1578:	7c 85       	ldd	r23, Y+12	; 0x0c
    157a:	8d 85       	ldd	r24, Y+13	; 0x0d
    157c:	9e 85       	ldd	r25, Y+14	; 0x0e
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	bc 01       	movw	r22, r24
    1590:	cd 01       	movw	r24, r26
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	0f c0       	rjmp	.+30     	; 0x15be <I2C_SendFram+0x112>
    15a0:	89 e1       	ldi	r24, 0x19	; 25
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9c 83       	std	Y+4, r25	; 0x04
    15a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <I2C_SendFram+0x100>
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	69 f7       	brne	.-38     	; 0x15a0 <I2C_SendFram+0xf4>
    15c6:	14 c0       	rjmp	.+40     	; 0x15f0 <I2C_SendFram+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ca:	78 85       	ldd	r23, Y+8	; 0x08
    15cc:	89 85       	ldd	r24, Y+9	; 0x09
    15ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <I2C_SendFram+0x13c>
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		if(state != I2C_STAT_DATA_ACK) break ;
    15f0:	89 89       	ldd	r24, Y+17	; 0x11
    15f2:	88 32       	cpi	r24, 0x28	; 40
    15f4:	89 f4       	brne	.+34     	; 0x1618 <I2C_SendFram+0x16c>

	state = I2C_SendAddress(address , I2C_WRITE_OPP);

	if(state != I2C_STAT_ADDRESS_ACK) return state ;

	for(int i= 0 ; i<len-1; i++)
    15f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f8:	98 89       	ldd	r25, Y+16	; 0x10
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	98 8b       	std	Y+16, r25	; 0x10
    15fe:	8f 87       	std	Y+15, r24	; 0x0f
    1600:	8d 89       	ldd	r24, Y+21	; 0x15
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9c 01       	movw	r18, r24
    1608:	21 50       	subi	r18, 0x01	; 1
    160a:	30 40       	sbci	r19, 0x00	; 0
    160c:	8f 85       	ldd	r24, Y+15	; 0x0f
    160e:	98 89       	ldd	r25, Y+16	; 0x10
    1610:	82 17       	cp	r24, r18
    1612:	93 07       	cpc	r25, r19
    1614:	0c f4       	brge	.+2      	; 0x1618 <I2C_SendFram+0x16c>
    1616:	6f cf       	rjmp	.-290    	; 0x14f6 <I2C_SendFram+0x4a>
		state = I2C_SendData(buf[i]);
		_delay_ms(100);
		if(state != I2C_STAT_DATA_ACK) break ;

	}
	 I2C_SendStop();
    1618:	0e 94 18 0a 	call	0x1430	; 0x1430 <I2C_SendStop>

	return state ;
    161c:	89 89       	ldd	r24, Y+17	; 0x11
    161e:	8e 8b       	std	Y+22, r24	; 0x16
    1620:	8e 89       	ldd	r24, Y+22	; 0x16
}
    1622:	66 96       	adiw	r28, 0x16	; 22
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <GIE_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"


void GIE_Enable(void)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Register, I_Bit);
    163c:	af e5       	ldi	r26, 0x5F	; 95
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ef e5       	ldi	r30, 0x5F	; 95
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 68       	ori	r24, 0x80	; 128
    1648:	8c 93       	st	X, r24
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <GIE_Disable>:

void GIE_Disable(void)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_Register, I_Bit);
    1658:	af e5       	ldi	r26, 0x5F	; 95
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ef e5       	ldi	r30, 0x5F	; 95
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8f 77       	andi	r24, 0x7F	; 127
    1664:	8c 93       	st	X, r24
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <EXTI_SetMode>:

}
*/

void EXTI_SetMode(u8 L_u8EXTINum, u8 L_u8Mode)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <EXTI_SetMode+0x6>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <EXTI_SetMode+0x8>
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8EXTINum)
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3c 83       	std	Y+4, r19	; 0x04
    1684:	2b 83       	std	Y+3, r18	; 0x03
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	91 05       	cpc	r25, r1
    168e:	d9 f0       	breq	.+54     	; 0x16c6 <EXTI_SetMode+0x5a>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	23 30       	cpi	r18, 0x03	; 3
    1696:	31 05       	cpc	r19, r1
    1698:	69 f1       	breq	.+90     	; 0x16f4 <EXTI_SetMode+0x88>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <EXTI_SetMode+0x3a>
    16a4:	44 c0       	rjmp	.+136    	; 0x172e <EXTI_SetMode+0xc2>
	{
	case EXTI0:
		MCUCR_Register &= ~(0b11 << ISC00);
    16a6:	a5 e5       	ldi	r26, 0x55	; 85
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e5 e5       	ldi	r30, 0x55	; 85
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8c 7f       	andi	r24, 0xFC	; 252
    16b2:	8c 93       	st	X, r24
		MCUCR_Register |= L_u8Mode << ISC00;
    16b4:	a5 e5       	ldi	r26, 0x55	; 85
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e5       	ldi	r30, 0x55	; 85
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	90 81       	ld	r25, Z
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	89 2b       	or	r24, r25
    16c2:	8c 93       	st	X, r24
    16c4:	34 c0       	rjmp	.+104    	; 0x172e <EXTI_SetMode+0xc2>
		break;
	case EXTI1:
		MCUCR_Register &= ~(0b11 << ISC10);
    16c6:	a5 e5       	ldi	r26, 0x55	; 85
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e5       	ldi	r30, 0x55	; 85
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	83 7f       	andi	r24, 0xF3	; 243
    16d2:	8c 93       	st	X, r24
		MCUCR_Register |= L_u8Mode << ISC10;
    16d4:	a5 e5       	ldi	r26, 0x55	; 85
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e5 e5       	ldi	r30, 0x55	; 85
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	28 2f       	mov	r18, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	82 2b       	or	r24, r18
    16f0:	8c 93       	st	X, r24
    16f2:	1d c0       	rjmp	.+58     	; 0x172e <EXTI_SetMode+0xc2>
		break;
	case EXTI2:
		CLEAR_BIT(MCUCSR_Register, ISC2);
    16f4:	a4 e5       	ldi	r26, 0x54	; 84
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e4 e5       	ldi	r30, 0x54	; 84
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8f 7b       	andi	r24, 0xBF	; 191
    1700:	8c 93       	st	X, r24
		MCUCSR_Register |= (1 & L_u8Mode) << ISC2;
    1702:	a4 e5       	ldi	r26, 0x54	; 84
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e4 e5       	ldi	r30, 0x54	; 84
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	28 2f       	mov	r18, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	81 70       	andi	r24, 0x01	; 1
    1716:	90 70       	andi	r25, 0x00	; 0
    1718:	00 24       	eor	r0, r0
    171a:	96 95       	lsr	r25
    171c:	87 95       	ror	r24
    171e:	07 94       	ror	r0
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	07 94       	ror	r0
    1726:	98 2f       	mov	r25, r24
    1728:	80 2d       	mov	r24, r0
    172a:	82 2b       	or	r24, r18
    172c:	8c 93       	st	X, r24
		break;
	}
}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <EXTI_Enable>:


void EXTI_Enable(u8 L_u8EXTINum)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <EXTI_Enable+0x6>
    1742:	0f 92       	push	r0
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTINum)
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	3b 83       	std	Y+3, r19	; 0x03
    1752:	2a 83       	std	Y+2, r18	; 0x02
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	82 30       	cpi	r24, 0x02	; 2
    175a:	91 05       	cpc	r25, r1
    175c:	91 f0       	breq	.+36     	; 0x1782 <EXTI_Enable+0x46>
    175e:	2a 81       	ldd	r18, Y+2	; 0x02
    1760:	3b 81       	ldd	r19, Y+3	; 0x03
    1762:	23 30       	cpi	r18, 0x03	; 3
    1764:	31 05       	cpc	r19, r1
    1766:	a9 f0       	breq	.+42     	; 0x1792 <EXTI_Enable+0x56>
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	9b 81       	ldd	r25, Y+3	; 0x03
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	b9 f4       	brne	.+46     	; 0x17a0 <EXTI_Enable+0x64>
	{
	case EXTI0:	SET_BIT(GICR_Register, INT0); break;
    1772:	ab e5       	ldi	r26, 0x5B	; 91
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e5       	ldi	r30, 0x5B	; 91
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 64       	ori	r24, 0x40	; 64
    177e:	8c 93       	st	X, r24
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <EXTI_Enable+0x64>
	case EXTI1:	SET_BIT(GICR_Register, INT1); break;
    1782:	ab e5       	ldi	r26, 0x5B	; 91
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	eb e5       	ldi	r30, 0x5B	; 91
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	80 68       	ori	r24, 0x80	; 128
    178e:	8c 93       	st	X, r24
    1790:	07 c0       	rjmp	.+14     	; 0x17a0 <EXTI_Enable+0x64>
	case EXTI2:	SET_BIT(GICR_Register, INT2); break;
    1792:	ab e5       	ldi	r26, 0x5B	; 91
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	eb e5       	ldi	r30, 0x5B	; 91
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 62       	ori	r24, 0x20	; 32
    179e:	8c 93       	st	X, r24
	}
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <EXTI_Disable>:


void EXTI_Disable(u8 L_u8EXTINum)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <EXTI_Disable+0x6>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTINum)
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	3b 83       	std	Y+3, r19	; 0x03
    17c2:	2a 83       	std	Y+2, r18	; 0x02
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	91 05       	cpc	r25, r1
    17cc:	91 f0       	breq	.+36     	; 0x17f2 <EXTI_Disable+0x46>
    17ce:	2a 81       	ldd	r18, Y+2	; 0x02
    17d0:	3b 81       	ldd	r19, Y+3	; 0x03
    17d2:	23 30       	cpi	r18, 0x03	; 3
    17d4:	31 05       	cpc	r19, r1
    17d6:	a9 f0       	breq	.+42     	; 0x1802 <EXTI_Disable+0x56>
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	9b 81       	ldd	r25, Y+3	; 0x03
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	b9 f4       	brne	.+46     	; 0x1810 <EXTI_Disable+0x64>
	{
	case EXTI0:	CLEAR_BIT(GICR_Register, INT0); break;
    17e2:	ab e5       	ldi	r26, 0x5B	; 91
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	eb e5       	ldi	r30, 0x5B	; 91
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	8f 7b       	andi	r24, 0xBF	; 191
    17ee:	8c 93       	st	X, r24
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <EXTI_Disable+0x64>
	case EXTI1:	CLEAR_BIT(GICR_Register, INT1); break;
    17f2:	ab e5       	ldi	r26, 0x5B	; 91
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	eb e5       	ldi	r30, 0x5B	; 91
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 77       	andi	r24, 0x7F	; 127
    17fe:	8c 93       	st	X, r24
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <EXTI_Disable+0x64>
	case EXTI2:	CLEAR_BIT(GICR_Register, INT2); break;
    1802:	ab e5       	ldi	r26, 0x5B	; 91
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e5       	ldi	r30, 0x5B	; 91
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8f 7d       	andi	r24, 0xDF	; 223
    180e:	8c 93       	st	X, r24
	}
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <EXTI_SetCallback>:


void EXTI_SetCallback(u8 L_u8EXTINum, void (* ptr)())
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <EXTI_SetCallback+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <EXTI_SetCallback+0x8>
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	7b 83       	std	Y+3, r23	; 0x03
    182e:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8EXTINum)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3d 83       	std	Y+5, r19	; 0x05
    1838:	2c 83       	std	Y+4, r18	; 0x04
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	91 05       	cpc	r25, r1
    1842:	89 f0       	breq	.+34     	; 0x1866 <EXTI_SetCallback+0x4a>
    1844:	2c 81       	ldd	r18, Y+4	; 0x04
    1846:	3d 81       	ldd	r19, Y+5	; 0x05
    1848:	23 30       	cpi	r18, 0x03	; 3
    184a:	31 05       	cpc	r19, r1
    184c:	99 f0       	breq	.+38     	; 0x1874 <EXTI_SetCallback+0x58>
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	a1 f4       	brne	.+40     	; 0x1880 <EXTI_SetCallback+0x64>
	{
	case EXTI0: callback_ptr1 = ptr; break;
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	90 93 dd 00 	sts	0x00DD, r25
    1860:	80 93 dc 00 	sts	0x00DC, r24
    1864:	0d c0       	rjmp	.+26     	; 0x1880 <EXTI_SetCallback+0x64>
	case EXTI1: callback_ptr2 = ptr; break;
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	90 93 df 00 	sts	0x00DF, r25
    186e:	80 93 de 00 	sts	0x00DE, r24
    1872:	06 c0       	rjmp	.+12     	; 0x1880 <EXTI_SetCallback+0x64>
	case EXTI2: callback_ptr3 = ptr; break;
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	9b 81       	ldd	r25, Y+3	; 0x03
    1878:	90 93 e1 00 	sts	0x00E1, r25
    187c:	80 93 e0 00 	sts	0x00E0, r24
	}
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <__vector_1>:

void __vector_1(void)
{
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	2f 93       	push	r18
    189c:	3f 93       	push	r19
    189e:	4f 93       	push	r20
    18a0:	5f 93       	push	r21
    18a2:	6f 93       	push	r22
    18a4:	7f 93       	push	r23
    18a6:	8f 93       	push	r24
    18a8:	9f 93       	push	r25
    18aa:	af 93       	push	r26
    18ac:	bf 93       	push	r27
    18ae:	ef 93       	push	r30
    18b0:	ff 93       	push	r31
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	callback_ptr1();
    18ba:	e0 91 dc 00 	lds	r30, 0x00DC
    18be:	f0 91 dd 00 	lds	r31, 0x00DD
    18c2:	09 95       	icall
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	ff 91       	pop	r31
    18ca:	ef 91       	pop	r30
    18cc:	bf 91       	pop	r27
    18ce:	af 91       	pop	r26
    18d0:	9f 91       	pop	r25
    18d2:	8f 91       	pop	r24
    18d4:	7f 91       	pop	r23
    18d6:	6f 91       	pop	r22
    18d8:	5f 91       	pop	r21
    18da:	4f 91       	pop	r20
    18dc:	3f 91       	pop	r19
    18de:	2f 91       	pop	r18
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <__vector_2>:

void __vector_2(void)
{
    18ea:	1f 92       	push	r1
    18ec:	0f 92       	push	r0
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	0f 92       	push	r0
    18f2:	11 24       	eor	r1, r1
    18f4:	2f 93       	push	r18
    18f6:	3f 93       	push	r19
    18f8:	4f 93       	push	r20
    18fa:	5f 93       	push	r21
    18fc:	6f 93       	push	r22
    18fe:	7f 93       	push	r23
    1900:	8f 93       	push	r24
    1902:	9f 93       	push	r25
    1904:	af 93       	push	r26
    1906:	bf 93       	push	r27
    1908:	ef 93       	push	r30
    190a:	ff 93       	push	r31
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
	callback_ptr2();
    1914:	e0 91 de 00 	lds	r30, 0x00DE
    1918:	f0 91 df 00 	lds	r31, 0x00DF
    191c:	09 95       	icall
}
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	ff 91       	pop	r31
    1924:	ef 91       	pop	r30
    1926:	bf 91       	pop	r27
    1928:	af 91       	pop	r26
    192a:	9f 91       	pop	r25
    192c:	8f 91       	pop	r24
    192e:	7f 91       	pop	r23
    1930:	6f 91       	pop	r22
    1932:	5f 91       	pop	r21
    1934:	4f 91       	pop	r20
    1936:	3f 91       	pop	r19
    1938:	2f 91       	pop	r18
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <__vector_3>:

void __vector_3(void)
{
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	2f 93       	push	r18
    1950:	3f 93       	push	r19
    1952:	4f 93       	push	r20
    1954:	5f 93       	push	r21
    1956:	6f 93       	push	r22
    1958:	7f 93       	push	r23
    195a:	8f 93       	push	r24
    195c:	9f 93       	push	r25
    195e:	af 93       	push	r26
    1960:	bf 93       	push	r27
    1962:	ef 93       	push	r30
    1964:	ff 93       	push	r31
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	callback_ptr3();
    196e:	e0 91 e0 00 	lds	r30, 0x00E0
    1972:	f0 91 e1 00 	lds	r31, 0x00E1
    1976:	09 95       	icall
}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	ff 91       	pop	r31
    197e:	ef 91       	pop	r30
    1980:	bf 91       	pop	r27
    1982:	af 91       	pop	r26
    1984:	9f 91       	pop	r25
    1986:	8f 91       	pop	r24
    1988:	7f 91       	pop	r23
    198a:	6f 91       	pop	r22
    198c:	5f 91       	pop	r21
    198e:	4f 91       	pop	r20
    1990:	3f 91       	pop	r19
    1992:	2f 91       	pop	r18
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <DIO_u8SetPinValue>:

#include "DIO_private.h"
#include "DIO_interface.h"

u8 DIO_u8SetPinValue(u8 L_u8Port, u8 L_u8Pin, u8 L_u8Value)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	28 97       	sbiw	r28, 0x08	; 8
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	6a 83       	std	Y+2, r22	; 0x02
    19b6:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Value == HIGH)
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <DIO_u8SetPinValue+0x22>
    19be:	73 c0       	rjmp	.+230    	; 0x1aa6 <DIO_u8SetPinValue+0x108>
	{
		switch(L_u8Port)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	38 87       	std	Y+8, r19	; 0x08
    19c8:	2f 83       	std	Y+7, r18	; 0x07
    19ca:	8f 81       	ldd	r24, Y+7	; 0x07
    19cc:	98 85       	ldd	r25, Y+8	; 0x08
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	91 05       	cpc	r25, r1
    19d2:	51 f1       	breq	.+84     	; 0x1a28 <DIO_u8SetPinValue+0x8a>
    19d4:	2f 81       	ldd	r18, Y+7	; 0x07
    19d6:	38 85       	ldd	r19, Y+8	; 0x08
    19d8:	23 30       	cpi	r18, 0x03	; 3
    19da:	31 05       	cpc	r19, r1
    19dc:	34 f4       	brge	.+12     	; 0x19ea <DIO_u8SetPinValue+0x4c>
    19de:	8f 81       	ldd	r24, Y+7	; 0x07
    19e0:	98 85       	ldd	r25, Y+8	; 0x08
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	91 05       	cpc	r25, r1
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <DIO_u8SetPinValue+0x62>
    19e8:	5b c0       	rjmp	.+182    	; 0x1aa0 <DIO_u8SetPinValue+0x102>
    19ea:	2f 81       	ldd	r18, Y+7	; 0x07
    19ec:	38 85       	ldd	r19, Y+8	; 0x08
    19ee:	23 30       	cpi	r18, 0x03	; 3
    19f0:	31 05       	cpc	r19, r1
    19f2:	71 f1       	breq	.+92     	; 0x1a50 <DIO_u8SetPinValue+0xb2>
    19f4:	8f 81       	ldd	r24, Y+7	; 0x07
    19f6:	98 85       	ldd	r25, Y+8	; 0x08
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	91 05       	cpc	r25, r1
    19fc:	e9 f1       	breq	.+122    	; 0x1a78 <DIO_u8SetPinValue+0xda>
    19fe:	50 c0       	rjmp	.+160    	; 0x1aa0 <DIO_u8SetPinValue+0x102>
		{
		case PORTA: SET_BIT(PORTA_Register, L_u8Pin); break;
    1a00:	ab e3       	ldi	r26, 0x3B	; 59
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	eb e3       	ldi	r30, 0x3B	; 59
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_u8SetPinValue+0x80>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <DIO_u8SetPinValue+0x7c>
    1a22:	84 2b       	or	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	be c0       	rjmp	.+380    	; 0x1ba4 <DIO_u8SetPinValue+0x206>
		case PORTB: SET_BIT(PORTB_Register, L_u8Pin); break;
    1a28:	a8 e3       	ldi	r26, 0x38	; 56
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e8 e3       	ldi	r30, 0x38	; 56
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <DIO_u8SetPinValue+0xa8>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <DIO_u8SetPinValue+0xa4>
    1a4a:	84 2b       	or	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	aa c0       	rjmp	.+340    	; 0x1ba4 <DIO_u8SetPinValue+0x206>
		case PORTC: SET_BIT(PORTC_Register, L_u8Pin); break;
    1a50:	a5 e3       	ldi	r26, 0x35	; 53
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e3       	ldi	r30, 0x35	; 53
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <DIO_u8SetPinValue+0xd0>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <DIO_u8SetPinValue+0xcc>
    1a72:	84 2b       	or	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	96 c0       	rjmp	.+300    	; 0x1ba4 <DIO_u8SetPinValue+0x206>
		case PORTD: SET_BIT(PORTD_Register, L_u8Pin); break;
    1a78:	a2 e3       	ldi	r26, 0x32	; 50
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e2 e3       	ldi	r30, 0x32	; 50
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_u8SetPinValue+0xf8>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <DIO_u8SetPinValue+0xf4>
    1a9a:	84 2b       	or	r24, r20
    1a9c:	8c 93       	st	X, r24
    1a9e:	82 c0       	rjmp	.+260    	; 0x1ba4 <DIO_u8SetPinValue+0x206>
		default: return DIO_ERROR; break;
    1aa0:	9f ef       	ldi	r25, 0xFF	; 255
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	80 c0       	rjmp	.+256    	; 0x1ba6 <DIO_u8SetPinValue+0x208>
		}
	}
	else if(L_u8Value == LOW)
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <DIO_u8SetPinValue+0x110>
    1aac:	78 c0       	rjmp	.+240    	; 0x1b9e <DIO_u8SetPinValue+0x200>
	{
		switch(L_u8Port)
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3d 83       	std	Y+5, r19	; 0x05
    1ab6:	2c 83       	std	Y+4, r18	; 0x04
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	91 05       	cpc	r25, r1
    1ac0:	61 f1       	breq	.+88     	; 0x1b1a <DIO_u8SetPinValue+0x17c>
    1ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac6:	23 30       	cpi	r18, 0x03	; 3
    1ac8:	31 05       	cpc	r19, r1
    1aca:	34 f4       	brge	.+12     	; 0x1ad8 <DIO_u8SetPinValue+0x13a>
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	69 f0       	breq	.+26     	; 0x1af0 <DIO_u8SetPinValue+0x152>
    1ad6:	60 c0       	rjmp	.+192    	; 0x1b98 <DIO_u8SetPinValue+0x1fa>
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	23 30       	cpi	r18, 0x03	; 3
    1ade:	31 05       	cpc	r19, r1
    1ae0:	89 f1       	breq	.+98     	; 0x1b44 <DIO_u8SetPinValue+0x1a6>
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	84 30       	cpi	r24, 0x04	; 4
    1ae8:	91 05       	cpc	r25, r1
    1aea:	09 f4       	brne	.+2      	; 0x1aee <DIO_u8SetPinValue+0x150>
    1aec:	40 c0       	rjmp	.+128    	; 0x1b6e <DIO_u8SetPinValue+0x1d0>
    1aee:	54 c0       	rjmp	.+168    	; 0x1b98 <DIO_u8SetPinValue+0x1fa>
		{
		case PORTA: CLEAR_BIT(PORTA_Register, L_u8Pin); break;
    1af0:	ab e3       	ldi	r26, 0x3B	; 59
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	eb e3       	ldi	r30, 0x3B	; 59
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_u8SetPinValue+0x170>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_u8SetPinValue+0x16c>
    1b12:	80 95       	com	r24
    1b14:	84 23       	and	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	45 c0       	rjmp	.+138    	; 0x1ba4 <DIO_u8SetPinValue+0x206>
		case PORTB: CLEAR_BIT(PORTB_Register, L_u8Pin); break;
    1b1a:	a8 e3       	ldi	r26, 0x38	; 56
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e8 e3       	ldi	r30, 0x38	; 56
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_u8SetPinValue+0x19a>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_u8SetPinValue+0x196>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	30 c0       	rjmp	.+96     	; 0x1ba4 <DIO_u8SetPinValue+0x206>
		case PORTC: CLEAR_BIT(PORTC_Register, L_u8Pin); break;
    1b44:	a5 e3       	ldi	r26, 0x35	; 53
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e5 e3       	ldi	r30, 0x35	; 53
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_u8SetPinValue+0x1c4>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_u8SetPinValue+0x1c0>
    1b66:	80 95       	com	r24
    1b68:	84 23       	and	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	1b c0       	rjmp	.+54     	; 0x1ba4 <DIO_u8SetPinValue+0x206>
		case PORTD: CLEAR_BIT(PORTD_Register, L_u8Pin); break;
    1b6e:	a2 e3       	ldi	r26, 0x32	; 50
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e2 e3       	ldi	r30, 0x32	; 50
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	48 2f       	mov	r20, r24
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 2e       	mov	r0, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <DIO_u8SetPinValue+0x1ee>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <DIO_u8SetPinValue+0x1ea>
    1b90:	80 95       	com	r24
    1b92:	84 23       	and	r24, r20
    1b94:	8c 93       	st	X, r24
    1b96:	06 c0       	rjmp	.+12     	; 0x1ba4 <DIO_u8SetPinValue+0x206>
		default: return DIO_ERROR; break;
    1b98:	9f ef       	ldi	r25, 0xFF	; 255
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <DIO_u8SetPinValue+0x208>
		}
	}
	else
	{
		return DIO_ERROR;
    1b9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ba0:	2e 83       	std	Y+6, r18	; 0x06
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <DIO_u8SetPinValue+0x208>
	}
	return DIO_OK;
    1ba4:	1e 82       	std	Y+6, r1	; 0x06
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06

}
    1ba8:	28 96       	adiw	r28, 0x08	; 8
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 L_u8Port, u8 L_u8Pin)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <DIO_u8GetPinValue+0x6>
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <DIO_u8GetPinValue+0x8>
    1bc2:	0f 92       	push	r0
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	8a 83       	std	Y+2, r24	; 0x02
    1bca:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8Result;
	switch(L_u8Port)
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3d 83       	std	Y+5, r19	; 0x05
    1bd4:	2c 83       	std	Y+4, r18	; 0x04
    1bd6:	4c 81       	ldd	r20, Y+4	; 0x04
    1bd8:	5d 81       	ldd	r21, Y+5	; 0x05
    1bda:	42 30       	cpi	r20, 0x02	; 2
    1bdc:	51 05       	cpc	r21, r1
    1bde:	41 f1       	breq	.+80     	; 0x1c30 <DIO_u8GetPinValue+0x76>
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	9d 81       	ldd	r25, Y+5	; 0x05
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	91 05       	cpc	r25, r1
    1be8:	34 f4       	brge	.+12     	; 0x1bf6 <DIO_u8GetPinValue+0x3c>
    1bea:	2c 81       	ldd	r18, Y+4	; 0x04
    1bec:	3d 81       	ldd	r19, Y+5	; 0x05
    1bee:	21 30       	cpi	r18, 0x01	; 1
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	61 f0       	breq	.+24     	; 0x1c0c <DIO_u8GetPinValue+0x52>
    1bf4:	53 c0       	rjmp	.+166    	; 0x1c9c <DIO_u8GetPinValue+0xe2>
    1bf6:	4c 81       	ldd	r20, Y+4	; 0x04
    1bf8:	5d 81       	ldd	r21, Y+5	; 0x05
    1bfa:	43 30       	cpi	r20, 0x03	; 3
    1bfc:	51 05       	cpc	r21, r1
    1bfe:	51 f1       	breq	.+84     	; 0x1c54 <DIO_u8GetPinValue+0x9a>
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	91 05       	cpc	r25, r1
    1c08:	b9 f1       	breq	.+110    	; 0x1c78 <DIO_u8GetPinValue+0xbe>
    1c0a:	48 c0       	rjmp	.+144    	; 0x1c9c <DIO_u8GetPinValue+0xe2>
	{
	case PORTA: L_u8Result= GET_BIT(PINA_Register, L_u8Pin); break;
    1c0c:	e9 e3       	ldi	r30, 0x39	; 57
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a9 01       	movw	r20, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_u8GetPinValue+0x6a>
    1c20:	55 95       	asr	r21
    1c22:	47 95       	ror	r20
    1c24:	8a 95       	dec	r24
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_u8GetPinValue+0x66>
    1c28:	ca 01       	movw	r24, r20
    1c2a:	81 70       	andi	r24, 0x01	; 1
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	38 c0       	rjmp	.+112    	; 0x1ca0 <DIO_u8GetPinValue+0xe6>
	case PORTB: L_u8Result= GET_BIT(PINB_Register, L_u8Pin); break;
    1c30:	e6 e3       	ldi	r30, 0x36	; 54
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a9 01       	movw	r20, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_u8GetPinValue+0x8e>
    1c44:	55 95       	asr	r21
    1c46:	47 95       	ror	r20
    1c48:	8a 95       	dec	r24
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_u8GetPinValue+0x8a>
    1c4c:	ca 01       	movw	r24, r20
    1c4e:	81 70       	andi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	26 c0       	rjmp	.+76     	; 0x1ca0 <DIO_u8GetPinValue+0xe6>
	case PORTC: L_u8Result= GET_BIT(PINC_Register, L_u8Pin); break;
    1c54:	e3 e3       	ldi	r30, 0x33	; 51
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a9 01       	movw	r20, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_u8GetPinValue+0xb2>
    1c68:	55 95       	asr	r21
    1c6a:	47 95       	ror	r20
    1c6c:	8a 95       	dec	r24
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_u8GetPinValue+0xae>
    1c70:	ca 01       	movw	r24, r20
    1c72:	81 70       	andi	r24, 0x01	; 1
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <DIO_u8GetPinValue+0xe6>
	case PORTD: L_u8Result= GET_BIT(PIND_Register, L_u8Pin); break;
    1c78:	e0 e3       	ldi	r30, 0x30	; 48
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a9 01       	movw	r20, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <DIO_u8GetPinValue+0xd6>
    1c8c:	55 95       	asr	r21
    1c8e:	47 95       	ror	r20
    1c90:	8a 95       	dec	r24
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <DIO_u8GetPinValue+0xd2>
    1c94:	ca 01       	movw	r24, r20
    1c96:	81 70       	andi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_u8GetPinValue+0xe6>
	default: L_u8Result = DIO_ERROR;
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_u8Result;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 L_u8Port, u8 L_u8Pin, u8 L_u8Direction)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	28 97       	sbiw	r28, 0x08	; 8
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	6a 83       	std	Y+2, r22	; 0x02
    1cca:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Direction == OUTPUT)
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <DIO_u8SetPinDirection+0x22>
    1cd2:	73 c0       	rjmp	.+230    	; 0x1dba <DIO_u8SetPinDirection+0x108>
		{
			switch(L_u8Port)
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	38 87       	std	Y+8, r19	; 0x08
    1cdc:	2f 83       	std	Y+7, r18	; 0x07
    1cde:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce0:	98 85       	ldd	r25, Y+8	; 0x08
    1ce2:	82 30       	cpi	r24, 0x02	; 2
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	51 f1       	breq	.+84     	; 0x1d3c <DIO_u8SetPinDirection+0x8a>
    1ce8:	2f 81       	ldd	r18, Y+7	; 0x07
    1cea:	38 85       	ldd	r19, Y+8	; 0x08
    1cec:	23 30       	cpi	r18, 0x03	; 3
    1cee:	31 05       	cpc	r19, r1
    1cf0:	34 f4       	brge	.+12     	; 0x1cfe <DIO_u8SetPinDirection+0x4c>
    1cf2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf4:	98 85       	ldd	r25, Y+8	; 0x08
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	61 f0       	breq	.+24     	; 0x1d14 <DIO_u8SetPinDirection+0x62>
    1cfc:	5b c0       	rjmp	.+182    	; 0x1db4 <DIO_u8SetPinDirection+0x102>
    1cfe:	2f 81       	ldd	r18, Y+7	; 0x07
    1d00:	38 85       	ldd	r19, Y+8	; 0x08
    1d02:	23 30       	cpi	r18, 0x03	; 3
    1d04:	31 05       	cpc	r19, r1
    1d06:	71 f1       	breq	.+92     	; 0x1d64 <DIO_u8SetPinDirection+0xb2>
    1d08:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0a:	98 85       	ldd	r25, Y+8	; 0x08
    1d0c:	84 30       	cpi	r24, 0x04	; 4
    1d0e:	91 05       	cpc	r25, r1
    1d10:	e9 f1       	breq	.+122    	; 0x1d8c <DIO_u8SetPinDirection+0xda>
    1d12:	50 c0       	rjmp	.+160    	; 0x1db4 <DIO_u8SetPinDirection+0x102>
			{
			case PORTA: SET_BIT(DDRA_Register, L_u8Pin); break;
    1d14:	aa e3       	ldi	r26, 0x3A	; 58
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	ea e3       	ldi	r30, 0x3A	; 58
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	48 2f       	mov	r20, r24
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	02 2e       	mov	r0, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <DIO_u8SetPinDirection+0x80>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	0a 94       	dec	r0
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <DIO_u8SetPinDirection+0x7c>
    1d36:	84 2b       	or	r24, r20
    1d38:	8c 93       	st	X, r24
    1d3a:	be c0       	rjmp	.+380    	; 0x1eb8 <DIO_u8SetPinDirection+0x206>
			case PORTB: SET_BIT(DDRB_Register, L_u8Pin); break;
    1d3c:	a7 e3       	ldi	r26, 0x37	; 55
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e7 e3       	ldi	r30, 0x37	; 55
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <DIO_u8SetPinDirection+0xa8>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <DIO_u8SetPinDirection+0xa4>
    1d5e:	84 2b       	or	r24, r20
    1d60:	8c 93       	st	X, r24
    1d62:	aa c0       	rjmp	.+340    	; 0x1eb8 <DIO_u8SetPinDirection+0x206>
			case PORTC: SET_BIT(DDRC_Register, L_u8Pin); break;
    1d64:	a4 e3       	ldi	r26, 0x34	; 52
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e4 e3       	ldi	r30, 0x34	; 52
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <DIO_u8SetPinDirection+0xd0>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <DIO_u8SetPinDirection+0xcc>
    1d86:	84 2b       	or	r24, r20
    1d88:	8c 93       	st	X, r24
    1d8a:	96 c0       	rjmp	.+300    	; 0x1eb8 <DIO_u8SetPinDirection+0x206>
			case PORTD: SET_BIT(DDRD_Register, L_u8Pin); break;
    1d8c:	a1 e3       	ldi	r26, 0x31	; 49
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e1 e3       	ldi	r30, 0x31	; 49
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_u8SetPinDirection+0xf8>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <DIO_u8SetPinDirection+0xf4>
    1dae:	84 2b       	or	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	82 c0       	rjmp	.+260    	; 0x1eb8 <DIO_u8SetPinDirection+0x206>
			default: return DIO_ERROR; break;
    1db4:	9f ef       	ldi	r25, 0xFF	; 255
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	80 c0       	rjmp	.+256    	; 0x1eba <DIO_u8SetPinDirection+0x208>
			}
		}
		else if(L_u8Direction == INPUT)
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	88 23       	and	r24, r24
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <DIO_u8SetPinDirection+0x110>
    1dc0:	78 c0       	rjmp	.+240    	; 0x1eb2 <DIO_u8SetPinDirection+0x200>
		{
			switch(L_u8Port)
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	3d 83       	std	Y+5, r19	; 0x05
    1dca:	2c 83       	std	Y+4, r18	; 0x04
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	61 f1       	breq	.+88     	; 0x1e2e <DIO_u8SetPinDirection+0x17c>
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	23 30       	cpi	r18, 0x03	; 3
    1ddc:	31 05       	cpc	r19, r1
    1dde:	34 f4       	brge	.+12     	; 0x1dec <DIO_u8SetPinDirection+0x13a>
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	9d 81       	ldd	r25, Y+5	; 0x05
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	91 05       	cpc	r25, r1
    1de8:	69 f0       	breq	.+26     	; 0x1e04 <DIO_u8SetPinDirection+0x152>
    1dea:	60 c0       	rjmp	.+192    	; 0x1eac <DIO_u8SetPinDirection+0x1fa>
    1dec:	2c 81       	ldd	r18, Y+4	; 0x04
    1dee:	3d 81       	ldd	r19, Y+5	; 0x05
    1df0:	23 30       	cpi	r18, 0x03	; 3
    1df2:	31 05       	cpc	r19, r1
    1df4:	89 f1       	breq	.+98     	; 0x1e58 <DIO_u8SetPinDirection+0x1a6>
    1df6:	8c 81       	ldd	r24, Y+4	; 0x04
    1df8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <DIO_u8SetPinDirection+0x150>
    1e00:	40 c0       	rjmp	.+128    	; 0x1e82 <DIO_u8SetPinDirection+0x1d0>
    1e02:	54 c0       	rjmp	.+168    	; 0x1eac <DIO_u8SetPinDirection+0x1fa>
			{
			case PORTA: CLEAR_BIT(DDRA_Register, L_u8Pin); break;
    1e04:	aa e3       	ldi	r26, 0x3A	; 58
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	ea e3       	ldi	r30, 0x3A	; 58
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_u8SetPinDirection+0x170>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_u8SetPinDirection+0x16c>
    1e26:	80 95       	com	r24
    1e28:	84 23       	and	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	45 c0       	rjmp	.+138    	; 0x1eb8 <DIO_u8SetPinDirection+0x206>
			case PORTB: CLEAR_BIT(DDRB_Register, L_u8Pin); break;
    1e2e:	a7 e3       	ldi	r26, 0x37	; 55
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e7 e3       	ldi	r30, 0x37	; 55
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <DIO_u8SetPinDirection+0x19a>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <DIO_u8SetPinDirection+0x196>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	30 c0       	rjmp	.+96     	; 0x1eb8 <DIO_u8SetPinDirection+0x206>
			case PORTC: CLEAR_BIT(DDRC_Register, L_u8Pin); break;
    1e58:	a4 e3       	ldi	r26, 0x34	; 52
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e4 e3       	ldi	r30, 0x34	; 52
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_u8SetPinDirection+0x1c4>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_u8SetPinDirection+0x1c0>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	1b c0       	rjmp	.+54     	; 0x1eb8 <DIO_u8SetPinDirection+0x206>
			case PORTD: CLEAR_BIT(DDRD_Register, L_u8Pin); break;
    1e82:	a1 e3       	ldi	r26, 0x31	; 49
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e1 e3       	ldi	r30, 0x31	; 49
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <DIO_u8SetPinDirection+0x1ee>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <DIO_u8SetPinDirection+0x1ea>
    1ea4:	80 95       	com	r24
    1ea6:	84 23       	and	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <DIO_u8SetPinDirection+0x206>
			default: return DIO_ERROR; break;
    1eac:	9f ef       	ldi	r25, 0xFF	; 255
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	04 c0       	rjmp	.+8      	; 0x1eba <DIO_u8SetPinDirection+0x208>
			}
		}
		else
		{
			return DIO_ERROR;
    1eb2:	2f ef       	ldi	r18, 0xFF	; 255
    1eb4:	2e 83       	std	Y+6, r18	; 0x06
    1eb6:	01 c0       	rjmp	.+2      	; 0x1eba <DIO_u8SetPinDirection+0x208>
		}
		return DIO_OK;
    1eb8:	1e 82       	std	Y+6, r1	; 0x06
    1eba:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1ebc:	28 96       	adiw	r28, 0x08	; 8
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 L_u8Port, u8 L_u8Value)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <DIO_u8SetPortValue+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <DIO_u8SetPortValue+0x8>
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	3d 83       	std	Y+5, r19	; 0x05
    1ee8:	2c 83       	std	Y+4, r18	; 0x04
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	82 30       	cpi	r24, 0x02	; 2
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	d9 f0       	breq	.+54     	; 0x1f2a <DIO_u8SetPortValue+0x5c>
    1ef4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef8:	23 30       	cpi	r18, 0x03	; 3
    1efa:	31 05       	cpc	r19, r1
    1efc:	34 f4       	brge	.+12     	; 0x1f0a <DIO_u8SetPortValue+0x3c>
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	9d 81       	ldd	r25, Y+5	; 0x05
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	61 f0       	breq	.+24     	; 0x1f20 <DIO_u8SetPortValue+0x52>
    1f08:	1f c0       	rjmp	.+62     	; 0x1f48 <DIO_u8SetPortValue+0x7a>
    1f0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0e:	23 30       	cpi	r18, 0x03	; 3
    1f10:	31 05       	cpc	r19, r1
    1f12:	81 f0       	breq	.+32     	; 0x1f34 <DIO_u8SetPortValue+0x66>
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	9d 81       	ldd	r25, Y+5	; 0x05
    1f18:	84 30       	cpi	r24, 0x04	; 4
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	81 f0       	breq	.+32     	; 0x1f3e <DIO_u8SetPortValue+0x70>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <DIO_u8SetPortValue+0x7a>
	{
		case PORTA: PORTA_Register = L_u8Value; break;
    1f20:	eb e3       	ldi	r30, 0x3B	; 59
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	80 83       	st	Z, r24
    1f28:	12 c0       	rjmp	.+36     	; 0x1f4e <DIO_u8SetPortValue+0x80>
		case PORTB: PORTB_Register = L_u8Value; break;
    1f2a:	e8 e3       	ldi	r30, 0x38	; 56
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	80 83       	st	Z, r24
    1f32:	0d c0       	rjmp	.+26     	; 0x1f4e <DIO_u8SetPortValue+0x80>
		case PORTC: PORTC_Register = L_u8Value; break;
    1f34:	e5 e3       	ldi	r30, 0x35	; 53
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	80 83       	st	Z, r24
    1f3c:	08 c0       	rjmp	.+16     	; 0x1f4e <DIO_u8SetPortValue+0x80>
		case PORTD: PORTD_Register = L_u8Value; break;
    1f3e:	e2 e3       	ldi	r30, 0x32	; 50
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	80 83       	st	Z, r24
    1f46:	03 c0       	rjmp	.+6      	; 0x1f4e <DIO_u8SetPortValue+0x80>
		default: return DIO_ERROR; break;
    1f48:	9f ef       	ldi	r25, 0xFF	; 255
    1f4a:	9b 83       	std	Y+3, r25	; 0x03
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <DIO_u8SetPortValue+0x82>
	}
	return DIO_OK;
    1f4e:	1b 82       	std	Y+3, r1	; 0x03
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 L_u8Port, u8 L_u8Direction)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <DIO_u8SetPortDirection+0x6>
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <DIO_u8SetPortDirection+0x8>
    1f6a:	0f 92       	push	r0
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3d 83       	std	Y+5, r19	; 0x05
    1f7c:	2c 83       	std	Y+4, r18	; 0x04
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	9d 81       	ldd	r25, Y+5	; 0x05
    1f82:	82 30       	cpi	r24, 0x02	; 2
    1f84:	91 05       	cpc	r25, r1
    1f86:	d9 f0       	breq	.+54     	; 0x1fbe <DIO_u8SetPortDirection+0x5c>
    1f88:	2c 81       	ldd	r18, Y+4	; 0x04
    1f8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8c:	23 30       	cpi	r18, 0x03	; 3
    1f8e:	31 05       	cpc	r19, r1
    1f90:	34 f4       	brge	.+12     	; 0x1f9e <DIO_u8SetPortDirection+0x3c>
    1f92:	8c 81       	ldd	r24, Y+4	; 0x04
    1f94:	9d 81       	ldd	r25, Y+5	; 0x05
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	91 05       	cpc	r25, r1
    1f9a:	61 f0       	breq	.+24     	; 0x1fb4 <DIO_u8SetPortDirection+0x52>
    1f9c:	1f c0       	rjmp	.+62     	; 0x1fdc <DIO_u8SetPortDirection+0x7a>
    1f9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa2:	23 30       	cpi	r18, 0x03	; 3
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	81 f0       	breq	.+32     	; 0x1fc8 <DIO_u8SetPortDirection+0x66>
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	9d 81       	ldd	r25, Y+5	; 0x05
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	91 05       	cpc	r25, r1
    1fb0:	81 f0       	breq	.+32     	; 0x1fd2 <DIO_u8SetPortDirection+0x70>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <DIO_u8SetPortDirection+0x7a>
	{
		case PORTA: DDRA_Register = L_u8Direction; break;
    1fb4:	ea e3       	ldi	r30, 0x3A	; 58
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	80 83       	st	Z, r24
    1fbc:	12 c0       	rjmp	.+36     	; 0x1fe2 <DIO_u8SetPortDirection+0x80>
		case PORTB: DDRB_Register = L_u8Direction; break;
    1fbe:	e7 e3       	ldi	r30, 0x37	; 55
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	80 83       	st	Z, r24
    1fc6:	0d c0       	rjmp	.+26     	; 0x1fe2 <DIO_u8SetPortDirection+0x80>
		case PORTC: DDRC_Register = L_u8Direction; break;
    1fc8:	e4 e3       	ldi	r30, 0x34	; 52
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	80 83       	st	Z, r24
    1fd0:	08 c0       	rjmp	.+16     	; 0x1fe2 <DIO_u8SetPortDirection+0x80>
		case PORTD: DDRD_Register = L_u8Direction; break;
    1fd2:	e1 e3       	ldi	r30, 0x31	; 49
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	80 83       	st	Z, r24
    1fda:	03 c0       	rjmp	.+6      	; 0x1fe2 <DIO_u8SetPortDirection+0x80>
		default: return DIO_ERROR; break;
    1fdc:	9f ef       	ldi	r25, 0xFF	; 255
    1fde:	9b 83       	std	Y+3, r25	; 0x03
    1fe0:	01 c0       	rjmp	.+2      	; 0x1fe4 <DIO_u8SetPortDirection+0x82>
	}
	return DIO_OK;
    1fe2:	1b 82       	std	Y+3, r1	; 0x03
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <ADC_Init>:
#include "ADC_interface.h"



void ADC_Init(void)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <ADC_Init+0x6>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	u8 ADMUX_Temp =0;
    2000:	1a 82       	std	Y+2, r1	; 0x02
	u8 ADCSRA_Temp = 0;
    2002:	19 82       	std	Y+1, r1	; 0x01

	/* Set Adjust Value */
	ADMUX_Temp |= (ADC_ADJUST << ADLAR);

	/* Set Reference Value */
	ADMUX_Temp |= (ADC_REF << REFS0);
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	80 64       	ori	r24, 0x40	; 64
    2008:	8a 83       	std	Y+2, r24	; 0x02

	/* Write to Register */
	ADMUX_Register = ADMUX_Temp;
    200a:	e7 e2       	ldi	r30, 0x27	; 39
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	80 83       	st	Z, r24

	/* Set Pre-scaler value */
	ADCSRA_Temp |= (ADC_PSC << ADPS0);
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	83 60       	ori	r24, 0x03	; 3
    2016:	89 83       	std	Y+1, r24	; 0x01

	/* Enable Register */
	SET_BIT(ADCSRA_Temp, ADEN);
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	80 68       	ori	r24, 0x80	; 128
    201c:	89 83       	std	Y+1, r24	; 0x01

	/* Write to Register */
	ADCSRA_Register = ADCSRA_Temp;
    201e:	e6 e2       	ldi	r30, 0x26	; 38
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	80 83       	st	Z, r24
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <ADC_StartConversion>:


u16 ADC_StartConversion(u8 L_u8Channel)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	0f 92       	push	r0
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
	/* Clear MUX bits */
	ADMUX_Register &= ~ADMUX_MUX_MASK;
    203c:	a7 e2       	ldi	r26, 0x27	; 39
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e7 e2       	ldi	r30, 0x27	; 39
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	80 7e       	andi	r24, 0xE0	; 224
    2048:	8c 93       	st	X, r24

	/* Select Channel */
	ADMUX_Register |= (L_u8Channel << MUX0);
    204a:	a7 e2       	ldi	r26, 0x27	; 39
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e7 e2       	ldi	r30, 0x27	; 39
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	90 81       	ld	r25, Z
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	89 2b       	or	r24, r25
    2058:	8c 93       	st	X, r24

	/* Start Conversion */
	SET_BIT(ADCSRA_Register, ADSC);
    205a:	a6 e2       	ldi	r26, 0x26	; 38
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e6 e2       	ldi	r30, 0x26	; 38
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 64       	ori	r24, 0x40	; 64
    2066:	8c 93       	st	X, r24


	/* Wait for ADC to finish conversion */
	while(GET_BIT(ADCSRA_Register, ADIF) == 0)
    2068:	e6 e2       	ldi	r30, 0x26	; 38
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	82 95       	swap	r24
    2070:	8f 70       	andi	r24, 0x0F	; 15
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	81 70       	andi	r24, 0x01	; 1
    2078:	90 70       	andi	r25, 0x00	; 0
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	a9 f3       	breq	.-22     	; 0x2068 <ADC_StartConversion+0x38>
	{
		/* Wait for ADC to finish */
	}

	/* Clear ADIF Flag */
	SET_BIT(ADCSRA_Register, ADIF);
    207e:	a6 e2       	ldi	r26, 0x26	; 38
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e6 e2       	ldi	r30, 0x26	; 38
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	80 61       	ori	r24, 0x10	; 16
    208a:	8c 93       	st	X, r24


	return ADCDATA_Register;
    208c:	e4 e2       	ldi	r30, 0x24	; 36
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
}
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <Stepper_Init>:
#include "Stepper_interface.h"

static u8 current_pattern = 0;

void Stepper_Init(void)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <Stepper_Init+0x6>
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i<NUM_OF_COILS; i++)
    20a6:	1a 82       	std	Y+2, r1	; 0x02
    20a8:	19 82       	std	Y+1, r1	; 0x01
    20aa:	1a c0       	rjmp	.+52     	; 0x20e0 <Stepper_Init+0x44>
	{
		DIO_u8SetPinDirection(coils[i].port, coils[i].pin, OUTPUT);
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	fc 01       	movw	r30, r24
    20b6:	e8 59       	subi	r30, 0x98	; 152
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	20 81       	ld	r18, Z
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	fc 01       	movw	r30, r24
    20c6:	e7 59       	subi	r30, 0x97	; 151
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	90 81       	ld	r25, Z
    20cc:	82 2f       	mov	r24, r18
    20ce:	69 2f       	mov	r22, r25
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>

static u8 current_pattern = 0;

void Stepper_Init(void)
{
	for(int i=0; i<NUM_OF_COILS; i++)
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	9a 81       	ldd	r25, Y+2	; 0x02
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	84 30       	cpi	r24, 0x04	; 4
    20e6:	91 05       	cpc	r25, r1
    20e8:	08 f3       	brcs	.-62     	; 0x20ac <Stepper_Init+0x10>
	{
		DIO_u8SetPinDirection(coils[i].port, coils[i].pin, OUTPUT);
	}

}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <Stepper_StepCW>:

void Stepper_StepCW(void)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	0f 92       	push	r0
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
	current_pattern++;
    20fe:	80 91 b4 00 	lds	r24, 0x00B4
    2102:	8f 5f       	subi	r24, 0xFF	; 255
    2104:	80 93 b4 00 	sts	0x00B4, r24
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    2108:	19 82       	std	Y+1, r1	; 0x01
    210a:	30 c0       	rjmp	.+96     	; 0x216c <Stepper_StepCW+0x78>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	88 2f       	mov	r24, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	fc 01       	movw	r30, r24
    2118:	e8 59       	subi	r30, 0x98	; 152
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	40 81       	ld	r20, Z
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	fc 01       	movw	r30, r24
    212a:	e7 59       	subi	r30, 0x97	; 151
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	50 81       	ld	r21, Z
    2130:	80 91 b4 00 	lds	r24, 0x00B4
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	fc 01       	movw	r30, r24
    213a:	e6 57       	subi	r30, 0x76	; 118
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	b9 01       	movw	r22, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <Stepper_StepCW+0x5e>
    214e:	75 95       	asr	r23
    2150:	67 95       	ror	r22
    2152:	8a 95       	dec	r24
    2154:	e2 f7       	brpl	.-8      	; 0x214e <Stepper_StepCW+0x5a>
    2156:	cb 01       	movw	r24, r22
    2158:	98 2f       	mov	r25, r24
    215a:	91 70       	andi	r25, 0x01	; 1
    215c:	84 2f       	mov	r24, r20
    215e:	65 2f       	mov	r22, r21
    2160:	49 2f       	mov	r20, r25
    2162:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
}

void Stepper_StepCW(void)
{
	current_pattern++;
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	8f 5f       	subi	r24, 0xFF	; 255
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	84 30       	cpi	r24, 0x04	; 4
    2170:	68 f2       	brcs	.-102    	; 0x210c <Stepper_StepCW+0x18>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
	}
	if(current_pattern > 7) current_pattern = 0;
    2172:	80 91 b4 00 	lds	r24, 0x00B4
    2176:	88 30       	cpi	r24, 0x08	; 8
    2178:	10 f0       	brcs	.+4      	; 0x217e <Stepper_StepCW+0x8a>
    217a:	10 92 b4 00 	sts	0x00B4, r1
}
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <Stepper_StepCCW>:

void Stepper_StepCCW(void)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	current_pattern--;
    2190:	80 91 b4 00 	lds	r24, 0x00B4
    2194:	81 50       	subi	r24, 0x01	; 1
    2196:	80 93 b4 00 	sts	0x00B4, r24
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    219a:	19 82       	std	Y+1, r1	; 0x01
    219c:	30 c0       	rjmp	.+96     	; 0x21fe <Stepper_StepCCW+0x78>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	fc 01       	movw	r30, r24
    21aa:	e8 59       	subi	r30, 0x98	; 152
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	40 81       	ld	r20, Z
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	fc 01       	movw	r30, r24
    21bc:	e7 59       	subi	r30, 0x97	; 151
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	50 81       	ld	r21, Z
    21c2:	80 91 b4 00 	lds	r24, 0x00B4
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	fc 01       	movw	r30, r24
    21cc:	e6 57       	subi	r30, 0x76	; 118
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	b9 01       	movw	r22, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <Stepper_StepCCW+0x5e>
    21e0:	75 95       	asr	r23
    21e2:	67 95       	ror	r22
    21e4:	8a 95       	dec	r24
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <Stepper_StepCCW+0x5a>
    21e8:	cb 01       	movw	r24, r22
    21ea:	98 2f       	mov	r25, r24
    21ec:	91 70       	andi	r25, 0x01	; 1
    21ee:	84 2f       	mov	r24, r20
    21f0:	65 2f       	mov	r22, r21
    21f2:	49 2f       	mov	r20, r25
    21f4:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
}

void Stepper_StepCCW(void)
{
	current_pattern--;
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	68 f2       	brcs	.-102    	; 0x219e <Stepper_StepCCW+0x18>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
	}
	if(current_pattern > 7) current_pattern = 7;
    2204:	80 91 b4 00 	lds	r24, 0x00B4
    2208:	88 30       	cpi	r24, 0x08	; 8
    220a:	18 f0       	brcs	.+6      	; 0x2212 <Stepper_StepCCW+0x8c>
    220c:	87 e0       	ldi	r24, 0x07	; 7
    220e:	80 93 b4 00 	sts	0x00B4, r24
}
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <SevenSegment_voidInit>:
#include "SS_config.h"
#include "SS_interface.h"


void SevenSegment_voidInit()
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(SEVEN_SEGMENT1_PORT, 0xFF);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	6f ef       	ldi	r22, 0xFF	; 255
    2226:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, 0x00);
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>
}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <SevenSegment_voidSetValue>:

void SevenSegment_voidSetValue(u8 L_u8UnitNo, u8 L_u8Value)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <SevenSegment_voidSetValue+0x6>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8UnitNo)
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	59 f4       	brne	.+22     	; 0x2266 <SevenSegment_voidSetValue+0x2e>
	{
	case SEVEN_SEGMENT_UNIT1: DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, digits[L_u8Value]);break;
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	fc 01       	movw	r30, r24
    2258:	ee 56       	subi	r30, 0x6E	; 110
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	90 81       	ld	r25, Z
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	69 2f       	mov	r22, r25
    2262:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>
	}
}
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <SevenSegment_voidClear>:

void SevenSegment_voidClear(u8 L_u8UnitNo)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	0f 92       	push	r0
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8UnitNo)
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	21 f4       	brne	.+8      	; 0x228e <SevenSegment_voidClear+0x1e>
	{
	case SEVEN_SEGMENT_UNIT1: DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, 0x00);break;
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>
	}
}
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <Servo_Init>:
#include "Servo_private.h"
#include "Servo_config.h"
#include "Servo_interface.h"

void Servo_Init(void)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTD, PIN5, OUTPUT);
    229e:	84 e0       	ldi	r24, 0x04	; 4
    22a0:	65 e0       	ldi	r22, 0x05	; 5
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTD, PIN4, OUTPUT);
    22a8:	84 e0       	ldi	r24, 0x04	; 4
    22aa:	64 e0       	ldi	r22, 0x04	; 4
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	TIM1_voidFPWMInit(SERVO_PERIOD_US);
    22b2:	80 e2       	ldi	r24, 0x20	; 32
    22b4:	9e e4       	ldi	r25, 0x4E	; 78
    22b6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <TIM1_voidFPWMInit>
}
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <Servo_SetAngle>:

void Servo_SetAngle(u8 servo, s8 angle)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	28 97       	sbiw	r28, 0x08	; 8
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	6e 83       	std	Y+6, r22	; 0x06
	u32 tmp = (angle + (s8) 90);
    22d8:	8e 81       	ldd	r24, Y+6	; 0x06
    22da:	99 27       	eor	r25, r25
    22dc:	87 fd       	sbrc	r24, 7
    22de:	90 95       	com	r25
    22e0:	86 5a       	subi	r24, 0xA6	; 166
    22e2:	9f 4f       	sbci	r25, 0xFF	; 255
    22e4:	aa 27       	eor	r26, r26
    22e6:	97 fd       	sbrc	r25, 7
    22e8:	a0 95       	com	r26
    22ea:	ba 2f       	mov	r27, r26
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	9a 83       	std	Y+2, r25	; 0x02
    22f0:	ab 83       	std	Y+3, r26	; 0x03
    22f2:	bc 83       	std	Y+4, r27	; 0x04
	tmp = (tmp * 1000)/180;
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	ab 81       	ldd	r26, Y+3	; 0x03
    22fa:	bc 81       	ldd	r27, Y+4	; 0x04
    22fc:	28 ee       	ldi	r18, 0xE8	; 232
    22fe:	33 e0       	ldi	r19, 0x03	; 3
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <__mulsi3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	24 eb       	ldi	r18, 0xB4	; 180
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 05 1c 	call	0x380a	; 0x380a <__udivmodsi4>
    2320:	da 01       	movw	r26, r20
    2322:	c9 01       	movw	r24, r18
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	ab 83       	std	Y+3, r26	; 0x03
    232a:	bc 83       	std	Y+4, r27	; 0x04

	switch(servo)
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	38 87       	std	Y+8, r19	; 0x08
    2334:	2f 83       	std	Y+7, r18	; 0x07
    2336:	8f 81       	ldd	r24, Y+7	; 0x07
    2338:	98 85       	ldd	r25, Y+8	; 0x08
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	31 f0       	breq	.+12     	; 0x234a <Servo_SetAngle+0x8a>
    233e:	2f 81       	ldd	r18, Y+7	; 0x07
    2340:	38 85       	ldd	r19, Y+8	; 0x08
    2342:	21 30       	cpi	r18, 0x01	; 1
    2344:	31 05       	cpc	r19, r1
    2346:	59 f0       	breq	.+22     	; 0x235e <Servo_SetAngle+0x9e>
    2348:	13 c0       	rjmp	.+38     	; 0x2370 <Servo_SetAngle+0xb0>
	{
	case SERVO1: TIM1_setDutyCycle(SERVO1_CH, 1000 + ((u16) tmp)); break;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	9c 01       	movw	r18, r24
    2350:	28 51       	subi	r18, 0x18	; 24
    2352:	3c 4f       	sbci	r19, 0xFC	; 252
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	b9 01       	movw	r22, r18
    2358:	0e 94 bb 07 	call	0xf76	; 0xf76 <TIM1_setDutyCycle>
    235c:	09 c0       	rjmp	.+18     	; 0x2370 <Servo_SetAngle+0xb0>
	case SERVO2: TIM1_setDutyCycle(SERVO2_CH, 1000 + ((u16) tmp)); break;
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	9c 01       	movw	r18, r24
    2364:	28 51       	subi	r18, 0x18	; 24
    2366:	3c 4f       	sbci	r19, 0xFC	; 252
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	b9 01       	movw	r22, r18
    236c:	0e 94 bb 07 	call	0xf76	; 0xf76 <TIM1_setDutyCycle>
	}

}
    2370:	28 96       	adiw	r28, 0x08	; 8
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <Motor_Init>:
#include "Motor_config.h"
#include "Motor_interface.h"
#include <util/delay.h>

void Motor_Init(void)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(MOTOR_CCW_PORT, MOTOR_CCW_PIN, OUTPUT);
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_CW_PORT, MOTOR_CW_PIN, OUTPUT);
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	Motor_Stop();
    239e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <Motor_Stop>
}
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <Motor_SetDirection>:
void Motor_SetDirection(u8 L_u8Direction)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	6f 97       	sbiw	r28, 0x1f	; 31
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	8d 8f       	std	Y+29, r24	; 0x1d
	switch(L_u8Direction)
    23be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	3f 8f       	std	Y+31, r19	; 0x1f
    23c6:	2e 8f       	std	Y+30, r18	; 0x1e
    23c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	39 f0       	breq	.+14     	; 0x23de <Motor_SetDirection+0x36>
    23d0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    23d2:	3f 8d       	ldd	r19, Y+31	; 0x1f
    23d4:	21 30       	cpi	r18, 0x01	; 1
    23d6:	31 05       	cpc	r19, r1
    23d8:	09 f4       	brne	.+2      	; 0x23dc <Motor_SetDirection+0x34>
    23da:	7e c0       	rjmp	.+252    	; 0x24d8 <Motor_SetDirection+0x130>
    23dc:	f9 c0       	rjmp	.+498    	; 0x25d0 <Motor_SetDirection+0x228>
	{
	case MOTOR_CW:
		DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, LOW);
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	a0 e8       	ldi	r26, 0x80	; 128
    23ee:	bf e3       	ldi	r27, 0x3F	; 63
    23f0:	89 8f       	std	Y+25, r24	; 0x19
    23f2:	9a 8f       	std	Y+26, r25	; 0x1a
    23f4:	ab 8f       	std	Y+27, r26	; 0x1b
    23f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f8:	69 8d       	ldd	r22, Y+25	; 0x19
    23fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a e7       	ldi	r20, 0x7A	; 122
    2406:	53 e4       	ldi	r21, 0x43	; 67
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8d 8b       	std	Y+21, r24	; 0x15
    2412:	9e 8b       	std	Y+22, r25	; 0x16
    2414:	af 8b       	std	Y+23, r26	; 0x17
    2416:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2418:	6d 89       	ldd	r22, Y+21	; 0x15
    241a:	7e 89       	ldd	r23, Y+22	; 0x16
    241c:	8f 89       	ldd	r24, Y+23	; 0x17
    241e:	98 8d       	ldd	r25, Y+24	; 0x18
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	2c f4       	brge	.+10     	; 0x243a <Motor_SetDirection+0x92>
		__ticks = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c 8b       	std	Y+20, r25	; 0x14
    2436:	8b 8b       	std	Y+19, r24	; 0x13
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <Motor_SetDirection+0x110>
	else if (__tmp > 65535)
    243a:	6d 89       	ldd	r22, Y+21	; 0x15
    243c:	7e 89       	ldd	r23, Y+22	; 0x16
    243e:	8f 89       	ldd	r24, Y+23	; 0x17
    2440:	98 8d       	ldd	r25, Y+24	; 0x18
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	3f ef       	ldi	r19, 0xFF	; 255
    2446:	4f e7       	ldi	r20, 0x7F	; 127
    2448:	57 e4       	ldi	r21, 0x47	; 71
    244a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    244e:	18 16       	cp	r1, r24
    2450:	4c f5       	brge	.+82     	; 0x24a4 <Motor_SetDirection+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2452:	69 8d       	ldd	r22, Y+25	; 0x19
    2454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e2       	ldi	r20, 0x20	; 32
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9c 8b       	std	Y+20, r25	; 0x14
    2478:	8b 8b       	std	Y+19, r24	; 0x13
    247a:	0f c0       	rjmp	.+30     	; 0x249a <Motor_SetDirection+0xf2>
    247c:	89 e1       	ldi	r24, 0x19	; 25
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9a 8b       	std	Y+18, r25	; 0x12
    2482:	89 8b       	std	Y+17, r24	; 0x11
    2484:	89 89       	ldd	r24, Y+17	; 0x11
    2486:	9a 89       	ldd	r25, Y+18	; 0x12
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <Motor_SetDirection+0xe0>
    248c:	9a 8b       	std	Y+18, r25	; 0x12
    248e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	69 f7       	brne	.-38     	; 0x247c <Motor_SetDirection+0xd4>
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <Motor_SetDirection+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	6d 89       	ldd	r22, Y+21	; 0x15
    24a6:	7e 89       	ldd	r23, Y+22	; 0x16
    24a8:	8f 89       	ldd	r24, Y+23	; 0x17
    24aa:	98 8d       	ldd	r25, Y+24	; 0x18
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9c 8b       	std	Y+20, r25	; 0x14
    24b6:	8b 8b       	std	Y+19, r24	; 0x13
    24b8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ba:	9c 89       	ldd	r25, Y+20	; 0x14
    24bc:	98 8b       	std	Y+16, r25	; 0x10
    24be:	8f 87       	std	Y+15, r24	; 0x0f
    24c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c2:	98 89       	ldd	r25, Y+16	; 0x10
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <Motor_SetDirection+0x11c>
    24c8:	98 8b       	std	Y+16, r25	; 0x10
    24ca:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, HIGH);
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
    24d6:	7c c0       	rjmp	.+248    	; 0x25d0 <Motor_SetDirection+0x228>
		break;
	case MOTOR_CCW:
		DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, LOW);
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a0 e8       	ldi	r26, 0x80	; 128
    24e8:	bf e3       	ldi	r27, 0x3F	; 63
    24ea:	8b 87       	std	Y+11, r24	; 0x0b
    24ec:	9c 87       	std	Y+12, r25	; 0x0c
    24ee:	ad 87       	std	Y+13, r26	; 0x0d
    24f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4a e7       	ldi	r20, 0x7A	; 122
    2500:	53 e4       	ldi	r21, 0x43	; 67
    2502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	8f 83       	std	Y+7, r24	; 0x07
    250c:	98 87       	std	Y+8, r25	; 0x08
    250e:	a9 87       	std	Y+9, r26	; 0x09
    2510:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2512:	6f 81       	ldd	r22, Y+7	; 0x07
    2514:	78 85       	ldd	r23, Y+8	; 0x08
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e8       	ldi	r20, 0x80	; 128
    2520:	5f e3       	ldi	r21, 0x3F	; 63
    2522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2526:	88 23       	and	r24, r24
    2528:	2c f4       	brge	.+10     	; 0x2534 <Motor_SetDirection+0x18c>
		__ticks = 1;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
    2532:	3f c0       	rjmp	.+126    	; 0x25b2 <Motor_SetDirection+0x20a>
	else if (__tmp > 65535)
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	3f ef       	ldi	r19, 0xFF	; 255
    2540:	4f e7       	ldi	r20, 0x7F	; 127
    2542:	57 e4       	ldi	r21, 0x47	; 71
    2544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2548:	18 16       	cp	r1, r24
    254a:	4c f5       	brge	.+82     	; 0x259e <Motor_SetDirection+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254c:	6b 85       	ldd	r22, Y+11	; 0x0b
    254e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2550:	8d 85       	ldd	r24, Y+13	; 0x0d
    2552:	9e 85       	ldd	r25, Y+14	; 0x0e
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <Motor_SetDirection+0x1ec>
    2576:	89 e1       	ldi	r24, 0x19	; 25
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9c 83       	std	Y+4, r25	; 0x04
    257c:	8b 83       	std	Y+3, r24	; 0x03
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	9c 81       	ldd	r25, Y+4	; 0x04
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <Motor_SetDirection+0x1da>
    2586:	9c 83       	std	Y+4, r25	; 0x04
    2588:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258a:	8d 81       	ldd	r24, Y+5	; 0x05
    258c:	9e 81       	ldd	r25, Y+6	; 0x06
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	69 f7       	brne	.-38     	; 0x2576 <Motor_SetDirection+0x1ce>
    259c:	14 c0       	rjmp	.+40     	; 0x25c6 <Motor_SetDirection+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259e:	6f 81       	ldd	r22, Y+7	; 0x07
    25a0:	78 85       	ldd	r23, Y+8	; 0x08
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9e 83       	std	Y+6, r25	; 0x06
    25b0:	8d 83       	std	Y+5, r24	; 0x05
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	9e 81       	ldd	r25, Y+6	; 0x06
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <Motor_SetDirection+0x216>
    25c2:	9a 83       	std	Y+2, r25	; 0x02
    25c4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, HIGH);
    25c6:	83 e0       	ldi	r24, 0x03	; 3
    25c8:	61 e0       	ldi	r22, 0x01	; 1
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
		break;
	}
}
    25d0:	6f 96       	adiw	r28, 0x1f	; 31
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <Motor_Stop>:
void Motor_Stop(void)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, LOW);
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	61 e0       	ldi	r22, 0x01	; 1
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, LOW);
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
}
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <LED_voidInit>:
#include "LED_private.h"
#include "LED_config.h"
#include "LED_interface.h"

void LED_voidInit()
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	0f 92       	push	r0
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
	for(u8 i =0; i< NO_LEDS; i++)
    260e:	19 82       	std	Y+1, r1	; 0x01
    2610:	1a c0       	rjmp	.+52     	; 0x2646 <LED_voidInit+0x42>
	DIO_u8SetPinDirection(leds[i].port, leds[i].pin, OUTPUT);
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	88 2f       	mov	r24, r24
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	fc 01       	movw	r30, r24
    261e:	e0 59       	subi	r30, 0x90	; 144
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	20 81       	ld	r18, Z
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	fc 01       	movw	r30, r24
    2630:	ef 58       	subi	r30, 0x8F	; 143
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	90 81       	ld	r25, Z
    2636:	82 2f       	mov	r24, r18
    2638:	69 2f       	mov	r22, r25
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
#include "LED_config.h"
#include "LED_interface.h"

void LED_voidInit()
{
	for(u8 i =0; i< NO_LEDS; i++)
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	8f 5f       	subi	r24, 0xFF	; 255
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	85 30       	cpi	r24, 0x05	; 5
    264a:	18 f3       	brcs	.-58     	; 0x2612 <LED_voidInit+0xe>
	DIO_u8SetPinDirection(leds[i].port, leds[i].pin, OUTPUT);
}
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <LED_voidSetLEDHigh>:

void LED_voidSetLEDHigh(u8 L_u8led)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	0f 92       	push	r0
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	89 83       	std	Y+1, r24	; 0x01
	if(L_u8led < NO_LEDS)
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	85 30       	cpi	r24, 0x05	; 5
    2664:	b8 f4       	brcc	.+46     	; 0x2694 <LED_voidSetLEDHigh+0x40>
	{
		DIO_u8SetPinValue(leds[L_u8led].port, leds[L_u8led].pin, HIGH);
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	fc 01       	movw	r30, r24
    2672:	e0 59       	subi	r30, 0x90	; 144
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	20 81       	ld	r18, Z
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	88 2f       	mov	r24, r24
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	fc 01       	movw	r30, r24
    2684:	ef 58       	subi	r30, 0x8F	; 143
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	90 81       	ld	r25, Z
    268a:	82 2f       	mov	r24, r18
    268c:	69 2f       	mov	r22, r25
    268e:	41 e0       	ldi	r20, 0x01	; 1
    2690:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
	}
}
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <LED_voidSetLEDLow>:

void LED_voidSetLEDLow(u8 L_u8led)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	0f 92       	push	r0
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	89 83       	std	Y+1, r24	; 0x01
	if(L_u8led < NO_LEDS)
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	85 30       	cpi	r24, 0x05	; 5
    26ac:	b8 f4       	brcc	.+46     	; 0x26dc <LED_voidSetLEDLow+0x40>
	{
		DIO_u8SetPinValue(leds[L_u8led].port, leds[L_u8led].pin, LOW);
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	88 2f       	mov	r24, r24
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	fc 01       	movw	r30, r24
    26ba:	e0 59       	subi	r30, 0x90	; 144
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	20 81       	ld	r18, Z
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	fc 01       	movw	r30, r24
    26cc:	ef 58       	subi	r30, 0x8F	; 143
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	90 81       	ld	r25, Z
    26d2:	82 2f       	mov	r24, r18
    26d4:	69 2f       	mov	r22, r25
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
	}
}
    26dc:	0f 90       	pop	r0
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "LCD_interface.h"

void LCD_voidInit(void)
{
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	c6 54       	subi	r28, 0x46	; 70
    26f2:	d0 40       	sbci	r29, 0x00	; 0
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, OUTPUT);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	62 e0       	ldi	r22, 0x02	; 2
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, OUTPUT);
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	63 e0       	ldi	r22, 0x03	; 3
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT, LCD_EN_PIN, OUTPUT);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	64 e0       	ldi	r22, 0x04	; 4
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>

	//Set data pins direction
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN0, OUTPUT);
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN1, OUTPUT);
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN2, OUTPUT);
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	62 e0       	ldi	r22, 0x02	; 2
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN3, OUTPUT);
    273a:	82 e0       	ldi	r24, 0x02	; 2
    273c:	63 e0       	ldi	r22, 0x03	; 3
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN4, OUTPUT);
    2744:	82 e0       	ldi	r24, 0x02	; 2
    2746:	64 e0       	ldi	r22, 0x04	; 4
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN5, OUTPUT);
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	65 e0       	ldi	r22, 0x05	; 5
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN6, OUTPUT);
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	66 e0       	ldi	r22, 0x06	; 6
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT, PIN7, OUTPUT);
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	67 e0       	ldi	r22, 0x07	; 7
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
    276c:	fe 01       	movw	r30, r28
    276e:	ed 5b       	subi	r30, 0xBD	; 189
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a0 ef       	ldi	r26, 0xF0	; 240
    2778:	b1 e4       	ldi	r27, 0x41	; 65
    277a:	80 83       	st	Z, r24
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	a2 83       	std	Z+2, r26	; 0x02
    2780:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2782:	8e 01       	movw	r16, r28
    2784:	01 5c       	subi	r16, 0xC1	; 193
    2786:	1f 4f       	sbci	r17, 0xFF	; 255
    2788:	fe 01       	movw	r30, r28
    278a:	ed 5b       	subi	r30, 0xBD	; 189
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4a e7       	ldi	r20, 0x7A	; 122
    279c:	53 e4       	ldi	r21, 0x43	; 67
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	f8 01       	movw	r30, r16
    27a8:	80 83       	st	Z, r24
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	a2 83       	std	Z+2, r26	; 0x02
    27ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b0:	fe 01       	movw	r30, r28
    27b2:	ff 96       	adiw	r30, 0x3f	; 63
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e8       	ldi	r20, 0x80	; 128
    27c2:	5f e3       	ldi	r21, 0x3F	; 63
    27c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c8:	88 23       	and	r24, r24
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <LCD_voidInit+0xf2>
		__ticks = 1;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9e af       	std	Y+62, r25	; 0x3e
    27d2:	8d af       	std	Y+61, r24	; 0x3d
    27d4:	46 c0       	rjmp	.+140    	; 0x2862 <LCD_voidInit+0x17e>
	else if (__tmp > 65535)
    27d6:	fe 01       	movw	r30, r28
    27d8:	ff 96       	adiw	r30, 0x3f	; 63
    27da:	60 81       	ld	r22, Z
    27dc:	71 81       	ldd	r23, Z+1	; 0x01
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	93 81       	ldd	r25, Z+3	; 0x03
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	64 f5       	brge	.+88     	; 0x284a <LCD_voidInit+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	fe 01       	movw	r30, r28
    27f4:	ed 5b       	subi	r30, 0xBD	; 189
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9e af       	std	Y+62, r25	; 0x3e
    281e:	8d af       	std	Y+61, r24	; 0x3d
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <LCD_voidInit+0x15c>
    2822:	89 e1       	ldi	r24, 0x19	; 25
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9c af       	std	Y+60, r25	; 0x3c
    2828:	8b af       	std	Y+59, r24	; 0x3b
    282a:	8b ad       	ldd	r24, Y+59	; 0x3b
    282c:	9c ad       	ldd	r25, Y+60	; 0x3c
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_voidInit+0x14a>
    2832:	9c af       	std	Y+60, r25	; 0x3c
    2834:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	8d ad       	ldd	r24, Y+61	; 0x3d
    2838:	9e ad       	ldd	r25, Y+62	; 0x3e
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	9e af       	std	Y+62, r25	; 0x3e
    283e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	8d ad       	ldd	r24, Y+61	; 0x3d
    2842:	9e ad       	ldd	r25, Y+62	; 0x3e
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	69 f7       	brne	.-38     	; 0x2822 <LCD_voidInit+0x13e>
    2848:	16 c0       	rjmp	.+44     	; 0x2876 <LCD_voidInit+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	fe 01       	movw	r30, r28
    284c:	ff 96       	adiw	r30, 0x3f	; 63
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9e af       	std	Y+62, r25	; 0x3e
    2860:	8d af       	std	Y+61, r24	; 0x3d
    2862:	8d ad       	ldd	r24, Y+61	; 0x3d
    2864:	9e ad       	ldd	r25, Y+62	; 0x3e
    2866:	9a af       	std	Y+58, r25	; 0x3a
    2868:	89 af       	std	Y+57, r24	; 0x39
    286a:	89 ad       	ldd	r24, Y+57	; 0x39
    286c:	9a ad       	ldd	r25, Y+58	; 0x3a
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <LCD_voidInit+0x18a>
    2872:	9a af       	std	Y+58, r25	; 0x3a
    2874:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(30);

	LCD_voidSendCommand(0x33); /* Init. */
    2876:	83 e3       	ldi	r24, 0x33	; 51
    2878:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x32); /* Init. */
    287c:	82 e3       	ldi	r24, 0x32	; 50
    287e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_voidSendCommand>

	LCD_voidSendCommand(LCD_FUNCTION_8BIT_2LINE);
    2882:	88 e3       	ldi	r24, 0x38	; 56
    2884:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_voidSendCommand>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a0 e8       	ldi	r26, 0x80	; 128
    288e:	bf e3       	ldi	r27, 0x3F	; 63
    2890:	8d ab       	std	Y+53, r24	; 0x35
    2892:	9e ab       	std	Y+54, r25	; 0x36
    2894:	af ab       	std	Y+55, r26	; 0x37
    2896:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2898:	6d a9       	ldd	r22, Y+53	; 0x35
    289a:	7e a9       	ldd	r23, Y+54	; 0x36
    289c:	8f a9       	ldd	r24, Y+55	; 0x37
    289e:	98 ad       	ldd	r25, Y+56	; 0x38
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4a e7       	ldi	r20, 0x7A	; 122
    28a6:	53 e4       	ldi	r21, 0x43	; 67
    28a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	89 ab       	std	Y+49, r24	; 0x31
    28b2:	9a ab       	std	Y+50, r25	; 0x32
    28b4:	ab ab       	std	Y+51, r26	; 0x33
    28b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28b8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ba:	7a a9       	ldd	r23, Y+50	; 0x32
    28bc:	8b a9       	ldd	r24, Y+51	; 0x33
    28be:	9c a9       	ldd	r25, Y+52	; 0x34
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e8       	ldi	r20, 0x80	; 128
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28cc:	88 23       	and	r24, r24
    28ce:	2c f4       	brge	.+10     	; 0x28da <LCD_voidInit+0x1f6>
		__ticks = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	98 ab       	std	Y+48, r25	; 0x30
    28d6:	8f a7       	std	Y+47, r24	; 0x2f
    28d8:	3f c0       	rjmp	.+126    	; 0x2958 <LCD_voidInit+0x274>
	else if (__tmp > 65535)
    28da:	69 a9       	ldd	r22, Y+49	; 0x31
    28dc:	7a a9       	ldd	r23, Y+50	; 0x32
    28de:	8b a9       	ldd	r24, Y+51	; 0x33
    28e0:	9c a9       	ldd	r25, Y+52	; 0x34
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	3f ef       	ldi	r19, 0xFF	; 255
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	57 e4       	ldi	r21, 0x47	; 71
    28ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ee:	18 16       	cp	r1, r24
    28f0:	4c f5       	brge	.+82     	; 0x2944 <LCD_voidInit+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f2:	6d a9       	ldd	r22, Y+53	; 0x35
    28f4:	7e a9       	ldd	r23, Y+54	; 0x36
    28f6:	8f a9       	ldd	r24, Y+55	; 0x37
    28f8:	98 ad       	ldd	r25, Y+56	; 0x38
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	98 ab       	std	Y+48, r25	; 0x30
    2918:	8f a7       	std	Y+47, r24	; 0x2f
    291a:	0f c0       	rjmp	.+30     	; 0x293a <LCD_voidInit+0x256>
    291c:	89 e1       	ldi	r24, 0x19	; 25
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9e a7       	std	Y+46, r25	; 0x2e
    2922:	8d a7       	std	Y+45, r24	; 0x2d
    2924:	8d a5       	ldd	r24, Y+45	; 0x2d
    2926:	9e a5       	ldd	r25, Y+46	; 0x2e
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <LCD_voidInit+0x244>
    292c:	9e a7       	std	Y+46, r25	; 0x2e
    292e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	8f a5       	ldd	r24, Y+47	; 0x2f
    2932:	98 a9       	ldd	r25, Y+48	; 0x30
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	98 ab       	std	Y+48, r25	; 0x30
    2938:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	8f a5       	ldd	r24, Y+47	; 0x2f
    293c:	98 a9       	ldd	r25, Y+48	; 0x30
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	69 f7       	brne	.-38     	; 0x291c <LCD_voidInit+0x238>
    2942:	14 c0       	rjmp	.+40     	; 0x296c <LCD_voidInit+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2944:	69 a9       	ldd	r22, Y+49	; 0x31
    2946:	7a a9       	ldd	r23, Y+50	; 0x32
    2948:	8b a9       	ldd	r24, Y+51	; 0x33
    294a:	9c a9       	ldd	r25, Y+52	; 0x34
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	98 ab       	std	Y+48, r25	; 0x30
    2956:	8f a7       	std	Y+47, r24	; 0x2f
    2958:	8f a5       	ldd	r24, Y+47	; 0x2f
    295a:	98 a9       	ldd	r25, Y+48	; 0x30
    295c:	9c a7       	std	Y+44, r25	; 0x2c
    295e:	8b a7       	std	Y+43, r24	; 0x2b
    2960:	8b a5       	ldd	r24, Y+43	; 0x2b
    2962:	9c a5       	ldd	r25, Y+44	; 0x2c
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <LCD_voidInit+0x280>
    2968:	9c a7       	std	Y+44, r25	; 0x2c
    296a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DISPLAY_ON);
    296c:	8c e0       	ldi	r24, 0x0C	; 12
    296e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_voidSendCommand>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	a0 e8       	ldi	r26, 0x80	; 128
    2978:	bf e3       	ldi	r27, 0x3F	; 63
    297a:	8f a3       	std	Y+39, r24	; 0x27
    297c:	98 a7       	std	Y+40, r25	; 0x28
    297e:	a9 a7       	std	Y+41, r26	; 0x29
    2980:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2982:	6f a1       	ldd	r22, Y+39	; 0x27
    2984:	78 a5       	ldd	r23, Y+40	; 0x28
    2986:	89 a5       	ldd	r24, Y+41	; 0x29
    2988:	9a a5       	ldd	r25, Y+42	; 0x2a
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	4a e7       	ldi	r20, 0x7A	; 122
    2990:	53 e4       	ldi	r21, 0x43	; 67
    2992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	8b a3       	std	Y+35, r24	; 0x23
    299c:	9c a3       	std	Y+36, r25	; 0x24
    299e:	ad a3       	std	Y+37, r26	; 0x25
    29a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29a2:	6b a1       	ldd	r22, Y+35	; 0x23
    29a4:	7c a1       	ldd	r23, Y+36	; 0x24
    29a6:	8d a1       	ldd	r24, Y+37	; 0x25
    29a8:	9e a1       	ldd	r25, Y+38	; 0x26
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e8       	ldi	r20, 0x80	; 128
    29b0:	5f e3       	ldi	r21, 0x3F	; 63
    29b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b6:	88 23       	and	r24, r24
    29b8:	2c f4       	brge	.+10     	; 0x29c4 <LCD_voidInit+0x2e0>
		__ticks = 1;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	9a a3       	std	Y+34, r25	; 0x22
    29c0:	89 a3       	std	Y+33, r24	; 0x21
    29c2:	3f c0       	rjmp	.+126    	; 0x2a42 <LCD_voidInit+0x35e>
	else if (__tmp > 65535)
    29c4:	6b a1       	ldd	r22, Y+35	; 0x23
    29c6:	7c a1       	ldd	r23, Y+36	; 0x24
    29c8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ca:	9e a1       	ldd	r25, Y+38	; 0x26
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	3f ef       	ldi	r19, 0xFF	; 255
    29d0:	4f e7       	ldi	r20, 0x7F	; 127
    29d2:	57 e4       	ldi	r21, 0x47	; 71
    29d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d8:	18 16       	cp	r1, r24
    29da:	4c f5       	brge	.+82     	; 0x2a2e <LCD_voidInit+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29dc:	6f a1       	ldd	r22, Y+39	; 0x27
    29de:	78 a5       	ldd	r23, Y+40	; 0x28
    29e0:	89 a5       	ldd	r24, Y+41	; 0x29
    29e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	bc 01       	movw	r22, r24
    29f6:	cd 01       	movw	r24, r26
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9a a3       	std	Y+34, r25	; 0x22
    2a02:	89 a3       	std	Y+33, r24	; 0x21
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <LCD_voidInit+0x340>
    2a06:	89 e1       	ldi	r24, 0x19	; 25
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	98 a3       	std	Y+32, r25	; 0x20
    2a0c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a10:	98 a1       	ldd	r25, Y+32	; 0x20
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_voidInit+0x32e>
    2a16:	98 a3       	std	Y+32, r25	; 0x20
    2a18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	9a a3       	std	Y+34, r25	; 0x22
    2a22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a24:	89 a1       	ldd	r24, Y+33	; 0x21
    2a26:	9a a1       	ldd	r25, Y+34	; 0x22
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	69 f7       	brne	.-38     	; 0x2a06 <LCD_voidInit+0x322>
    2a2c:	14 c0       	rjmp	.+40     	; 0x2a56 <LCD_voidInit+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a30:	7c a1       	ldd	r23, Y+36	; 0x24
    2a32:	8d a1       	ldd	r24, Y+37	; 0x25
    2a34:	9e a1       	ldd	r25, Y+38	; 0x26
    2a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	9a a3       	std	Y+34, r25	; 0x22
    2a40:	89 a3       	std	Y+33, r24	; 0x21
    2a42:	89 a1       	ldd	r24, Y+33	; 0x21
    2a44:	9a a1       	ldd	r25, Y+34	; 0x22
    2a46:	9e 8f       	std	Y+30, r25	; 0x1e
    2a48:	8d 8f       	std	Y+29, r24	; 0x1d
    2a4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <LCD_voidInit+0x36a>
    2a52:	9e 8f       	std	Y+30, r25	; 0x1e
    2a54:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_voidSendCommand>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a0 ea       	ldi	r26, 0xA0	; 160
    2a62:	b0 e4       	ldi	r27, 0x40	; 64
    2a64:	89 8f       	std	Y+25, r24	; 0x19
    2a66:	9a 8f       	std	Y+26, r25	; 0x1a
    2a68:	ab 8f       	std	Y+27, r26	; 0x1b
    2a6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	4a e7       	ldi	r20, 0x7A	; 122
    2a7a:	53 e4       	ldi	r21, 0x43	; 67
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	8d 8b       	std	Y+21, r24	; 0x15
    2a86:	9e 8b       	std	Y+22, r25	; 0x16
    2a88:	af 8b       	std	Y+23, r26	; 0x17
    2a8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a90:	8f 89       	ldd	r24, Y+23	; 0x17
    2a92:	98 8d       	ldd	r25, Y+24	; 0x18
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e8       	ldi	r20, 0x80	; 128
    2a9a:	5f e3       	ldi	r21, 0x3F	; 63
    2a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa0:	88 23       	and	r24, r24
    2aa2:	2c f4       	brge	.+10     	; 0x2aae <LCD_voidInit+0x3ca>
		__ticks = 1;
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	9c 8b       	std	Y+20, r25	; 0x14
    2aaa:	8b 8b       	std	Y+19, r24	; 0x13
    2aac:	3f c0       	rjmp	.+126    	; 0x2b2c <LCD_voidInit+0x448>
	else if (__tmp > 65535)
    2aae:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	3f ef       	ldi	r19, 0xFF	; 255
    2aba:	4f e7       	ldi	r20, 0x7F	; 127
    2abc:	57 e4       	ldi	r21, 0x47	; 71
    2abe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac2:	18 16       	cp	r1, r24
    2ac4:	4c f5       	brge	.+82     	; 0x2b18 <LCD_voidInit+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2acc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e2       	ldi	r20, 0x20	; 32
    2ad4:	51 e4       	ldi	r21, 0x41	; 65
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	9c 8b       	std	Y+20, r25	; 0x14
    2aec:	8b 8b       	std	Y+19, r24	; 0x13
    2aee:	0f c0       	rjmp	.+30     	; 0x2b0e <LCD_voidInit+0x42a>
    2af0:	89 e1       	ldi	r24, 0x19	; 25
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	9a 8b       	std	Y+18, r25	; 0x12
    2af6:	89 8b       	std	Y+17, r24	; 0x11
    2af8:	89 89       	ldd	r24, Y+17	; 0x11
    2afa:	9a 89       	ldd	r25, Y+18	; 0x12
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <LCD_voidInit+0x418>
    2b00:	9a 8b       	std	Y+18, r25	; 0x12
    2b02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b04:	8b 89       	ldd	r24, Y+19	; 0x13
    2b06:	9c 89       	ldd	r25, Y+20	; 0x14
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	9c 8b       	std	Y+20, r25	; 0x14
    2b0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b10:	9c 89       	ldd	r25, Y+20	; 0x14
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	69 f7       	brne	.-38     	; 0x2af0 <LCD_voidInit+0x40c>
    2b16:	14 c0       	rjmp	.+40     	; 0x2b40 <LCD_voidInit+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b18:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9c 8b       	std	Y+20, r25	; 0x14
    2b2a:	8b 8b       	std	Y+19, r24	; 0x13
    2b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b30:	98 8b       	std	Y+16, r25	; 0x10
    2b32:	8f 87       	std	Y+15, r24	; 0x0f
    2b34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b36:	98 89       	ldd	r25, Y+16	; 0x10
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <LCD_voidInit+0x454>
    2b3c:	98 8b       	std	Y+16, r25	; 0x10
    2b3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(LCD_ENTRY_MODE_INC);
    2b40:	86 e0       	ldi	r24, 0x06	; 6
    2b42:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_voidSendCommand>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e0       	ldi	r26, 0x00	; 0
    2b4c:	b0 e4       	ldi	r27, 0x40	; 64
    2b4e:	8b 87       	std	Y+11, r24	; 0x0b
    2b50:	9c 87       	std	Y+12, r25	; 0x0c
    2b52:	ad 87       	std	Y+13, r26	; 0x0d
    2b54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a e7       	ldi	r20, 0x7A	; 122
    2b64:	53 e4       	ldi	r21, 0x43	; 67
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8f 83       	std	Y+7, r24	; 0x07
    2b70:	98 87       	std	Y+8, r25	; 0x08
    2b72:	a9 87       	std	Y+9, r26	; 0x09
    2b74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <LCD_voidInit+0x4b4>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <LCD_voidInit+0x532>
	else if (__tmp > 65535)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <LCD_voidInit+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <LCD_voidInit+0x514>
    2bda:	89 e1       	ldi	r24, 0x19	; 25
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <LCD_voidInit+0x502>
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <LCD_voidInit+0x4f6>
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <LCD_voidInit+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	9a 83       	std	Y+2, r25	; 0x02
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <LCD_voidInit+0x53e>
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    2c2a:	ca 5b       	subi	r28, 0xBA	; 186
    2c2c:	df 4f       	sbci	r29, 0xFF	; 255
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	08 95       	ret

00002c42 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 u8CmdCopy)
{
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	e1 97       	sbiw	r28, 0x31	; 49
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	89 ab       	std	Y+49, r24	; 0x31
	DIO_u8SetPortValue(LCD_DATA_PORT, u8CmdCopy);
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c5c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, LOW);
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	62 e0       	ldi	r22, 0x02	; 2
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, LOW);
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	63 e0       	ldi	r22, 0x03	; 3
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	64 e0       	ldi	r22, 0x04	; 4
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	a0 e8       	ldi	r26, 0x80	; 128
    2c84:	bf e3       	ldi	r27, 0x3F	; 63
    2c86:	8d a7       	std	Y+45, r24	; 0x2d
    2c88:	9e a7       	std	Y+46, r25	; 0x2e
    2c8a:	af a7       	std	Y+47, r26	; 0x2f
    2c8c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c8e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c90:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c94:	98 a9       	ldd	r25, Y+48	; 0x30
    2c96:	2b ea       	ldi	r18, 0xAB	; 171
    2c98:	3a ea       	ldi	r19, 0xAA	; 170
    2c9a:	4a ea       	ldi	r20, 0xAA	; 170
    2c9c:	5e e3       	ldi	r21, 0x3E	; 62
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	89 a7       	std	Y+41, r24	; 0x29
    2ca8:	9a a7       	std	Y+42, r25	; 0x2a
    2caa:	ab a7       	std	Y+43, r26	; 0x2b
    2cac:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2cae:	69 a5       	ldd	r22, Y+41	; 0x29
    2cb0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e8       	ldi	r20, 0x80	; 128
    2cbc:	5f e3       	ldi	r21, 0x3F	; 63
    2cbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc2:	88 23       	and	r24, r24
    2cc4:	1c f4       	brge	.+6      	; 0x2ccc <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	88 a7       	std	Y+40, r24	; 0x28
    2cca:	91 c0       	rjmp	.+290    	; 0x2dee <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    2ccc:	69 a5       	ldd	r22, Y+41	; 0x29
    2cce:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	4f e7       	ldi	r20, 0x7F	; 127
    2cda:	53 e4       	ldi	r21, 0x43	; 67
    2cdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce0:	18 16       	cp	r1, r24
    2ce2:	0c f0       	brlt	.+2      	; 0x2ce6 <LCD_voidSendCommand+0xa4>
    2ce4:	7b c0       	rjmp	.+246    	; 0x2ddc <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2ce6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ce8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cec:	98 a9       	ldd	r25, Y+48	; 0x30
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a e7       	ldi	r20, 0x7A	; 122
    2cf4:	54 e4       	ldi	r21, 0x44	; 68
    2cf6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	8c a3       	std	Y+36, r24	; 0x24
    2d00:	9d a3       	std	Y+37, r25	; 0x25
    2d02:	ae a3       	std	Y+38, r26	; 0x26
    2d04:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d06:	6c a1       	ldd	r22, Y+36	; 0x24
    2d08:	7d a1       	ldd	r23, Y+37	; 0x25
    2d0a:	8e a1       	ldd	r24, Y+38	; 0x26
    2d0c:	9f a1       	ldd	r25, Y+39	; 0x27
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4a e7       	ldi	r20, 0x7A	; 122
    2d14:	53 e4       	ldi	r21, 0x43	; 67
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	88 a3       	std	Y+32, r24	; 0x20
    2d20:	99 a3       	std	Y+33, r25	; 0x21
    2d22:	aa a3       	std	Y+34, r26	; 0x22
    2d24:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d26:	68 a1       	ldd	r22, Y+32	; 0x20
    2d28:	79 a1       	ldd	r23, Y+33	; 0x21
    2d2a:	8a a1       	ldd	r24, Y+34	; 0x22
    2d2c:	9b a1       	ldd	r25, Y+35	; 0x23
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d3a:	88 23       	and	r24, r24
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9f 8f       	std	Y+31, r25	; 0x1f
    2d44:	8e 8f       	std	Y+30, r24	; 0x1e
    2d46:	3f c0       	rjmp	.+126    	; 0x2dc6 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    2d48:	68 a1       	ldd	r22, Y+32	; 0x20
    2d4a:	79 a1       	ldd	r23, Y+33	; 0x21
    2d4c:	8a a1       	ldd	r24, Y+34	; 0x22
    2d4e:	9b a1       	ldd	r25, Y+35	; 0x23
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	3f ef       	ldi	r19, 0xFF	; 255
    2d54:	4f e7       	ldi	r20, 0x7F	; 127
    2d56:	57 e4       	ldi	r21, 0x47	; 71
    2d58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d5c:	18 16       	cp	r1, r24
    2d5e:	4c f5       	brge	.+82     	; 0x2db2 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	6c a1       	ldd	r22, Y+36	; 0x24
    2d62:	7d a1       	ldd	r23, Y+37	; 0x25
    2d64:	8e a1       	ldd	r24, Y+38	; 0x26
    2d66:	9f a1       	ldd	r25, Y+39	; 0x27
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9f 8f       	std	Y+31, r25	; 0x1f
    2d86:	8e 8f       	std	Y+30, r24	; 0x1e
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <LCD_voidSendCommand+0x166>
    2d8a:	89 e1       	ldi	r24, 0x19	; 25
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	9d 8f       	std	Y+29, r25	; 0x1d
    2d90:	8c 8f       	std	Y+28, r24	; 0x1c
    2d92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d94:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_voidSendCommand+0x154>
    2d9a:	9d 8f       	std	Y+29, r25	; 0x1d
    2d9c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2da0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	9f 8f       	std	Y+31, r25	; 0x1f
    2da6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2daa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <LCD_voidSendCommand+0x148>
    2db0:	24 c0       	rjmp	.+72     	; 0x2dfa <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db2:	68 a1       	ldd	r22, Y+32	; 0x20
    2db4:	79 a1       	ldd	r23, Y+33	; 0x21
    2db6:	8a a1       	ldd	r24, Y+34	; 0x22
    2db8:	9b a1       	ldd	r25, Y+35	; 0x23
    2dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	9f 8f       	std	Y+31, r25	; 0x1f
    2dc4:	8e 8f       	std	Y+30, r24	; 0x1e
    2dc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dca:	9b 8f       	std	Y+27, r25	; 0x1b
    2dcc:	8a 8f       	std	Y+26, r24	; 0x1a
    2dce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <LCD_voidSendCommand+0x190>
    2dd6:	9b 8f       	std	Y+27, r25	; 0x1b
    2dd8:	8a 8f       	std	Y+26, r24	; 0x1a
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ddc:	69 a5       	ldd	r22, Y+41	; 0x29
    2dde:	7a a5       	ldd	r23, Y+42	; 0x2a
    2de0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2de2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	88 a7       	std	Y+40, r24	; 0x28
    2dee:	88 a5       	ldd	r24, Y+40	; 0x28
    2df0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2df2:	89 8d       	ldd	r24, Y+25	; 0x19
    2df4:	8a 95       	dec	r24
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <LCD_voidSendCommand+0x1b2>
    2df8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	64 e0       	ldi	r22, 0x04	; 4
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	a8 ec       	ldi	r26, 0xC8	; 200
    2e0a:	b2 e4       	ldi	r27, 0x42	; 66
    2e0c:	8d 8b       	std	Y+21, r24	; 0x15
    2e0e:	9e 8b       	std	Y+22, r25	; 0x16
    2e10:	af 8b       	std	Y+23, r26	; 0x17
    2e12:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e14:	6d 89       	ldd	r22, Y+21	; 0x15
    2e16:	7e 89       	ldd	r23, Y+22	; 0x16
    2e18:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1c:	2b ea       	ldi	r18, 0xAB	; 171
    2e1e:	3a ea       	ldi	r19, 0xAA	; 170
    2e20:	4a ea       	ldi	r20, 0xAA	; 170
    2e22:	5e e3       	ldi	r21, 0x3E	; 62
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	89 8b       	std	Y+17, r24	; 0x11
    2e2e:	9a 8b       	std	Y+18, r25	; 0x12
    2e30:	ab 8b       	std	Y+19, r26	; 0x13
    2e32:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e34:	69 89       	ldd	r22, Y+17	; 0x11
    2e36:	7a 89       	ldd	r23, Y+18	; 0x12
    2e38:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e8       	ldi	r20, 0x80	; 128
    2e42:	5f e3       	ldi	r21, 0x3F	; 63
    2e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e48:	88 23       	and	r24, r24
    2e4a:	1c f4       	brge	.+6      	; 0x2e52 <LCD_voidSendCommand+0x210>
		__ticks = 1;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	88 8b       	std	Y+16, r24	; 0x10
    2e50:	91 c0       	rjmp	.+290    	; 0x2f74 <LCD_voidSendCommand+0x332>
	else if (__tmp > 255)
    2e52:	69 89       	ldd	r22, Y+17	; 0x11
    2e54:	7a 89       	ldd	r23, Y+18	; 0x12
    2e56:	8b 89       	ldd	r24, Y+19	; 0x13
    2e58:	9c 89       	ldd	r25, Y+20	; 0x14
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4f e7       	ldi	r20, 0x7F	; 127
    2e60:	53 e4       	ldi	r21, 0x43	; 67
    2e62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e66:	18 16       	cp	r1, r24
    2e68:	0c f0       	brlt	.+2      	; 0x2e6c <LCD_voidSendCommand+0x22a>
    2e6a:	7b c0       	rjmp	.+246    	; 0x2f62 <LCD_voidSendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    2e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e70:	8f 89       	ldd	r24, Y+23	; 0x17
    2e72:	98 8d       	ldd	r25, Y+24	; 0x18
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	4a e7       	ldi	r20, 0x7A	; 122
    2e7a:	54 e4       	ldi	r21, 0x44	; 68
    2e7c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	8c 87       	std	Y+12, r24	; 0x0c
    2e86:	9d 87       	std	Y+13, r25	; 0x0d
    2e88:	ae 87       	std	Y+14, r26	; 0x0e
    2e8a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e90:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e92:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4a e7       	ldi	r20, 0x7A	; 122
    2e9a:	53 e4       	ldi	r21, 0x43	; 67
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	88 87       	std	Y+8, r24	; 0x08
    2ea6:	99 87       	std	Y+9, r25	; 0x09
    2ea8:	aa 87       	std	Y+10, r26	; 0x0a
    2eaa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2eac:	68 85       	ldd	r22, Y+8	; 0x08
    2eae:	79 85       	ldd	r23, Y+9	; 0x09
    2eb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e8       	ldi	r20, 0x80	; 128
    2eba:	5f e3       	ldi	r21, 0x3F	; 63
    2ebc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec0:	88 23       	and	r24, r24
    2ec2:	2c f4       	brge	.+10     	; 0x2ece <LCD_voidSendCommand+0x28c>
		__ticks = 1;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	9f 83       	std	Y+7, r25	; 0x07
    2eca:	8e 83       	std	Y+6, r24	; 0x06
    2ecc:	3f c0       	rjmp	.+126    	; 0x2f4c <LCD_voidSendCommand+0x30a>
	else if (__tmp > 65535)
    2ece:	68 85       	ldd	r22, Y+8	; 0x08
    2ed0:	79 85       	ldd	r23, Y+9	; 0x09
    2ed2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ed4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	3f ef       	ldi	r19, 0xFF	; 255
    2eda:	4f e7       	ldi	r20, 0x7F	; 127
    2edc:	57 e4       	ldi	r21, 0x47	; 71
    2ede:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee2:	18 16       	cp	r1, r24
    2ee4:	4c f5       	brge	.+82     	; 0x2f38 <LCD_voidSendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ee8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2eea:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eec:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e2       	ldi	r20, 0x20	; 32
    2ef4:	51 e4       	ldi	r21, 0x41	; 65
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9f 83       	std	Y+7, r25	; 0x07
    2f0c:	8e 83       	std	Y+6, r24	; 0x06
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <LCD_voidSendCommand+0x2ec>
    2f10:	89 e1       	ldi	r24, 0x19	; 25
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	9d 83       	std	Y+5, r25	; 0x05
    2f16:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f18:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	f1 f7       	brne	.-4      	; 0x2f1c <LCD_voidSendCommand+0x2da>
    2f20:	9d 83       	std	Y+5, r25	; 0x05
    2f22:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f24:	8e 81       	ldd	r24, Y+6	; 0x06
    2f26:	9f 81       	ldd	r25, Y+7	; 0x07
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	9f 83       	std	Y+7, r25	; 0x07
    2f2c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f30:	9f 81       	ldd	r25, Y+7	; 0x07
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	69 f7       	brne	.-38     	; 0x2f10 <LCD_voidSendCommand+0x2ce>
    2f36:	24 c0       	rjmp	.+72     	; 0x2f80 <LCD_voidSendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f38:	68 85       	ldd	r22, Y+8	; 0x08
    2f3a:	79 85       	ldd	r23, Y+9	; 0x09
    2f3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9f 83       	std	Y+7, r25	; 0x07
    2f4a:	8e 83       	std	Y+6, r24	; 0x06
    2f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f50:	9b 83       	std	Y+3, r25	; 0x03
    2f52:	8a 83       	std	Y+2, r24	; 0x02
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	9b 81       	ldd	r25, Y+3	; 0x03
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD_voidSendCommand+0x316>
    2f5c:	9b 83       	std	Y+3, r25	; 0x03
    2f5e:	8a 83       	std	Y+2, r24	; 0x02
    2f60:	0f c0       	rjmp	.+30     	; 0x2f80 <LCD_voidSendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f62:	69 89       	ldd	r22, Y+17	; 0x11
    2f64:	7a 89       	ldd	r23, Y+18	; 0x12
    2f66:	8b 89       	ldd	r24, Y+19	; 0x13
    2f68:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	88 8b       	std	Y+16, r24	; 0x10
    2f74:	88 89       	ldd	r24, Y+16	; 0x10
    2f76:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	8a 95       	dec	r24
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <LCD_voidSendCommand+0x338>
    2f7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    2f80:	e1 96       	adiw	r28, 0x31	; 49
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <LCD_voidPrintChar>:

void LCD_voidPrintChar(u8 u8CharCopy)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	e1 97       	sbiw	r28, 0x31	; 49
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	89 ab       	std	Y+49, r24	; 0x31
	DIO_u8SetPortValue(LCD_DATA_PORT, u8CharCopy);
    2fa8:	82 e0       	ldi	r24, 0x02	; 2
    2faa:	69 a9       	ldd	r22, Y+49	; 0x31
    2fac:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, HIGH);
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	62 e0       	ldi	r22, 0x02	; 2
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, LOW);
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	63 e0       	ldi	r22, 0x03	; 3
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	64 e0       	ldi	r22, 0x04	; 4
    2fc8:	41 e0       	ldi	r20, 0x01	; 1
    2fca:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a0 e8       	ldi	r26, 0x80	; 128
    2fd4:	bf e3       	ldi	r27, 0x3F	; 63
    2fd6:	8d a7       	std	Y+45, r24	; 0x2d
    2fd8:	9e a7       	std	Y+46, r25	; 0x2e
    2fda:	af a7       	std	Y+47, r26	; 0x2f
    2fdc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fde:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fe0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe6:	2b ea       	ldi	r18, 0xAB	; 171
    2fe8:	3a ea       	ldi	r19, 0xAA	; 170
    2fea:	4a ea       	ldi	r20, 0xAA	; 170
    2fec:	5e e3       	ldi	r21, 0x3E	; 62
    2fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	89 a7       	std	Y+41, r24	; 0x29
    2ff8:	9a a7       	std	Y+42, r25	; 0x2a
    2ffa:	ab a7       	std	Y+43, r26	; 0x2b
    2ffc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ffe:	69 a5       	ldd	r22, Y+41	; 0x29
    3000:	7a a5       	ldd	r23, Y+42	; 0x2a
    3002:	8b a5       	ldd	r24, Y+43	; 0x2b
    3004:	9c a5       	ldd	r25, Y+44	; 0x2c
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e8       	ldi	r20, 0x80	; 128
    300c:	5f e3       	ldi	r21, 0x3F	; 63
    300e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3012:	88 23       	and	r24, r24
    3014:	1c f4       	brge	.+6      	; 0x301c <LCD_voidPrintChar+0x8a>
		__ticks = 1;
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	88 a7       	std	Y+40, r24	; 0x28
    301a:	91 c0       	rjmp	.+290    	; 0x313e <LCD_voidPrintChar+0x1ac>
	else if (__tmp > 255)
    301c:	69 a5       	ldd	r22, Y+41	; 0x29
    301e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3020:	8b a5       	ldd	r24, Y+43	; 0x2b
    3022:	9c a5       	ldd	r25, Y+44	; 0x2c
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	4f e7       	ldi	r20, 0x7F	; 127
    302a:	53 e4       	ldi	r21, 0x43	; 67
    302c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3030:	18 16       	cp	r1, r24
    3032:	0c f0       	brlt	.+2      	; 0x3036 <LCD_voidPrintChar+0xa4>
    3034:	7b c0       	rjmp	.+246    	; 0x312c <LCD_voidPrintChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3036:	6d a5       	ldd	r22, Y+45	; 0x2d
    3038:	7e a5       	ldd	r23, Y+46	; 0x2e
    303a:	8f a5       	ldd	r24, Y+47	; 0x2f
    303c:	98 a9       	ldd	r25, Y+48	; 0x30
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a e7       	ldi	r20, 0x7A	; 122
    3044:	54 e4       	ldi	r21, 0x44	; 68
    3046:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8c a3       	std	Y+36, r24	; 0x24
    3050:	9d a3       	std	Y+37, r25	; 0x25
    3052:	ae a3       	std	Y+38, r26	; 0x26
    3054:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3056:	6c a1       	ldd	r22, Y+36	; 0x24
    3058:	7d a1       	ldd	r23, Y+37	; 0x25
    305a:	8e a1       	ldd	r24, Y+38	; 0x26
    305c:	9f a1       	ldd	r25, Y+39	; 0x27
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	4a e7       	ldi	r20, 0x7A	; 122
    3064:	53 e4       	ldi	r21, 0x43	; 67
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	88 a3       	std	Y+32, r24	; 0x20
    3070:	99 a3       	std	Y+33, r25	; 0x21
    3072:	aa a3       	std	Y+34, r26	; 0x22
    3074:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3076:	68 a1       	ldd	r22, Y+32	; 0x20
    3078:	79 a1       	ldd	r23, Y+33	; 0x21
    307a:	8a a1       	ldd	r24, Y+34	; 0x22
    307c:	9b a1       	ldd	r25, Y+35	; 0x23
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	2c f4       	brge	.+10     	; 0x3098 <LCD_voidPrintChar+0x106>
		__ticks = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9f 8f       	std	Y+31, r25	; 0x1f
    3094:	8e 8f       	std	Y+30, r24	; 0x1e
    3096:	3f c0       	rjmp	.+126    	; 0x3116 <LCD_voidPrintChar+0x184>
	else if (__tmp > 65535)
    3098:	68 a1       	ldd	r22, Y+32	; 0x20
    309a:	79 a1       	ldd	r23, Y+33	; 0x21
    309c:	8a a1       	ldd	r24, Y+34	; 0x22
    309e:	9b a1       	ldd	r25, Y+35	; 0x23
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	3f ef       	ldi	r19, 0xFF	; 255
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	57 e4       	ldi	r21, 0x47	; 71
    30a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	4c f5       	brge	.+82     	; 0x3102 <LCD_voidPrintChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b0:	6c a1       	ldd	r22, Y+36	; 0x24
    30b2:	7d a1       	ldd	r23, Y+37	; 0x25
    30b4:	8e a1       	ldd	r24, Y+38	; 0x26
    30b6:	9f a1       	ldd	r25, Y+39	; 0x27
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e2       	ldi	r20, 0x20	; 32
    30be:	51 e4       	ldi	r21, 0x41	; 65
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9f 8f       	std	Y+31, r25	; 0x1f
    30d6:	8e 8f       	std	Y+30, r24	; 0x1e
    30d8:	0f c0       	rjmp	.+30     	; 0x30f8 <LCD_voidPrintChar+0x166>
    30da:	89 e1       	ldi	r24, 0x19	; 25
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	9d 8f       	std	Y+29, r25	; 0x1d
    30e0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <LCD_voidPrintChar+0x154>
    30ea:	9d 8f       	std	Y+29, r25	; 0x1d
    30ec:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9f 8f       	std	Y+31, r25	; 0x1f
    30f6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	69 f7       	brne	.-38     	; 0x30da <LCD_voidPrintChar+0x148>
    3100:	24 c0       	rjmp	.+72     	; 0x314a <LCD_voidPrintChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3102:	68 a1       	ldd	r22, Y+32	; 0x20
    3104:	79 a1       	ldd	r23, Y+33	; 0x21
    3106:	8a a1       	ldd	r24, Y+34	; 0x22
    3108:	9b a1       	ldd	r25, Y+35	; 0x23
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9f 8f       	std	Y+31, r25	; 0x1f
    3114:	8e 8f       	std	Y+30, r24	; 0x1e
    3116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3118:	9f 8d       	ldd	r25, Y+31	; 0x1f
    311a:	9b 8f       	std	Y+27, r25	; 0x1b
    311c:	8a 8f       	std	Y+26, r24	; 0x1a
    311e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3120:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <LCD_voidPrintChar+0x190>
    3126:	9b 8f       	std	Y+27, r25	; 0x1b
    3128:	8a 8f       	std	Y+26, r24	; 0x1a
    312a:	0f c0       	rjmp	.+30     	; 0x314a <LCD_voidPrintChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    312c:	69 a5       	ldd	r22, Y+41	; 0x29
    312e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3130:	8b a5       	ldd	r24, Y+43	; 0x2b
    3132:	9c a5       	ldd	r25, Y+44	; 0x2c
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	88 a7       	std	Y+40, r24	; 0x28
    313e:	88 a5       	ldd	r24, Y+40	; 0x28
    3140:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3142:	89 8d       	ldd	r24, Y+25	; 0x19
    3144:	8a 95       	dec	r24
    3146:	f1 f7       	brne	.-4      	; 0x3144 <LCD_voidPrintChar+0x1b2>
    3148:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	64 e0       	ldi	r22, 0x04	; 4
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a8 ec       	ldi	r26, 0xC8	; 200
    315a:	b2 e4       	ldi	r27, 0x42	; 66
    315c:	8d 8b       	std	Y+21, r24	; 0x15
    315e:	9e 8b       	std	Y+22, r25	; 0x16
    3160:	af 8b       	std	Y+23, r26	; 0x17
    3162:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3164:	6d 89       	ldd	r22, Y+21	; 0x15
    3166:	7e 89       	ldd	r23, Y+22	; 0x16
    3168:	8f 89       	ldd	r24, Y+23	; 0x17
    316a:	98 8d       	ldd	r25, Y+24	; 0x18
    316c:	2b ea       	ldi	r18, 0xAB	; 171
    316e:	3a ea       	ldi	r19, 0xAA	; 170
    3170:	4a ea       	ldi	r20, 0xAA	; 170
    3172:	5e e3       	ldi	r21, 0x3E	; 62
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	89 8b       	std	Y+17, r24	; 0x11
    317e:	9a 8b       	std	Y+18, r25	; 0x12
    3180:	ab 8b       	std	Y+19, r26	; 0x13
    3182:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3184:	69 89       	ldd	r22, Y+17	; 0x11
    3186:	7a 89       	ldd	r23, Y+18	; 0x12
    3188:	8b 89       	ldd	r24, Y+19	; 0x13
    318a:	9c 89       	ldd	r25, Y+20	; 0x14
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e8       	ldi	r20, 0x80	; 128
    3192:	5f e3       	ldi	r21, 0x3F	; 63
    3194:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3198:	88 23       	and	r24, r24
    319a:	1c f4       	brge	.+6      	; 0x31a2 <LCD_voidPrintChar+0x210>
		__ticks = 1;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	88 8b       	std	Y+16, r24	; 0x10
    31a0:	91 c0       	rjmp	.+290    	; 0x32c4 <LCD_voidPrintChar+0x332>
	else if (__tmp > 255)
    31a2:	69 89       	ldd	r22, Y+17	; 0x11
    31a4:	7a 89       	ldd	r23, Y+18	; 0x12
    31a6:	8b 89       	ldd	r24, Y+19	; 0x13
    31a8:	9c 89       	ldd	r25, Y+20	; 0x14
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	4f e7       	ldi	r20, 0x7F	; 127
    31b0:	53 e4       	ldi	r21, 0x43	; 67
    31b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b6:	18 16       	cp	r1, r24
    31b8:	0c f0       	brlt	.+2      	; 0x31bc <LCD_voidPrintChar+0x22a>
    31ba:	7b c0       	rjmp	.+246    	; 0x32b2 <LCD_voidPrintChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    31bc:	6d 89       	ldd	r22, Y+21	; 0x15
    31be:	7e 89       	ldd	r23, Y+22	; 0x16
    31c0:	8f 89       	ldd	r24, Y+23	; 0x17
    31c2:	98 8d       	ldd	r25, Y+24	; 0x18
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	4a e7       	ldi	r20, 0x7A	; 122
    31ca:	54 e4       	ldi	r21, 0x44	; 68
    31cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	8c 87       	std	Y+12, r24	; 0x0c
    31d6:	9d 87       	std	Y+13, r25	; 0x0d
    31d8:	ae 87       	std	Y+14, r26	; 0x0e
    31da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    31de:	7d 85       	ldd	r23, Y+13	; 0x0d
    31e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    31e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	4a e7       	ldi	r20, 0x7A	; 122
    31ea:	53 e4       	ldi	r21, 0x43	; 67
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	88 87       	std	Y+8, r24	; 0x08
    31f6:	99 87       	std	Y+9, r25	; 0x09
    31f8:	aa 87       	std	Y+10, r26	; 0x0a
    31fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31fc:	68 85       	ldd	r22, Y+8	; 0x08
    31fe:	79 85       	ldd	r23, Y+9	; 0x09
    3200:	8a 85       	ldd	r24, Y+10	; 0x0a
    3202:	9b 85       	ldd	r25, Y+11	; 0x0b
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e8       	ldi	r20, 0x80	; 128
    320a:	5f e3       	ldi	r21, 0x3F	; 63
    320c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3210:	88 23       	and	r24, r24
    3212:	2c f4       	brge	.+10     	; 0x321e <LCD_voidPrintChar+0x28c>
		__ticks = 1;
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	9f 83       	std	Y+7, r25	; 0x07
    321a:	8e 83       	std	Y+6, r24	; 0x06
    321c:	3f c0       	rjmp	.+126    	; 0x329c <LCD_voidPrintChar+0x30a>
	else if (__tmp > 65535)
    321e:	68 85       	ldd	r22, Y+8	; 0x08
    3220:	79 85       	ldd	r23, Y+9	; 0x09
    3222:	8a 85       	ldd	r24, Y+10	; 0x0a
    3224:	9b 85       	ldd	r25, Y+11	; 0x0b
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	3f ef       	ldi	r19, 0xFF	; 255
    322a:	4f e7       	ldi	r20, 0x7F	; 127
    322c:	57 e4       	ldi	r21, 0x47	; 71
    322e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3232:	18 16       	cp	r1, r24
    3234:	4c f5       	brge	.+82     	; 0x3288 <LCD_voidPrintChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3236:	6c 85       	ldd	r22, Y+12	; 0x0c
    3238:	7d 85       	ldd	r23, Y+13	; 0x0d
    323a:	8e 85       	ldd	r24, Y+14	; 0x0e
    323c:	9f 85       	ldd	r25, Y+15	; 0x0f
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e2       	ldi	r20, 0x20	; 32
    3244:	51 e4       	ldi	r21, 0x41	; 65
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	9f 83       	std	Y+7, r25	; 0x07
    325c:	8e 83       	std	Y+6, r24	; 0x06
    325e:	0f c0       	rjmp	.+30     	; 0x327e <LCD_voidPrintChar+0x2ec>
    3260:	89 e1       	ldi	r24, 0x19	; 25
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	9d 83       	std	Y+5, r25	; 0x05
    3266:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3268:	8c 81       	ldd	r24, Y+4	; 0x04
    326a:	9d 81       	ldd	r25, Y+5	; 0x05
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <LCD_voidPrintChar+0x2da>
    3270:	9d 83       	std	Y+5, r25	; 0x05
    3272:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3274:	8e 81       	ldd	r24, Y+6	; 0x06
    3276:	9f 81       	ldd	r25, Y+7	; 0x07
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	9f 83       	std	Y+7, r25	; 0x07
    327c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327e:	8e 81       	ldd	r24, Y+6	; 0x06
    3280:	9f 81       	ldd	r25, Y+7	; 0x07
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	69 f7       	brne	.-38     	; 0x3260 <LCD_voidPrintChar+0x2ce>
    3286:	24 c0       	rjmp	.+72     	; 0x32d0 <LCD_voidPrintChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3288:	68 85       	ldd	r22, Y+8	; 0x08
    328a:	79 85       	ldd	r23, Y+9	; 0x09
    328c:	8a 85       	ldd	r24, Y+10	; 0x0a
    328e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	9f 83       	std	Y+7, r25	; 0x07
    329a:	8e 83       	std	Y+6, r24	; 0x06
    329c:	8e 81       	ldd	r24, Y+6	; 0x06
    329e:	9f 81       	ldd	r25, Y+7	; 0x07
    32a0:	9b 83       	std	Y+3, r25	; 0x03
    32a2:	8a 83       	std	Y+2, r24	; 0x02
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	9b 81       	ldd	r25, Y+3	; 0x03
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <LCD_voidPrintChar+0x316>
    32ac:	9b 83       	std	Y+3, r25	; 0x03
    32ae:	8a 83       	std	Y+2, r24	; 0x02
    32b0:	0f c0       	rjmp	.+30     	; 0x32d0 <LCD_voidPrintChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32b2:	69 89       	ldd	r22, Y+17	; 0x11
    32b4:	7a 89       	ldd	r23, Y+18	; 0x12
    32b6:	8b 89       	ldd	r24, Y+19	; 0x13
    32b8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	88 8b       	std	Y+16, r24	; 0x10
    32c4:	88 89       	ldd	r24, Y+16	; 0x10
    32c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	8a 95       	dec	r24
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <LCD_voidPrintChar+0x338>
    32ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    32d0:	e1 96       	adiw	r28, 0x31	; 49
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	08 95       	ret

000032e2 <LCD_voidPrintStr>:

void LCD_voidPrintStr(const s8 * s8StringCopy)
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <LCD_voidPrintStr+0x6>
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	9a 83       	std	Y+2, r25	; 0x02
    32ee:	89 83       	std	Y+1, r24	; 0x01
    32f0:	0a c0       	rjmp	.+20     	; 0x3306 <LCD_voidPrintStr+0x24>
	while(* s8StringCopy)
	{
		LCD_voidPrintChar(* s8StringCopy);
    32f2:	e9 81       	ldd	r30, Y+1	; 0x01
    32f4:	fa 81       	ldd	r31, Y+2	; 0x02
    32f6:	80 81       	ld	r24, Z
    32f8:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <LCD_voidPrintChar>
		s8StringCopy++;
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3300:	01 96       	adiw	r24, 0x01	; 1
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}

void LCD_voidPrintStr(const s8 * s8StringCopy)
{
	while(* s8StringCopy)
    3306:	e9 81       	ldd	r30, Y+1	; 0x01
    3308:	fa 81       	ldd	r31, Y+2	; 0x02
    330a:	80 81       	ld	r24, Z
    330c:	88 23       	and	r24, r24
    330e:	89 f7       	brne	.-30     	; 0x32f2 <LCD_voidPrintStr+0x10>
	{
		LCD_voidPrintChar(* s8StringCopy);
		s8StringCopy++;
	}
}
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <LCD_voidGotoRowCol>:

void LCD_voidGotoRowCol(u8 u8RowCopy, u8 u8ColCopy)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	00 d0       	rcall	.+0      	; 0x3320 <LCD_voidGotoRowCol+0x6>
    3320:	00 d0       	rcall	.+0      	; 0x3322 <LCD_voidGotoRowCol+0x8>
    3322:	0f 92       	push	r0
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	8a 83       	std	Y+2, r24	; 0x02
    332a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch(u8RowCopy)
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	3d 83       	std	Y+5, r19	; 0x05
    3334:	2c 83       	std	Y+4, r18	; 0x04
    3336:	8c 81       	ldd	r24, Y+4	; 0x04
    3338:	9d 81       	ldd	r25, Y+5	; 0x05
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	91 05       	cpc	r25, r1
    333e:	c1 f0       	breq	.+48     	; 0x3370 <LCD_voidGotoRowCol+0x56>
    3340:	2c 81       	ldd	r18, Y+4	; 0x04
    3342:	3d 81       	ldd	r19, Y+5	; 0x05
    3344:	22 30       	cpi	r18, 0x02	; 2
    3346:	31 05       	cpc	r19, r1
    3348:	2c f4       	brge	.+10     	; 0x3354 <LCD_voidGotoRowCol+0x3a>
    334a:	8c 81       	ldd	r24, Y+4	; 0x04
    334c:	9d 81       	ldd	r25, Y+5	; 0x05
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	61 f0       	breq	.+24     	; 0x336a <LCD_voidGotoRowCol+0x50>
    3352:	19 c0       	rjmp	.+50     	; 0x3386 <LCD_voidGotoRowCol+0x6c>
    3354:	2c 81       	ldd	r18, Y+4	; 0x04
    3356:	3d 81       	ldd	r19, Y+5	; 0x05
    3358:	22 30       	cpi	r18, 0x02	; 2
    335a:	31 05       	cpc	r19, r1
    335c:	69 f0       	breq	.+26     	; 0x3378 <LCD_voidGotoRowCol+0x5e>
    335e:	8c 81       	ldd	r24, Y+4	; 0x04
    3360:	9d 81       	ldd	r25, Y+5	; 0x05
    3362:	83 30       	cpi	r24, 0x03	; 3
    3364:	91 05       	cpc	r25, r1
    3366:	61 f0       	breq	.+24     	; 0x3380 <LCD_voidGotoRowCol+0x66>
    3368:	0e c0       	rjmp	.+28     	; 0x3386 <LCD_voidGotoRowCol+0x6c>
	{
	case 0:	Address = u8ColCopy;
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	0b c0       	rjmp	.+22     	; 0x3386 <LCD_voidGotoRowCol+0x6c>
			break;
	case 1:	Address = u8ColCopy + 0x40;
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	80 5c       	subi	r24, 0xC0	; 192
    3374:	89 83       	std	Y+1, r24	; 0x01
    3376:	07 c0       	rjmp	.+14     	; 0x3386 <LCD_voidGotoRowCol+0x6c>
			break;
	case 2:	Address = u8ColCopy + 0x10;
    3378:	8b 81       	ldd	r24, Y+3	; 0x03
    337a:	80 5f       	subi	r24, 0xF0	; 240
    337c:	89 83       	std	Y+1, r24	; 0x01
    337e:	03 c0       	rjmp	.+6      	; 0x3386 <LCD_voidGotoRowCol+0x6c>
			break;
	case 3:	Address = u8ColCopy + 0x50;
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	80 5b       	subi	r24, 0xB0	; 176
    3384:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_voidSendCommand(LCD_MOVE_CURSOR | Address);
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	80 68       	ori	r24, 0x80	; 128
    338a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_voidSendCommand>
}
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <Keypad_voidInit>:




void Keypad_voidInit(void)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <Keypad_voidInit+0x6>
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
	for(u8 i=0; i<NUMBER_OF_COLS; i++)
    33a8:	1a 82       	std	Y+2, r1	; 0x02
    33aa:	31 c0       	rjmp	.+98     	; 0x340e <Keypad_voidInit+0x70>
	{
		DIO_u8SetPinDirection(cols[i].port, cols[i].pin, OUTPUT);
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	88 2f       	mov	r24, r24
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	88 0f       	add	r24, r24
    33b4:	99 1f       	adc	r25, r25
    33b6:	fc 01       	movw	r30, r24
    33b8:	e4 56       	subi	r30, 0x64	; 100
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	20 81       	ld	r18, Z
    33be:	8a 81       	ldd	r24, Y+2	; 0x02
    33c0:	88 2f       	mov	r24, r24
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	fc 01       	movw	r30, r24
    33ca:	e3 56       	subi	r30, 0x63	; 99
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	90 81       	ld	r25, Z
    33d0:	82 2f       	mov	r24, r18
    33d2:	69 2f       	mov	r22, r25
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	88 2f       	mov	r24, r24
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	fc 01       	movw	r30, r24
    33e6:	e4 56       	subi	r30, 0x64	; 100
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	20 81       	ld	r18, Z
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	88 2f       	mov	r24, r24
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	fc 01       	movw	r30, r24
    33f8:	e3 56       	subi	r30, 0x63	; 99
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	90 81       	ld	r25, Z
    33fe:	82 2f       	mov	r24, r18
    3400:	69 2f       	mov	r22, r25
    3402:	41 e0       	ldi	r20, 0x01	; 1
    3404:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>



void Keypad_voidInit(void)
{
	for(u8 i=0; i<NUMBER_OF_COLS; i++)
    3408:	8a 81       	ldd	r24, Y+2	; 0x02
    340a:	8f 5f       	subi	r24, 0xFF	; 255
    340c:	8a 83       	std	Y+2, r24	; 0x02
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	84 30       	cpi	r24, 0x04	; 4
    3412:	60 f2       	brcs	.-104    	; 0x33ac <Keypad_voidInit+0xe>
	{
		DIO_u8SetPinDirection(cols[i].port, cols[i].pin, OUTPUT);
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
	}

	for(u8 i=0; i<NUMBER_OF_ROWS; i++)
    3414:	19 82       	std	Y+1, r1	; 0x01
    3416:	31 c0       	rjmp	.+98     	; 0x347a <Keypad_voidInit+0xdc>
	{
		DIO_u8SetPinDirection(rows[i].port, rows[i].pin, INPUT);
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	88 2f       	mov	r24, r24
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	88 0f       	add	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	fc 01       	movw	r30, r24
    3424:	ec 55       	subi	r30, 0x5C	; 92
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	20 81       	ld	r18, Z
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	88 2f       	mov	r24, r24
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	88 0f       	add	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	fc 01       	movw	r30, r24
    3436:	eb 55       	subi	r30, 0x5B	; 91
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	90 81       	ld	r25, Z
    343c:	82 2f       	mov	r24, r18
    343e:	69 2f       	mov	r22, r25
    3440:	40 e0       	ldi	r20, 0x00	; 0
    3442:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
		DIO_PULLUP_PIN(rows[i].port, rows[i].pin);
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	88 2f       	mov	r24, r24
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	88 0f       	add	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	fc 01       	movw	r30, r24
    3452:	ec 55       	subi	r30, 0x5C	; 92
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	20 81       	ld	r18, Z
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	88 2f       	mov	r24, r24
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	88 0f       	add	r24, r24
    3460:	99 1f       	adc	r25, r25
    3462:	fc 01       	movw	r30, r24
    3464:	eb 55       	subi	r30, 0x5B	; 91
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	90 81       	ld	r25, Z
    346a:	82 2f       	mov	r24, r18
    346c:	69 2f       	mov	r22, r25
    346e:	41 e0       	ldi	r20, 0x01	; 1
    3470:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
	{
		DIO_u8SetPinDirection(cols[i].port, cols[i].pin, OUTPUT);
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
	}

	for(u8 i=0; i<NUMBER_OF_ROWS; i++)
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	8f 5f       	subi	r24, 0xFF	; 255
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	84 30       	cpi	r24, 0x04	; 4
    347e:	60 f2       	brcs	.-104    	; 0x3418 <Keypad_voidInit+0x7a>
	{
		DIO_u8SetPinDirection(rows[i].port, rows[i].pin, INPUT);
		DIO_PULLUP_PIN(rows[i].port, rows[i].pin);
	}

}
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <Keypad_u8GetValue>:


u8 Keypad_u8GetValue(void)
{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	00 d0       	rcall	.+0      	; 0x3490 <Keypad_u8GetValue+0x6>
    3490:	00 d0       	rcall	.+0      	; 0x3492 <Keypad_u8GetValue+0x8>
    3492:	0f 92       	push	r0
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i<NUMBER_OF_COLS;i++)
    3498:	1c 82       	std	Y+4, r1	; 0x04
    349a:	1b 82       	std	Y+3, r1	; 0x03
    349c:	79 c0       	rjmp	.+242    	; 0x3590 <Keypad_u8GetValue+0x106>
	{
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, LOW);
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	9c 81       	ldd	r25, Y+4	; 0x04
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	fc 01       	movw	r30, r24
    34a8:	e4 56       	subi	r30, 0x64	; 100
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	20 81       	ld	r18, Z
    34ae:	8b 81       	ldd	r24, Y+3	; 0x03
    34b0:	9c 81       	ldd	r25, Y+4	; 0x04
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	fc 01       	movw	r30, r24
    34b8:	e3 56       	subi	r30, 0x63	; 99
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	90 81       	ld	r25, Z
    34be:	82 2f       	mov	r24, r18
    34c0:	69 2f       	mov	r22, r25
    34c2:	40 e0       	ldi	r20, 0x00	; 0
    34c4:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
		for(int j=0; j<NUMBER_OF_ROWS;j++)
    34c8:	1a 82       	std	Y+2, r1	; 0x02
    34ca:	19 82       	std	Y+1, r1	; 0x01
    34cc:	41 c0       	rjmp	.+130    	; 0x3550 <Keypad_u8GetValue+0xc6>
		{
			if(DIO_u8GetPinValue(rows[j].port, rows[j].pin) == LOW)
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	fc 01       	movw	r30, r24
    34d8:	ec 55       	subi	r30, 0x5C	; 92
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	20 81       	ld	r18, Z
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	9a 81       	ldd	r25, Y+2	; 0x02
    34e2:	88 0f       	add	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	fc 01       	movw	r30, r24
    34e8:	eb 55       	subi	r30, 0x5B	; 91
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	90 81       	ld	r25, Z
    34ee:	82 2f       	mov	r24, r18
    34f0:	69 2f       	mov	r22, r25
    34f2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <DIO_u8GetPinValue>
    34f6:	88 23       	and	r24, r24
    34f8:	31 f5       	brne	.+76     	; 0x3546 <Keypad_u8GetValue+0xbc>
			{
				while(DIO_u8GetPinValue(rows[j].port, rows[j].pin) == LOW);
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	9a 81       	ldd	r25, Y+2	; 0x02
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	fc 01       	movw	r30, r24
    3504:	ec 55       	subi	r30, 0x5C	; 92
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	20 81       	ld	r18, Z
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	9a 81       	ldd	r25, Y+2	; 0x02
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	fc 01       	movw	r30, r24
    3514:	eb 55       	subi	r30, 0x5B	; 91
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	90 81       	ld	r25, Z
    351a:	82 2f       	mov	r24, r18
    351c:	69 2f       	mov	r22, r25
    351e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <DIO_u8GetPinValue>
    3522:	88 23       	and	r24, r24
    3524:	51 f3       	breq	.-44     	; 0x34fa <Keypad_u8GetValue+0x70>
				return characters[i][j];
    3526:	8b 81       	ldd	r24, Y+3	; 0x03
    3528:	9c 81       	ldd	r25, Y+4	; 0x04
    352a:	29 81       	ldd	r18, Y+1	; 0x01
    352c:	3a 81       	ldd	r19, Y+2	; 0x02
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	82 0f       	add	r24, r18
    3538:	93 1f       	adc	r25, r19
    353a:	fc 01       	movw	r30, r24
    353c:	e6 58       	subi	r30, 0x86	; 134
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 81       	ld	r24, Z
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	2d c0       	rjmp	.+90     	; 0x35a0 <Keypad_u8GetValue+0x116>
u8 Keypad_u8GetValue(void)
{
	for(int i=0; i<NUMBER_OF_COLS;i++)
	{
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, LOW);
		for(int j=0; j<NUMBER_OF_ROWS;j++)
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	01 96       	adiw	r24, 0x01	; 1
    354c:	9a 83       	std	Y+2, r25	; 0x02
    354e:	89 83       	std	Y+1, r24	; 0x01
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	9a 81       	ldd	r25, Y+2	; 0x02
    3554:	84 30       	cpi	r24, 0x04	; 4
    3556:	91 05       	cpc	r25, r1
    3558:	08 f4       	brcc	.+2      	; 0x355c <Keypad_u8GetValue+0xd2>
    355a:	b9 cf       	rjmp	.-142    	; 0x34ce <Keypad_u8GetValue+0x44>
			{
				while(DIO_u8GetPinValue(rows[j].port, rows[j].pin) == LOW);
				return characters[i][j];
			}
		}
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	9c 81       	ldd	r25, Y+4	; 0x04
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	fc 01       	movw	r30, r24
    3566:	e4 56       	subi	r30, 0x64	; 100
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	20 81       	ld	r18, Z
    356c:	8b 81       	ldd	r24, Y+3	; 0x03
    356e:	9c 81       	ldd	r25, Y+4	; 0x04
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	fc 01       	movw	r30, r24
    3576:	e3 56       	subi	r30, 0x63	; 99
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	90 81       	ld	r25, Z
    357c:	82 2f       	mov	r24, r18
    357e:	69 2f       	mov	r22, r25
    3580:	41 e0       	ldi	r20, 0x01	; 1
    3582:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
}


u8 Keypad_u8GetValue(void)
{
	for(int i=0; i<NUMBER_OF_COLS;i++)
    3586:	8b 81       	ldd	r24, Y+3	; 0x03
    3588:	9c 81       	ldd	r25, Y+4	; 0x04
    358a:	01 96       	adiw	r24, 0x01	; 1
    358c:	9c 83       	std	Y+4, r25	; 0x04
    358e:	8b 83       	std	Y+3, r24	; 0x03
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	84 30       	cpi	r24, 0x04	; 4
    3596:	91 05       	cpc	r25, r1
    3598:	08 f4       	brcc	.+2      	; 0x359c <Keypad_u8GetValue+0x112>
    359a:	81 cf       	rjmp	.-254    	; 0x349e <Keypad_u8GetValue+0x14>
				return characters[i][j];
			}
		}
		DIO_u8SetPinValue(cols[i].port, cols[i].pin, HIGH);
	}
	return KEYPAD_NULL_RETURN;
    359c:	8f ef       	ldi	r24, 0xFF	; 255
    359e:	8d 83       	std	Y+5, r24	; 0x05
    35a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <ICU_Init>:
#include "ICU_private.h"
#include "ICU_config.h"
#include "ICU_interface.h"

void ICU_Init(void)
{
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
#if ICU_EXTI_CHANNEL == EXTI0
	DIO_u8SetPinDirection(PORTD, PIN2, INPUT);
    35ba:	84 e0       	ldi	r24, 0x04	; 4
    35bc:	62 e0       	ldi	r22, 0x02	; 2
    35be:	40 e0       	ldi	r20, 0x00	; 0
    35c0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTD, PIN3, INPUT);
#elif ICU_EXTI_CHANNEL == EXTI2
	DIO_u8SetPinDirection(PORTB, PIN2, INPUT);
#endif

	EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	63 e0       	ldi	r22, 0x03	; 3
    35c8:	0e 94 36 0b 	call	0x166c	; 0x166c <EXTI_SetMode>
	EXTI_SetCallback(ICU_EXTI_CHANNEL, EXTI_Callback);
    35cc:	29 e3       	ldi	r18, 0x39	; 57
    35ce:	3b e1       	ldi	r19, 0x1B	; 27
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	b9 01       	movw	r22, r18
    35d4:	0e 94 0e 0c 	call	0x181c	; 0x181c <EXTI_SetCallback>
	EXTI_Enable(ICU_EXTI_CHANNEL);
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	0e 94 9e 0b 	call	0x173c	; 0x173c <EXTI_Enable>

	TIM1_voidInit();
    35de:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIM1_voidInit>
	TIM1_ClearCounterValue();
    35e2:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TIM1_ClearCounterValue>
}
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <ICU_GetOnTimeUs>:

u16 ICU_GetOnTimeUs(void)
{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
	return t_on;
    35f4:	80 91 b5 00 	lds	r24, 0x00B5
    35f8:	90 91 b6 00 	lds	r25, 0x00B6
}
    35fc:	cf 91       	pop	r28
    35fe:	df 91       	pop	r29
    3600:	08 95       	ret

00003602 <ICU_GetPeriodUs>:

u16 ICU_GetPeriodUs(void)
{
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
	return period;
    360a:	80 91 b7 00 	lds	r24, 0x00B7
    360e:	90 91 b8 00 	lds	r25, 0x00B8
}
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <ICU_GetDutyCycle>:

u8 ICU_GetDutyCycle(void)
{
    3618:	ef 92       	push	r14
    361a:	ff 92       	push	r15
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
	return (((u32)t_on * 100) / period);
    3628:	80 91 b5 00 	lds	r24, 0x00B5
    362c:	90 91 b6 00 	lds	r25, 0x00B6
    3630:	cc 01       	movw	r24, r24
    3632:	a0 e0       	ldi	r26, 0x00	; 0
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	24 e6       	ldi	r18, 0x64	; 100
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	50 e0       	ldi	r21, 0x00	; 0
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <__mulsi3>
    3646:	7b 01       	movw	r14, r22
    3648:	8c 01       	movw	r16, r24
    364a:	80 91 b7 00 	lds	r24, 0x00B7
    364e:	90 91 b8 00 	lds	r25, 0x00B8
    3652:	9c 01       	movw	r18, r24
    3654:	40 e0       	ldi	r20, 0x00	; 0
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	c8 01       	movw	r24, r16
    365a:	b7 01       	movw	r22, r14
    365c:	0e 94 05 1c 	call	0x380a	; 0x380a <__udivmodsi4>
    3660:	da 01       	movw	r26, r20
    3662:	c9 01       	movw	r24, r18
}
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	1f 91       	pop	r17
    366a:	0f 91       	pop	r16
    366c:	ff 90       	pop	r15
    366e:	ef 90       	pop	r14
    3670:	08 95       	ret

00003672 <EXTI_Callback>:

void EXTI_Callback(void)
{
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	00 d0       	rcall	.+0      	; 0x3678 <EXTI_Callback+0x6>
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
	static u8 state = ICU_STATE_WAIT_FOR_RISINGEDGE1;

	switch(state)
    367c:	80 91 b9 00 	lds	r24, 0x00B9
    3680:	28 2f       	mov	r18, r24
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	3a 83       	std	Y+2, r19	; 0x02
    3686:	29 83       	std	Y+1, r18	; 0x01
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	9a 81       	ldd	r25, Y+2	; 0x02
    368c:	81 30       	cpi	r24, 0x01	; 1
    368e:	91 05       	cpc	r25, r1
    3690:	99 f0       	breq	.+38     	; 0x36b8 <EXTI_Callback+0x46>
    3692:	29 81       	ldd	r18, Y+1	; 0x01
    3694:	3a 81       	ldd	r19, Y+2	; 0x02
    3696:	22 30       	cpi	r18, 0x02	; 2
    3698:	31 05       	cpc	r19, r1
    369a:	e1 f0       	breq	.+56     	; 0x36d4 <EXTI_Callback+0x62>
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	00 97       	sbiw	r24, 0x00	; 0
    36a2:	21 f5       	brne	.+72     	; 0x36ec <EXTI_Callback+0x7a>
	{
	case ICU_STATE_WAIT_FOR_RISINGEDGE1:
		TIM1_ClearCounterValue();
    36a4:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TIM1_ClearCounterValue>
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_FALLING);
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	62 e0       	ldi	r22, 0x02	; 2
    36ac:	0e 94 36 0b 	call	0x166c	; 0x166c <EXTI_SetMode>
		state = ICU_STATE_WAIT_FOR_FALLINGEDGE;
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	80 93 b9 00 	sts	0x00B9, r24
    36b6:	1a c0       	rjmp	.+52     	; 0x36ec <EXTI_Callback+0x7a>
		break;
	case ICU_STATE_WAIT_FOR_FALLINGEDGE:
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	63 e0       	ldi	r22, 0x03	; 3
    36bc:	0e 94 36 0b 	call	0x166c	; 0x166c <EXTI_SetMode>
		t_on = TIM1_GetCounterValueUs();
    36c0:	0e 94 42 07 	call	0xe84	; 0xe84 <TIM1_GetCounterValueUs>
    36c4:	90 93 b6 00 	sts	0x00B6, r25
    36c8:	80 93 b5 00 	sts	0x00B5, r24
		state = ICU_STATE_WAIT_FOR_RISINGEDGE2;
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	80 93 b9 00 	sts	0x00B9, r24
    36d2:	0c c0       	rjmp	.+24     	; 0x36ec <EXTI_Callback+0x7a>
		break;
	case ICU_STATE_WAIT_FOR_RISINGEDGE2:
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	63 e0       	ldi	r22, 0x03	; 3
    36d8:	0e 94 36 0b 	call	0x166c	; 0x166c <EXTI_SetMode>
		period = TIM1_GetCounterValueUs();
    36dc:	0e 94 42 07 	call	0xe84	; 0xe84 <TIM1_GetCounterValueUs>
    36e0:	90 93 b8 00 	sts	0x00B8, r25
    36e4:	80 93 b7 00 	sts	0x00B7, r24
		state = ICU_STATE_WAIT_FOR_RISINGEDGE1;
    36e8:	10 92 b9 00 	sts	0x00B9, r1
		break;
	}
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <Button_voidInit>:
#include "Button_private.h"
#include "Button_config.h"
#include "Button_interface.h"

void Button_voidInit()
{
    36f6:	df 93       	push	r29
    36f8:	cf 93       	push	r28
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(BUTTON1_PORT, BUTTON1_PIN, INPUT);
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	63 e0       	ldi	r22, 0x03	; 3
    3702:	40 e0       	ldi	r20, 0x00	; 0
    3704:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	DIO_PULLUP_PIN(BUTTON1_PORT, BUTTON1_PIN);
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	63 e0       	ldi	r22, 0x03	; 3
    370c:	41 e0       	ldi	r20, 0x01	; 1
    370e:	0e 94 cf 0c 	call	0x199e	; 0x199e <DIO_u8SetPinValue>
}
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <Button_u8GetStatus>:

u8 Button_u8GetStatus(u8 L_u8ButtonNo)
{
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	00 d0       	rcall	.+0      	; 0x371e <Button_u8GetStatus+0x6>
    371e:	0f 92       	push	r0
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    3724:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8ButtonNo)
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	88 2f       	mov	r24, r24
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	81 30       	cpi	r24, 0x01	; 1
    372e:	91 05       	cpc	r25, r1
    3730:	69 f4       	brne	.+26     	; 0x374c <Button_u8GetStatus+0x34>
	{
	case BUTTON1: return DIO_u8GetPinValue(BUTTON1_PORT, BUTTON1_PIN)? BUTTON_RELEASED:BUTTON_PRESSED;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	63 e0       	ldi	r22, 0x03	; 3
    3736:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <DIO_u8GetPinValue>
    373a:	8b 83       	std	Y+3, r24	; 0x03
    373c:	8b 81       	ldd	r24, Y+3	; 0x03
    373e:	88 23       	and	r24, r24
    3740:	11 f0       	breq	.+4      	; 0x3746 <Button_u8GetStatus+0x2e>
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	8b 83       	std	Y+3, r24	; 0x03
    3746:	8b 81       	ldd	r24, Y+3	; 0x03
    3748:	8a 83       	std	Y+2, r24	; 0x02
    374a:	02 c0       	rjmp	.+4      	; 0x3750 <Button_u8GetStatus+0x38>
	}
	return DIO_ERROR;
    374c:	8f ef       	ldi	r24, 0xFF	; 255
    374e:	8a 83       	std	Y+2, r24	; 0x02
    3750:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <Button_voidWaitForButton>:

void Button_voidWaitForButton(u8 L_u8ButtonNo)
{
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	0f 92       	push	r0
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8ButtonNo)
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	88 2f       	mov	r24, r24
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	81 30       	cpi	r24, 0x01	; 1
    3772:	91 05       	cpc	r25, r1
    3774:	31 f4       	brne	.+12     	; 0x3782 <Button_voidWaitForButton+0x24>
	{
	case BUTTON1: while(DIO_u8GetPinValue(BUTTON1_PORT, BUTTON1_PIN) == HIGH);break;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	63 e0       	ldi	r22, 0x03	; 3
    377a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <DIO_u8GetPinValue>
    377e:	81 30       	cpi	r24, 0x01	; 1
    3780:	d1 f3       	breq	.-12     	; 0x3776 <Button_voidWaitForButton+0x18>
	}
}
    3782:	0f 90       	pop	r0
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <main>:
//#define MASTER
#define SLAVE

u8 arr1[20]= {} ;
int main()
{
    378a:	0f 93       	push	r16
    378c:	1f 93       	push	r17
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	0f 92       	push	r0
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62

    DIO_u8SetPinDirection(PORTC , PIN0 , INPUT);
    3798:	83 e0       	ldi	r24, 0x03	; 3
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(PORTC , PIN1 , INPUT);
    37a2:	83 e0       	ldi	r24, 0x03	; 3
    37a4:	61 e0       	ldi	r22, 0x01	; 1
    37a6:	40 e0       	ldi	r20, 0x00	; 0
    37a8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_u8SetPinDirection>
	}

#endif

#ifdef SLAVE
	I2C_InitSlave();
    37ac:	0e 94 aa 09 	call	0x1354	; 0x1354 <I2C_InitSlave>

   u8 var =  0 ;
    37b0:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
			arr1[var] = I2C_ReceiveWihtAck();
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	08 2f       	mov	r16, r24
    37b6:	10 e0       	ldi	r17, 0x00	; 0
    37b8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <I2C_ReceiveWihtAck>
    37bc:	f8 01       	movw	r30, r16
    37be:	e6 54       	subi	r30, 0x46	; 70
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 83       	st	Z, r24
			var++ ;
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	8f 5f       	subi	r24, 0xFF	; 255
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	f3 cf       	rjmp	.-26     	; 0x37b2 <main+0x28>

000037cc <__mulsi3>:
    37cc:	62 9f       	mul	r22, r18
    37ce:	d0 01       	movw	r26, r0
    37d0:	73 9f       	mul	r23, r19
    37d2:	f0 01       	movw	r30, r0
    37d4:	82 9f       	mul	r24, r18
    37d6:	e0 0d       	add	r30, r0
    37d8:	f1 1d       	adc	r31, r1
    37da:	64 9f       	mul	r22, r20
    37dc:	e0 0d       	add	r30, r0
    37de:	f1 1d       	adc	r31, r1
    37e0:	92 9f       	mul	r25, r18
    37e2:	f0 0d       	add	r31, r0
    37e4:	83 9f       	mul	r24, r19
    37e6:	f0 0d       	add	r31, r0
    37e8:	74 9f       	mul	r23, r20
    37ea:	f0 0d       	add	r31, r0
    37ec:	65 9f       	mul	r22, r21
    37ee:	f0 0d       	add	r31, r0
    37f0:	99 27       	eor	r25, r25
    37f2:	72 9f       	mul	r23, r18
    37f4:	b0 0d       	add	r27, r0
    37f6:	e1 1d       	adc	r30, r1
    37f8:	f9 1f       	adc	r31, r25
    37fa:	63 9f       	mul	r22, r19
    37fc:	b0 0d       	add	r27, r0
    37fe:	e1 1d       	adc	r30, r1
    3800:	f9 1f       	adc	r31, r25
    3802:	bd 01       	movw	r22, r26
    3804:	cf 01       	movw	r24, r30
    3806:	11 24       	eor	r1, r1
    3808:	08 95       	ret

0000380a <__udivmodsi4>:
    380a:	a1 e2       	ldi	r26, 0x21	; 33
    380c:	1a 2e       	mov	r1, r26
    380e:	aa 1b       	sub	r26, r26
    3810:	bb 1b       	sub	r27, r27
    3812:	fd 01       	movw	r30, r26
    3814:	0d c0       	rjmp	.+26     	; 0x3830 <__udivmodsi4_ep>

00003816 <__udivmodsi4_loop>:
    3816:	aa 1f       	adc	r26, r26
    3818:	bb 1f       	adc	r27, r27
    381a:	ee 1f       	adc	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	a2 17       	cp	r26, r18
    3820:	b3 07       	cpc	r27, r19
    3822:	e4 07       	cpc	r30, r20
    3824:	f5 07       	cpc	r31, r21
    3826:	20 f0       	brcs	.+8      	; 0x3830 <__udivmodsi4_ep>
    3828:	a2 1b       	sub	r26, r18
    382a:	b3 0b       	sbc	r27, r19
    382c:	e4 0b       	sbc	r30, r20
    382e:	f5 0b       	sbc	r31, r21

00003830 <__udivmodsi4_ep>:
    3830:	66 1f       	adc	r22, r22
    3832:	77 1f       	adc	r23, r23
    3834:	88 1f       	adc	r24, r24
    3836:	99 1f       	adc	r25, r25
    3838:	1a 94       	dec	r1
    383a:	69 f7       	brne	.-38     	; 0x3816 <__udivmodsi4_loop>
    383c:	60 95       	com	r22
    383e:	70 95       	com	r23
    3840:	80 95       	com	r24
    3842:	90 95       	com	r25
    3844:	9b 01       	movw	r18, r22
    3846:	ac 01       	movw	r20, r24
    3848:	bd 01       	movw	r22, r26
    384a:	cf 01       	movw	r24, r30
    384c:	08 95       	ret

0000384e <__prologue_saves__>:
    384e:	2f 92       	push	r2
    3850:	3f 92       	push	r3
    3852:	4f 92       	push	r4
    3854:	5f 92       	push	r5
    3856:	6f 92       	push	r6
    3858:	7f 92       	push	r7
    385a:	8f 92       	push	r8
    385c:	9f 92       	push	r9
    385e:	af 92       	push	r10
    3860:	bf 92       	push	r11
    3862:	cf 92       	push	r12
    3864:	df 92       	push	r13
    3866:	ef 92       	push	r14
    3868:	ff 92       	push	r15
    386a:	0f 93       	push	r16
    386c:	1f 93       	push	r17
    386e:	cf 93       	push	r28
    3870:	df 93       	push	r29
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	ca 1b       	sub	r28, r26
    3878:	db 0b       	sbc	r29, r27
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	cd bf       	out	0x3d, r28	; 61
    3884:	09 94       	ijmp

00003886 <__epilogue_restores__>:
    3886:	2a 88       	ldd	r2, Y+18	; 0x12
    3888:	39 88       	ldd	r3, Y+17	; 0x11
    388a:	48 88       	ldd	r4, Y+16	; 0x10
    388c:	5f 84       	ldd	r5, Y+15	; 0x0f
    388e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3890:	7d 84       	ldd	r7, Y+13	; 0x0d
    3892:	8c 84       	ldd	r8, Y+12	; 0x0c
    3894:	9b 84       	ldd	r9, Y+11	; 0x0b
    3896:	aa 84       	ldd	r10, Y+10	; 0x0a
    3898:	b9 84       	ldd	r11, Y+9	; 0x09
    389a:	c8 84       	ldd	r12, Y+8	; 0x08
    389c:	df 80       	ldd	r13, Y+7	; 0x07
    389e:	ee 80       	ldd	r14, Y+6	; 0x06
    38a0:	fd 80       	ldd	r15, Y+5	; 0x05
    38a2:	0c 81       	ldd	r16, Y+4	; 0x04
    38a4:	1b 81       	ldd	r17, Y+3	; 0x03
    38a6:	aa 81       	ldd	r26, Y+2	; 0x02
    38a8:	b9 81       	ldd	r27, Y+1	; 0x01
    38aa:	ce 0f       	add	r28, r30
    38ac:	d1 1d       	adc	r29, r1
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	ed 01       	movw	r28, r26
    38ba:	08 95       	ret

000038bc <_exit>:
    38bc:	f8 94       	cli

000038be <__stop_program>:
    38be:	ff cf       	rjmp	.-2      	; 0x38be <__stop_program>
