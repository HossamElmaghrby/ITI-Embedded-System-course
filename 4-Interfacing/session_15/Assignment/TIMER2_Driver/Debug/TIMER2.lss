
TIMER2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000025f8  0000268c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000a2  008000a2  000026ce  2**0
                  ALLOC
  3 .debug_aranges 000003a0  00000000  00000000  000026ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000059b  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cec  00000000  00000000  00003009  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015e1  00000000  00000000  00005cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002204  00000000  00000000  000072d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c0  00000000  00000000  000094dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007fa  00000000  00000000  0000999c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000a196  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000a964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_1>
       8:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_2>
       c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_3>
      10:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 12 	call	0x24e8	; 0x24e8 <main>
      8a:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIM2_Init>:
u32_t preload;

void (* func_ptr)(void);

void TIM2_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	// CTC Mode
	CleartBit(TCCR2_Register, WGM20);
     b4e:	a5 e4       	ldi	r26, 0x45	; 69
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e5 e4       	ldi	r30, 0x45	; 69
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	SetBit(TCCR2_Register, WGM21);
     b5c:	a5 e4       	ldi	r26, 0x45	; 69
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e5 e4       	ldi	r30, 0x45	; 69
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24

	// Enable Overflow Interrupt
	SetBit(TIMSK_Register, OCIE2);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	8c 93       	st	X, r24


}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <TIM2_SetValueUS>:

void TIM2_SetValueUS(u32_t us)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <TIM2_SetValueUS+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <TIM2_SetValueUS+0x8>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	69 83       	std	Y+1, r22	; 0x01
     b8c:	7a 83       	std	Y+2, r23	; 0x02
     b8e:	8b 83       	std	Y+3, r24	; 0x03
     b90:	9c 83       	std	Y+4, r25	; 0x04
	// Prescaler 8
	// Timer Freq = 1MHz
	// Tick_Time = 1uS
	// OVF Time = 2^(8 bits) * 1uS = 256uS

	TCNT2_Register = 0;
     b92:	e4 e4       	ldi	r30, 0x44	; 68
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	10 82       	st	Z, r1
    NoCounts = 255 ;
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	80 93 ac 00 	sts	0x00AC, r24
     ba4:	90 93 ad 00 	sts	0x00AD, r25
     ba8:	a0 93 ae 00 	sts	0x00AE, r26
     bac:	b0 93 af 00 	sts	0x00AF, r27
     bb0:	13 c0       	rjmp	.+38     	; 0xbd8 <TIM2_SetValueUS+0x5a>
    while((us % NoCounts)!=0)
    {
    	NoCounts-- ;
     bb2:	80 91 ac 00 	lds	r24, 0x00AC
     bb6:	90 91 ad 00 	lds	r25, 0x00AD
     bba:	a0 91 ae 00 	lds	r26, 0x00AE
     bbe:	b0 91 af 00 	lds	r27, 0x00AF
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	a1 09       	sbc	r26, r1
     bc6:	b1 09       	sbc	r27, r1
     bc8:	80 93 ac 00 	sts	0x00AC, r24
     bcc:	90 93 ad 00 	sts	0x00AD, r25
     bd0:	a0 93 ae 00 	sts	0x00AE, r26
     bd4:	b0 93 af 00 	sts	0x00AF, r27
	// Tick_Time = 1uS
	// OVF Time = 2^(8 bits) * 1uS = 256uS

	TCNT2_Register = 0;
    NoCounts = 255 ;
    while((us % NoCounts)!=0)
     bd8:	20 91 ac 00 	lds	r18, 0x00AC
     bdc:	30 91 ad 00 	lds	r19, 0x00AD
     be0:	40 91 ae 00 	lds	r20, 0x00AE
     be4:	50 91 af 00 	lds	r21, 0x00AF
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	ab 81       	ldd	r26, Y+3	; 0x03
     bee:	bc 81       	ldd	r27, Y+4	; 0x04
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 a1 12 	call	0x2542	; 0x2542 <__udivmodsi4>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	a1 05       	cpc	r26, r1
     c00:	b1 05       	cpc	r27, r1
     c02:	b9 f6       	brne	.-82     	; 0xbb2 <TIM2_SetValueUS+0x34>
    {
    	NoCounts-- ;
    }
    OCR2_Register = NoCounts ;
     c04:	e3 e4       	ldi	r30, 0x43	; 67
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 91 ac 00 	lds	r24, 0x00AC
     c0c:	90 91 ad 00 	lds	r25, 0x00AD
     c10:	a0 91 ae 00 	lds	r26, 0x00AE
     c14:	b0 91 af 00 	lds	r27, 0x00AF
     c18:	80 83       	st	Z, r24
    NoCounts = us / NoCounts ;
     c1a:	20 91 ac 00 	lds	r18, 0x00AC
     c1e:	30 91 ad 00 	lds	r19, 0x00AD
     c22:	40 91 ae 00 	lds	r20, 0x00AE
     c26:	50 91 af 00 	lds	r21, 0x00AF
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	ab 81       	ldd	r26, Y+3	; 0x03
     c30:	bc 81       	ldd	r27, Y+4	; 0x04
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 a1 12 	call	0x2542	; 0x2542 <__udivmodsi4>
     c3a:	da 01       	movw	r26, r20
     c3c:	c9 01       	movw	r24, r18
     c3e:	80 93 ac 00 	sts	0x00AC, r24
     c42:	90 93 ad 00 	sts	0x00AD, r25
     c46:	a0 93 ae 00 	sts	0x00AE, r26
     c4a:	b0 93 af 00 	sts	0x00AF, r27
	// Set Clock Source (Prescaler: 8)
	CleartBit(TCCR2_Register, CS20);
     c4e:	a5 e4       	ldi	r26, 0x45	; 69
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e5 e4       	ldi	r30, 0x45	; 69
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8e 7f       	andi	r24, 0xFE	; 254
     c5a:	8c 93       	st	X, r24
	SetBit(TCCR2_Register, CS21);
     c5c:	a5 e4       	ldi	r26, 0x45	; 69
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e5 e4       	ldi	r30, 0x45	; 69
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	82 60       	ori	r24, 0x02	; 2
     c68:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS22);
     c6a:	a5 e4       	ldi	r26, 0x45	; 69
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e5 e4       	ldi	r30, 0x45	; 69
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8b 7f       	andi	r24, 0xFB	; 251
     c76:	8c 93       	st	X, r24
}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <TIM2_Disable>:

void TIM2_Disable(void)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer (No clk)
	CleartBit(TCCR2_Register, CS20);
     c8e:	a5 e4       	ldi	r26, 0x45	; 69
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e5 e4       	ldi	r30, 0x45	; 69
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS21);
     c9c:	a5 e4       	ldi	r26, 0x45	; 69
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e5 e4       	ldi	r30, 0x45	; 69
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS22);
     caa:	a5 e4       	ldi	r26, 0x45	; 69
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e5 e4       	ldi	r30, 0x45	; 69
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8b 7f       	andi	r24, 0xFB	; 251
     cb6:	8c 93       	st	X, r24
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <TIM2_SetOVFCallback>:

void TIM2_SetOVFCallback(void (* ptr)(void))
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <TIM2_SetOVFCallback+0x6>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	89 83       	std	Y+1, r24	; 0x01
	func_ptr = ptr;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	90 93 b1 00 	sts	0x00B1, r25
     cd4:	80 93 b0 00 	sts	0x00B0, r24
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <__vector_4>:

void __vector_4(void)
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	static u32_t counter = 0;
	if(counter == NoCounts)
     d0c:	20 91 a2 00 	lds	r18, 0x00A2
     d10:	30 91 a3 00 	lds	r19, 0x00A3
     d14:	40 91 a4 00 	lds	r20, 0x00A4
     d18:	50 91 a5 00 	lds	r21, 0x00A5
     d1c:	80 91 ac 00 	lds	r24, 0x00AC
     d20:	90 91 ad 00 	lds	r25, 0x00AD
     d24:	a0 91 ae 00 	lds	r26, 0x00AE
     d28:	b0 91 af 00 	lds	r27, 0x00AF
     d2c:	28 17       	cp	r18, r24
     d2e:	39 07       	cpc	r19, r25
     d30:	4a 07       	cpc	r20, r26
     d32:	5b 07       	cpc	r21, r27
     d34:	81 f4       	brne	.+32     	; 0xd56 <__vector_4+0x74>
	{
		func_ptr();
     d36:	e0 91 b0 00 	lds	r30, 0x00B0
     d3a:	f0 91 b1 00 	lds	r31, 0x00B1
     d3e:	09 95       	icall
		counter = 0;
     d40:	10 92 a2 00 	sts	0x00A2, r1
     d44:	10 92 a3 00 	sts	0x00A3, r1
     d48:	10 92 a4 00 	sts	0x00A4, r1
     d4c:	10 92 a5 00 	sts	0x00A5, r1
		TCNT2_Register = 0;
     d50:	e4 e4       	ldi	r30, 0x44	; 68
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	10 82       	st	Z, r1
	}
	counter++;
     d56:	80 91 a2 00 	lds	r24, 0x00A2
     d5a:	90 91 a3 00 	lds	r25, 0x00A3
     d5e:	a0 91 a4 00 	lds	r26, 0x00A4
     d62:	b0 91 a5 00 	lds	r27, 0x00A5
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	a1 1d       	adc	r26, r1
     d6a:	b1 1d       	adc	r27, r1
     d6c:	80 93 a2 00 	sts	0x00A2, r24
     d70:	90 93 a3 00 	sts	0x00A3, r25
     d74:	a0 93 a4 00 	sts	0x00A4, r26
     d78:	b0 93 a5 00 	sts	0x00A5, r27
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <GIE_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"


void GIE_Enable(void)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG_Register, I_Bit);
     daa:	af e5       	ldi	r26, 0x5F	; 95
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ef e5       	ldi	r30, 0x5F	; 95
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	8c 93       	st	X, r24
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <GIE_Disable>:

void GIE_Disable(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	CleartBit(SREG_Register, I_Bit);
     dc6:	af e5       	ldi	r26, 0x5F	; 95
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ef e5       	ldi	r30, 0x5F	; 95
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	8c 93       	st	X, r24
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <EXTI_Init>:
#include "EXTI_pirvate.h"



void EXTI_Init()
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	CleartBit(MCUCR_Register ,ISC01);
#elif EXTI0_MODE  == EXTI_FALLING
	CleartBit(MCUCR_Register ,ISC00);
	SetBit(MCUCR_Register ,ISC01);
#elif EXTI0_MODE  == EXTI_RISING
	SetBit(MCUCR_Register ,ISC00);
     de2:	a5 e5       	ldi	r26, 0x55	; 85
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e5       	ldi	r30, 0x55	; 85
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	8c 93       	st	X, r24
	SetBit(MCUCR_Register ,ISC01);
     df0:	a5 e5       	ldi	r26, 0x55	; 85
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e5       	ldi	r30, 0x55	; 85
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	82 60       	ori	r24, 0x02	; 2
     dfc:	8c 93       	st	X, r24
	CleartBit(MCUCR_Register ,ISC11);
#elif EXTI1_MODE  == EXTI_ON_CHANGE
	SetBit(MCUCR_Register ,ISC00));
	CleartBit(MCUCR_Register ,ISC11);
#elif EXTI1_MODE  == EXTI_FALLING
	CleartBit(MCUCR_Register ,ISC00);
     dfe:	a5 e5       	ldi	r26, 0x55	; 85
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e5 e5       	ldi	r30, 0x55	; 85
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	8c 93       	st	X, r24
	SetBit(MCUCR_Register ,ISC11);
     e0c:	a5 e5       	ldi	r26, 0x55	; 85
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e5 e5       	ldi	r30, 0x55	; 85
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	88 60       	ori	r24, 0x08	; 8
     e18:	8c 93       	st	X, r24


#if EXTI2_MODE  == EXTI_FALLING
	CleartBit(MCUCSR_Register ,ISC2);
#elif EXTI2_MODE  == EXTI_RISING
	SetBit(MCUCSR_Register ,ISC2);
     e1a:	a4 e5       	ldi	r26, 0x54	; 84
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e4 e5       	ldi	r30, 0x54	; 84
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 64       	ori	r24, 0x40	; 64
     e26:	8c 93       	st	X, r24

#endif

}
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <EXTI_Enable>:


void EXTI_Enable(u8_t EXTI_Num)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <EXTI_Enable+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Num)
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	3b 83       	std	Y+3, r19	; 0x03
     e44:	2a 83       	std	Y+2, r18	; 0x02
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	91 05       	cpc	r25, r1
     e4e:	89 f0       	breq	.+34     	; 0xe72 <EXTI_Enable+0x44>
     e50:	2a 81       	ldd	r18, Y+2	; 0x02
     e52:	3b 81       	ldd	r19, Y+3	; 0x03
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	a1 f0       	breq	.+40     	; 0xe82 <EXTI_Enable+0x54>
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	9b 81       	ldd	r25, Y+3	; 0x03
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	b9 f4       	brne	.+46     	; 0xe90 <EXTI_Enable+0x62>
	{
	case EXTI0 : SetBit(GICR_Register ,INT0);break ;
     e62:	ab e5       	ldi	r26, 0x5B	; 91
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	eb e5       	ldi	r30, 0x5B	; 91
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 64       	ori	r24, 0x40	; 64
     e6e:	8c 93       	st	X, r24
     e70:	0f c0       	rjmp	.+30     	; 0xe90 <EXTI_Enable+0x62>
	case EXTI1 : SetBit(GICR_Register ,INT1);break ;
     e72:	ab e5       	ldi	r26, 0x5B	; 91
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	eb e5       	ldi	r30, 0x5B	; 91
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	8c 93       	st	X, r24
     e80:	07 c0       	rjmp	.+14     	; 0xe90 <EXTI_Enable+0x62>
	case EXTI2 : SetBit(GICR_Register ,INT2);break ;
     e82:	ab e5       	ldi	r26, 0x5B	; 91
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	eb e5       	ldi	r30, 0x5B	; 91
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 62       	ori	r24, 0x20	; 32
     e8e:	8c 93       	st	X, r24
	}
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <EXTI_Disable>:

void EXTI_Disable(u8_t EXTI_Num)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <EXTI_Disable+0x6>
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Num)
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	3b 83       	std	Y+3, r19	; 0x03
     eb2:	2a 83       	std	Y+2, r18	; 0x02
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	9b 81       	ldd	r25, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	89 f0       	breq	.+34     	; 0xee0 <EXTI_Disable+0x44>
     ebe:	2a 81       	ldd	r18, Y+2	; 0x02
     ec0:	3b 81       	ldd	r19, Y+3	; 0x03
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	a1 f0       	breq	.+40     	; 0xef0 <EXTI_Disable+0x54>
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	9b 81       	ldd	r25, Y+3	; 0x03
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	b9 f4       	brne	.+46     	; 0xefe <EXTI_Disable+0x62>
	{
	case EXTI0 : CleartBit(GICR_Register ,INT0);break ;
     ed0:	ab e5       	ldi	r26, 0x5B	; 91
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	eb e5       	ldi	r30, 0x5B	; 91
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7b       	andi	r24, 0xBF	; 191
     edc:	8c 93       	st	X, r24
     ede:	0f c0       	rjmp	.+30     	; 0xefe <EXTI_Disable+0x62>
	case EXTI1 : CleartBit(GICR_Register ,INT1);break ;
     ee0:	ab e5       	ldi	r26, 0x5B	; 91
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e5       	ldi	r30, 0x5B	; 91
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8f 77       	andi	r24, 0x7F	; 127
     eec:	8c 93       	st	X, r24
     eee:	07 c0       	rjmp	.+14     	; 0xefe <EXTI_Disable+0x62>
	case EXTI2 : CleartBit(GICR_Register ,INT2);break ;
     ef0:	ab e5       	ldi	r26, 0x5B	; 91
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	eb e5       	ldi	r30, 0x5B	; 91
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 7d       	andi	r24, 0xDF	; 223
     efc:	8c 93       	st	X, r24
	}
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <Exti_setCallback>:

void Exti_setCallback(u8_t EXTI_num,void (*ptr)())
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <Exti_setCallback+0x6>
     f10:	00 d0       	rcall	.+0      	; 0xf12 <Exti_setCallback+0x8>
     f12:	0f 92       	push	r0
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	7b 83       	std	Y+3, r23	; 0x03
     f1c:	6a 83       	std	Y+2, r22	; 0x02
	switch(EXTI_num)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3d 83       	std	Y+5, r19	; 0x05
     f26:	2c 83       	std	Y+4, r18	; 0x04
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	81 f0       	breq	.+32     	; 0xf52 <Exti_setCallback+0x48>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	91 f0       	breq	.+36     	; 0xf60 <Exti_setCallback+0x56>
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	9d 81       	ldd	r25, Y+5	; 0x05
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	a1 f4       	brne	.+40     	; 0xf6c <Exti_setCallback+0x62>
	{
	case EXTI0 : ptr1 = ptr;break ;
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	9b 81       	ldd	r25, Y+3	; 0x03
     f48:	90 93 b5 00 	sts	0x00B5, r25
     f4c:	80 93 b4 00 	sts	0x00B4, r24
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <Exti_setCallback+0x62>
	case EXTI1 : ptr2 = ptr;break ;
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	9b 81       	ldd	r25, Y+3	; 0x03
     f56:	90 93 b7 00 	sts	0x00B7, r25
     f5a:	80 93 b6 00 	sts	0x00B6, r24
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <Exti_setCallback+0x62>
	case EXTI2 : ptr3 = ptr;break ;
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	9b 81       	ldd	r25, Y+3	; 0x03
     f64:	90 93 b3 00 	sts	0x00B3, r25
     f68:	80 93 b2 00 	sts	0x00B2, r24
	}
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <__vector_1>:
void __vector_1(void)
{
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	ptr1();
     fa6:	e0 91 b4 00 	lds	r30, 0x00B4
     faa:	f0 91 b5 00 	lds	r31, 0x00B5
     fae:	09 95       	icall
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_2>:
void __vector_2(void)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	ptr2();
    1000:	e0 91 b6 00 	lds	r30, 0x00B6
    1004:	f0 91 b7 00 	lds	r31, 0x00B7
    1008:	09 95       	icall
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	bf 91       	pop	r27
    1014:	af 91       	pop	r26
    1016:	9f 91       	pop	r25
    1018:	8f 91       	pop	r24
    101a:	7f 91       	pop	r23
    101c:	6f 91       	pop	r22
    101e:	5f 91       	pop	r21
    1020:	4f 91       	pop	r20
    1022:	3f 91       	pop	r19
    1024:	2f 91       	pop	r18
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_3>:
void __vector_3(void)
{
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	ptr3();
    105a:	e0 91 b2 00 	lds	r30, 0x00B2
    105e:	f0 91 b3 00 	lds	r31, 0x00B3
    1062:	09 95       	icall
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <DIO_u8SetPinValue>:

#include "DIO_private.h"
#include "DIO_interface.h"

u8_t DIO_u8SetPinValue(u8_t L_u8Port ,u8_t L_u8Pin ,u8_t L_u8Value)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	28 97       	sbiw	r28, 0x08	; 8
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	6a 83       	std	Y+2, r22	; 0x02
    10a2:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Value == HIGH)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	09 f0       	breq	.+2      	; 0x10ac <DIO_u8SetPinValue+0x22>
    10aa:	71 c0       	rjmp	.+226    	; 0x118e <DIO_u8SetPinValue+0x104>
	{
		switch(L_u8Port)
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	38 87       	std	Y+8, r19	; 0x08
    10b4:	2f 83       	std	Y+7, r18	; 0x07
    10b6:	8f 81       	ldd	r24, Y+7	; 0x07
    10b8:	98 85       	ldd	r25, Y+8	; 0x08
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	49 f1       	breq	.+82     	; 0x1112 <DIO_u8SetPinValue+0x88>
    10c0:	2f 81       	ldd	r18, Y+7	; 0x07
    10c2:	38 85       	ldd	r19, Y+8	; 0x08
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <DIO_u8SetPinValue+0x4a>
    10ca:	8f 81       	ldd	r24, Y+7	; 0x07
    10cc:	98 85       	ldd	r25, Y+8	; 0x08
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	61 f0       	breq	.+24     	; 0x10ea <DIO_u8SetPinValue+0x60>
    10d2:	5b c0       	rjmp	.+182    	; 0x118a <DIO_u8SetPinValue+0x100>
    10d4:	2f 81       	ldd	r18, Y+7	; 0x07
    10d6:	38 85       	ldd	r19, Y+8	; 0x08
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	71 f1       	breq	.+92     	; 0x113a <DIO_u8SetPinValue+0xb0>
    10de:	8f 81       	ldd	r24, Y+7	; 0x07
    10e0:	98 85       	ldd	r25, Y+8	; 0x08
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	e9 f1       	breq	.+122    	; 0x1162 <DIO_u8SetPinValue+0xd8>
    10e8:	50 c0       	rjmp	.+160    	; 0x118a <DIO_u8SetPinValue+0x100>
		{
		case PORTA : SetBit(PORTA_REG , L_u8Pin); break ;
    10ea:	ab e3       	ldi	r26, 0x3B	; 59
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	eb e3       	ldi	r30, 0x3B	; 59
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_u8SetPinValue+0x7e>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_u8SetPinValue+0x7a>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	ba c0       	rjmp	.+372    	; 0x1286 <DIO_u8SetPinValue+0x1fc>
		case PORTB : SetBit(PORTB_REG , L_u8Pin); break ;
    1112:	a8 e3       	ldi	r26, 0x38	; 56
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8SetPinValue+0xa6>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_u8SetPinValue+0xa2>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	a6 c0       	rjmp	.+332    	; 0x1286 <DIO_u8SetPinValue+0x1fc>
		case PORTC : SetBit(PORTC_REG , L_u8Pin); break ;
    113a:	a5 e3       	ldi	r26, 0x35	; 53
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e3       	ldi	r30, 0x35	; 53
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_u8SetPinValue+0xce>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_u8SetPinValue+0xca>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	92 c0       	rjmp	.+292    	; 0x1286 <DIO_u8SetPinValue+0x1fc>
		case PORTD : SetBit(PORTD_REG , L_u8Pin); break ;
    1162:	a2 e3       	ldi	r26, 0x32	; 50
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e2 e3       	ldi	r30, 0x32	; 50
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_u8SetPinValue+0xf6>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_u8SetPinValue+0xf2>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	7e c0       	rjmp	.+252    	; 0x1286 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    118a:	1e 82       	std	Y+6, r1	; 0x06
    118c:	7e c0       	rjmp	.+252    	; 0x128a <DIO_u8SetPinValue+0x200>
		}
	}
	else if(L_u8Value == LOW)
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 23       	and	r24, r24
    1192:	09 f0       	breq	.+2      	; 0x1196 <DIO_u8SetPinValue+0x10c>
    1194:	76 c0       	rjmp	.+236    	; 0x1282 <DIO_u8SetPinValue+0x1f8>
	{
		switch(L_u8Port)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3d 83       	std	Y+5, r19	; 0x05
    119e:	2c 83       	std	Y+4, r18	; 0x04
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	59 f1       	breq	.+86     	; 0x1200 <DIO_u8SetPinValue+0x176>
    11aa:	2c 81       	ldd	r18, Y+4	; 0x04
    11ac:	3d 81       	ldd	r19, Y+5	; 0x05
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <DIO_u8SetPinValue+0x134>
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <DIO_u8SetPinValue+0x14c>
    11bc:	60 c0       	rjmp	.+192    	; 0x127e <DIO_u8SetPinValue+0x1f4>
    11be:	2c 81       	ldd	r18, Y+4	; 0x04
    11c0:	3d 81       	ldd	r19, Y+5	; 0x05
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	89 f1       	breq	.+98     	; 0x122a <DIO_u8SetPinValue+0x1a0>
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <DIO_u8SetPinValue+0x14a>
    11d2:	40 c0       	rjmp	.+128    	; 0x1254 <DIO_u8SetPinValue+0x1ca>
    11d4:	54 c0       	rjmp	.+168    	; 0x127e <DIO_u8SetPinValue+0x1f4>
		{
		case PORTA : CleartBit(PORTA_REG , L_u8Pin); break ;
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_u8SetPinValue+0x16a>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_u8SetPinValue+0x166>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	43 c0       	rjmp	.+134    	; 0x1286 <DIO_u8SetPinValue+0x1fc>
		case PORTB : CleartBit(PORTB_REG , L_u8Pin); break ;
    1200:	a8 e3       	ldi	r26, 0x38	; 56
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e8 e3       	ldi	r30, 0x38	; 56
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_u8SetPinValue+0x194>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_u8SetPinValue+0x190>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	2e c0       	rjmp	.+92     	; 0x1286 <DIO_u8SetPinValue+0x1fc>
		case PORTC : CleartBit(PORTC_REG , L_u8Pin); break ;
    122a:	a5 e3       	ldi	r26, 0x35	; 53
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_u8SetPinValue+0x1be>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_u8SetPinValue+0x1ba>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	19 c0       	rjmp	.+50     	; 0x1286 <DIO_u8SetPinValue+0x1fc>
		case PORTD : CleartBit(PORTD_REG , L_u8Pin); break ;
    1254:	a2 e3       	ldi	r26, 0x32	; 50
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e2 e3       	ldi	r30, 0x32	; 50
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_u8SetPinValue+0x1e8>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_u8SetPinValue+0x1e4>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    127e:	1e 82       	std	Y+6, r1	; 0x06
    1280:	04 c0       	rjmp	.+8      	; 0x128a <DIO_u8SetPinValue+0x200>
		}
	}
	else
	{
		return ERROR ;
    1282:	1e 82       	std	Y+6, r1	; 0x06
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_u8SetPinValue+0x200>
	}
	return NO_ERROR ;
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    128c:	28 96       	adiw	r28, 0x08	; 8
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <DIO_u8SetPinDirection>:
u8_t DIO_u8SetPinDirection(u8_t L_u8Port ,u8_t L_u8Pin ,u8_t L_u8Direction)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	28 97       	sbiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
    12b6:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Direction== OUTPUT)
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <DIO_u8SetPinDirection+0x22>
    12be:	71 c0       	rjmp	.+226    	; 0x13a2 <DIO_u8SetPinDirection+0x104>
	{
		switch(L_u8Port)
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	38 87       	std	Y+8, r19	; 0x08
    12c8:	2f 83       	std	Y+7, r18	; 0x07
    12ca:	8f 81       	ldd	r24, Y+7	; 0x07
    12cc:	98 85       	ldd	r25, Y+8	; 0x08
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	49 f1       	breq	.+82     	; 0x1326 <DIO_u8SetPinDirection+0x88>
    12d4:	2f 81       	ldd	r18, Y+7	; 0x07
    12d6:	38 85       	ldd	r19, Y+8	; 0x08
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <DIO_u8SetPinDirection+0x4a>
    12de:	8f 81       	ldd	r24, Y+7	; 0x07
    12e0:	98 85       	ldd	r25, Y+8	; 0x08
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 f0       	breq	.+24     	; 0x12fe <DIO_u8SetPinDirection+0x60>
    12e6:	5b c0       	rjmp	.+182    	; 0x139e <DIO_u8SetPinDirection+0x100>
    12e8:	2f 81       	ldd	r18, Y+7	; 0x07
    12ea:	38 85       	ldd	r19, Y+8	; 0x08
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	71 f1       	breq	.+92     	; 0x134e <DIO_u8SetPinDirection+0xb0>
    12f2:	8f 81       	ldd	r24, Y+7	; 0x07
    12f4:	98 85       	ldd	r25, Y+8	; 0x08
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	e9 f1       	breq	.+122    	; 0x1376 <DIO_u8SetPinDirection+0xd8>
    12fc:	50 c0       	rjmp	.+160    	; 0x139e <DIO_u8SetPinDirection+0x100>
		{
		case PORTA : SetBit(DDRA_REG , L_u8Pin); break ;
    12fe:	aa e3       	ldi	r26, 0x3A	; 58
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ea e3       	ldi	r30, 0x3A	; 58
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_u8SetPinDirection+0x7e>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_u8SetPinDirection+0x7a>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	ba c0       	rjmp	.+372    	; 0x149a <DIO_u8SetPinDirection+0x1fc>
		case PORTB : SetBit(DDRB_REG , L_u8Pin); break ;
    1326:	a7 e3       	ldi	r26, 0x37	; 55
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e7 e3       	ldi	r30, 0x37	; 55
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_u8SetPinDirection+0xa6>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_u8SetPinDirection+0xa2>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	a6 c0       	rjmp	.+332    	; 0x149a <DIO_u8SetPinDirection+0x1fc>
		case PORTC : SetBit(DDRC_REG , L_u8Pin); break ;
    134e:	a4 e3       	ldi	r26, 0x34	; 52
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_u8SetPinDirection+0xce>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_u8SetPinDirection+0xca>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	92 c0       	rjmp	.+292    	; 0x149a <DIO_u8SetPinDirection+0x1fc>
		case PORTD : SetBit(DDRD_REG , L_u8Pin); break ;
    1376:	a1 e3       	ldi	r26, 0x31	; 49
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 e3       	ldi	r30, 0x31	; 49
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_u8SetPinDirection+0xf6>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_u8SetPinDirection+0xf2>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	7e c0       	rjmp	.+252    	; 0x149a <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    139e:	1e 82       	std	Y+6, r1	; 0x06
    13a0:	7e c0       	rjmp	.+252    	; 0x149e <DIO_u8SetPinDirection+0x200>
		}
	}
	else if(L_u8Direction == INPUT)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 23       	and	r24, r24
    13a6:	09 f0       	breq	.+2      	; 0x13aa <DIO_u8SetPinDirection+0x10c>
    13a8:	76 c0       	rjmp	.+236    	; 0x1496 <DIO_u8SetPinDirection+0x1f8>
	{
		switch(L_u8Port)
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	3d 83       	std	Y+5, r19	; 0x05
    13b2:	2c 83       	std	Y+4, r18	; 0x04
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	9d 81       	ldd	r25, Y+5	; 0x05
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	59 f1       	breq	.+86     	; 0x1414 <DIO_u8SetPinDirection+0x176>
    13be:	2c 81       	ldd	r18, Y+4	; 0x04
    13c0:	3d 81       	ldd	r19, Y+5	; 0x05
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <DIO_u8SetPinDirection+0x134>
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	9d 81       	ldd	r25, Y+5	; 0x05
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	69 f0       	breq	.+26     	; 0x13ea <DIO_u8SetPinDirection+0x14c>
    13d0:	60 c0       	rjmp	.+192    	; 0x1492 <DIO_u8SetPinDirection+0x1f4>
    13d2:	2c 81       	ldd	r18, Y+4	; 0x04
    13d4:	3d 81       	ldd	r19, Y+5	; 0x05
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	89 f1       	breq	.+98     	; 0x143e <DIO_u8SetPinDirection+0x1a0>
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	9d 81       	ldd	r25, Y+5	; 0x05
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <DIO_u8SetPinDirection+0x14a>
    13e6:	40 c0       	rjmp	.+128    	; 0x1468 <DIO_u8SetPinDirection+0x1ca>
    13e8:	54 c0       	rjmp	.+168    	; 0x1492 <DIO_u8SetPinDirection+0x1f4>
		{
		case PORTA : CleartBit(DDRA_REG , L_u8Pin); break ;
    13ea:	aa e3       	ldi	r26, 0x3A	; 58
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ea e3       	ldi	r30, 0x3A	; 58
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_u8SetPinDirection+0x16a>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_u8SetPinDirection+0x166>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	43 c0       	rjmp	.+134    	; 0x149a <DIO_u8SetPinDirection+0x1fc>
		case PORTB : CleartBit(DDRB_REG , L_u8Pin); break ;
    1414:	a7 e3       	ldi	r26, 0x37	; 55
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e7 e3       	ldi	r30, 0x37	; 55
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_u8SetPinDirection+0x194>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_u8SetPinDirection+0x190>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	2e c0       	rjmp	.+92     	; 0x149a <DIO_u8SetPinDirection+0x1fc>
		case PORTC : CleartBit(DDRC_REG , L_u8Pin); break ;
    143e:	a4 e3       	ldi	r26, 0x34	; 52
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e4 e3       	ldi	r30, 0x34	; 52
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_u8SetPinDirection+0x1be>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_u8SetPinDirection+0x1ba>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	19 c0       	rjmp	.+50     	; 0x149a <DIO_u8SetPinDirection+0x1fc>
		case PORTD : CleartBit(DDRD_REG , L_u8Pin); break ;
    1468:	a1 e3       	ldi	r26, 0x31	; 49
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e1 e3       	ldi	r30, 0x31	; 49
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_u8SetPinDirection+0x1e8>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_u8SetPinDirection+0x1e4>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	04 c0       	rjmp	.+8      	; 0x149a <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    1492:	1e 82       	std	Y+6, r1	; 0x06
    1494:	04 c0       	rjmp	.+8      	; 0x149e <DIO_u8SetPinDirection+0x200>
		}
	}
	else
	{
		return ERROR ;
    1496:	1e 82       	std	Y+6, r1	; 0x06
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_u8SetPinDirection+0x200>
	}

	return NO_ERROR ;
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    14a0:	28 96       	adiw	r28, 0x08	; 8
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <DIO_u8GetBit>:

u8_t DIO_u8GetBit(u8_t L_u8Port ,u8_t L_u8Pin )
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <DIO_u8GetBit+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <DIO_u8GetBit+0x8>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <DIO_u8GetBit+0xa>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	8a 83       	std	Y+2, r24	; 0x02
    14c2:	6b 83       	std	Y+3, r22	; 0x03
	u8_t L_u8pinval ;
	switch(L_u8Port)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3e 83       	std	Y+6, r19	; 0x06
    14cc:	2d 83       	std	Y+5, r18	; 0x05
    14ce:	4d 81       	ldd	r20, Y+5	; 0x05
    14d0:	5e 81       	ldd	r21, Y+6	; 0x06
    14d2:	41 30       	cpi	r20, 0x01	; 1
    14d4:	51 05       	cpc	r21, r1
    14d6:	41 f1       	breq	.+80     	; 0x1528 <DIO_u8GetBit+0x76>
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	91 05       	cpc	r25, r1
    14e0:	34 f4       	brge	.+12     	; 0x14ee <DIO_u8GetBit+0x3c>
    14e2:	2d 81       	ldd	r18, Y+5	; 0x05
    14e4:	3e 81       	ldd	r19, Y+6	; 0x06
    14e6:	21 15       	cp	r18, r1
    14e8:	31 05       	cpc	r19, r1
    14ea:	61 f0       	breq	.+24     	; 0x1504 <DIO_u8GetBit+0x52>
    14ec:	53 c0       	rjmp	.+166    	; 0x1594 <DIO_u8GetBit+0xe2>
    14ee:	4d 81       	ldd	r20, Y+5	; 0x05
    14f0:	5e 81       	ldd	r21, Y+6	; 0x06
    14f2:	42 30       	cpi	r20, 0x02	; 2
    14f4:	51 05       	cpc	r21, r1
    14f6:	51 f1       	breq	.+84     	; 0x154c <DIO_u8GetBit+0x9a>
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	b9 f1       	breq	.+110    	; 0x1570 <DIO_u8GetBit+0xbe>
    1502:	48 c0       	rjmp	.+144    	; 0x1594 <DIO_u8GetBit+0xe2>
	{
	case PORTA :L_u8pinval = GetBit(PINA_REG , L_u8Pin); break ;
    1504:	e9 e3       	ldi	r30, 0x39	; 57
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_u8GetBit+0x6a>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_u8GetBit+0x66>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	38 c0       	rjmp	.+112    	; 0x1598 <DIO_u8GetBit+0xe6>
	case PORTB :L_u8pinval = GetBit(PINB_REG , L_u8Pin); break ;
    1528:	e6 e3       	ldi	r30, 0x36	; 54
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a9 01       	movw	r20, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_u8GetBit+0x8e>
    153c:	55 95       	asr	r21
    153e:	47 95       	ror	r20
    1540:	8a 95       	dec	r24
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_u8GetBit+0x8a>
    1544:	ca 01       	movw	r24, r20
    1546:	81 70       	andi	r24, 0x01	; 1
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	26 c0       	rjmp	.+76     	; 0x1598 <DIO_u8GetBit+0xe6>
	case PORTC :L_u8pinval = GetBit(PINC_REG , L_u8Pin); break ;
    154c:	e3 e3       	ldi	r30, 0x33	; 51
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_u8GetBit+0xb2>
    1560:	55 95       	asr	r21
    1562:	47 95       	ror	r20
    1564:	8a 95       	dec	r24
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_u8GetBit+0xae>
    1568:	ca 01       	movw	r24, r20
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	14 c0       	rjmp	.+40     	; 0x1598 <DIO_u8GetBit+0xe6>
	case PORTD :L_u8pinval = GetBit(PIND_REG , L_u8Pin); break ;
    1570:	e0 e3       	ldi	r30, 0x30	; 48
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a9 01       	movw	r20, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_u8GetBit+0xd6>
    1584:	55 95       	asr	r21
    1586:	47 95       	ror	r20
    1588:	8a 95       	dec	r24
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_u8GetBit+0xd2>
    158c:	ca 01       	movw	r24, r20
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8GetBit+0xe6>
	default : return ERROR ; break ;
    1594:	1c 82       	std	Y+4, r1	; 0x04
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_u8GetBit+0xea>
	}

	return L_u8pinval ;
    1598:	59 81       	ldd	r21, Y+1	; 0x01
    159a:	5c 83       	std	Y+4, r21	; 0x04
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    159e:	26 96       	adiw	r28, 0x06	; 6
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <DIO_u8GetPort>:

u8_t DIO_u8GetPort(u8_t L_u8Port )
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <DIO_u8GetPort+0x6>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <DIO_u8GetPort+0x8>
    15b8:	0f 92       	push	r0
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	8a 83       	std	Y+2, r24	; 0x02
	u8_t L_u8pinval ;
	switch(L_u8Port)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3d 83       	std	Y+5, r19	; 0x05
    15c8:	2c 83       	std	Y+4, r18	; 0x04
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	d1 f0       	breq	.+52     	; 0x1608 <DIO_u8GetPort+0x58>
    15d4:	2c 81       	ldd	r18, Y+4	; 0x04
    15d6:	3d 81       	ldd	r19, Y+5	; 0x05
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <DIO_u8GetPort+0x38>
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	61 f0       	breq	.+24     	; 0x15fe <DIO_u8GetPort+0x4e>
    15e6:	1f c0       	rjmp	.+62     	; 0x1626 <DIO_u8GetPort+0x76>
    15e8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ea:	3d 81       	ldd	r19, Y+5	; 0x05
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <DIO_u8GetPort+0x62>
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	81 f0       	breq	.+32     	; 0x161c <DIO_u8GetPort+0x6c>
    15fc:	14 c0       	rjmp	.+40     	; 0x1626 <DIO_u8GetPort+0x76>
	{
	case PORTA :L_u8pinval = PINA_REG; break ;
    15fe:	e9 e3       	ldi	r30, 0x39	; 57
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	11 c0       	rjmp	.+34     	; 0x162a <DIO_u8GetPort+0x7a>
	case PORTB :L_u8pinval = PINB_REG; break ;
    1608:	e6 e3       	ldi	r30, 0x36	; 54
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	0c c0       	rjmp	.+24     	; 0x162a <DIO_u8GetPort+0x7a>
	case PORTC :L_u8pinval = PINC_REG; break ;
    1612:	e3 e3       	ldi	r30, 0x33	; 51
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	07 c0       	rjmp	.+14     	; 0x162a <DIO_u8GetPort+0x7a>
	case PORTD :L_u8pinval = PIND_REG; break ;
    161c:	e0 e3       	ldi	r30, 0x30	; 48
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8GetPort+0x7a>
	default : return ERROR ; break ;
    1626:	1b 82       	std	Y+3, r1	; 0x03
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_u8GetPort+0x7e>
	}

	return L_u8pinval ;
    162a:	99 81       	ldd	r25, Y+1	; 0x01
    162c:	9b 83       	std	Y+3, r25	; 0x03
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <DIO_u8SetPortValue>:

u8_t DIO_u8SetPortValue(u8_t L_u8Port ,u8_t L_u8Value)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <DIO_u8SetPortValue+0x6>
    1646:	00 d0       	rcall	.+0      	; 0x1648 <DIO_u8SetPortValue+0x8>
    1648:	0f 92       	push	r0
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3d 83       	std	Y+5, r19	; 0x05
    165a:	2c 83       	std	Y+4, r18	; 0x04
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	d1 f0       	breq	.+52     	; 0x169a <DIO_u8SetPortValue+0x5a>
    1666:	2c 81       	ldd	r18, Y+4	; 0x04
    1668:	3d 81       	ldd	r19, Y+5	; 0x05
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	2c f4       	brge	.+10     	; 0x167a <DIO_u8SetPortValue+0x3a>
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	61 f0       	breq	.+24     	; 0x1690 <DIO_u8SetPortValue+0x50>
    1678:	1f c0       	rjmp	.+62     	; 0x16b8 <DIO_u8SetPortValue+0x78>
    167a:	2c 81       	ldd	r18, Y+4	; 0x04
    167c:	3d 81       	ldd	r19, Y+5	; 0x05
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	81 f0       	breq	.+32     	; 0x16a4 <DIO_u8SetPortValue+0x64>
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	91 05       	cpc	r25, r1
    168c:	81 f0       	breq	.+32     	; 0x16ae <DIO_u8SetPortValue+0x6e>
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <DIO_u8SetPortValue+0x78>
	{
	case PORTA: PORTA_REG = L_u8Value; break;
    1690:	eb e3       	ldi	r30, 0x3B	; 59
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <DIO_u8SetPortValue+0x7c>
	case PORTB: PORTB_REG = L_u8Value; break;
    169a:	e8 e3       	ldi	r30, 0x38	; 56
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 83       	st	Z, r24
    16a2:	0c c0       	rjmp	.+24     	; 0x16bc <DIO_u8SetPortValue+0x7c>
	case PORTC: PORTC_REG = L_u8Value; break;
    16a4:	e5 e3       	ldi	r30, 0x35	; 53
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	80 83       	st	Z, r24
    16ac:	07 c0       	rjmp	.+14     	; 0x16bc <DIO_u8SetPortValue+0x7c>
	case PORTD: PORTD_REG = L_u8Value; break;
    16ae:	e2 e3       	ldi	r30, 0x32	; 50
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	80 83       	st	Z, r24
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_u8SetPortValue+0x7c>
	default: return ERROR; break;
    16b8:	1b 82       	std	Y+3, r1	; 0x03
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_u8SetPortValue+0x80>
	}
	return NO_ERROR ;
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	9b 83       	std	Y+3, r25	; 0x03
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <DIO_u8SetPortDirection>:
u8_t DIO_u8SetPortDirection(u8_t L_u8Port ,u8_t L_u8Direction)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <DIO_u8SetPortDirection+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <DIO_u8SetPortDirection+0x8>
    16da:	0f 92       	push	r0
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	6a 83       	std	Y+2, r22	; 0x02
	if(L_u8Direction==OUTPUT)
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	19 f4       	brne	.+6      	; 0x16f0 <DIO_u8SetPortDirection+0x1e>
		L_u8Direction =0xFF;
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	8a 83       	std	Y+2, r24	; 0x02
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <DIO_u8SetPortDirection+0x20>
	else
	{
		L_u8Direction =0x00;
    16f0:	1a 82       	std	Y+2, r1	; 0x02
	}
	switch(L_u8Port)
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3d 83       	std	Y+5, r19	; 0x05
    16fa:	2c 83       	std	Y+4, r18	; 0x04
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	d1 f0       	breq	.+52     	; 0x173a <DIO_u8SetPortDirection+0x68>
    1706:	2c 81       	ldd	r18, Y+4	; 0x04
    1708:	3d 81       	ldd	r19, Y+5	; 0x05
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <DIO_u8SetPortDirection+0x48>
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	61 f0       	breq	.+24     	; 0x1730 <DIO_u8SetPortDirection+0x5e>
    1718:	1f c0       	rjmp	.+62     	; 0x1758 <DIO_u8SetPortDirection+0x86>
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <DIO_u8SetPortDirection+0x72>
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	81 f0       	breq	.+32     	; 0x174e <DIO_u8SetPortDirection+0x7c>
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <DIO_u8SetPortDirection+0x86>
	{
		case PORTA: DDRA_REG = L_u8Direction; break;
    1730:	ea e3       	ldi	r30, 0x3A	; 58
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
    1738:	11 c0       	rjmp	.+34     	; 0x175c <DIO_u8SetPortDirection+0x8a>
		case PORTB: DDRB_REG = L_u8Direction; break;
    173a:	e7 e3       	ldi	r30, 0x37	; 55
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	0c c0       	rjmp	.+24     	; 0x175c <DIO_u8SetPortDirection+0x8a>
		case PORTC: DDRC_REG = L_u8Direction; break;
    1744:	e4 e3       	ldi	r30, 0x34	; 52
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
    174c:	07 c0       	rjmp	.+14     	; 0x175c <DIO_u8SetPortDirection+0x8a>
		case PORTD: DDRD_REG = L_u8Direction; break;
    174e:	e1 e3       	ldi	r30, 0x31	; 49
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	80 83       	st	Z, r24
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_u8SetPortDirection+0x8a>
		default: return ERROR; break;
    1758:	1b 82       	std	Y+3, r1	; 0x03
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_u8SetPortDirection+0x8e>
	}
	return NO_ERROR ;
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	9b 83       	std	Y+3, r25	; 0x03
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <Steper_Init>:
#include "Steper_private.h"

 static u8_t Current_pattern = 0 ;

void Steper_Init()
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	for(u8_t i = 0 ; i< NUM_OF_COILS ;i++)
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	1a c0       	rjmp	.+52     	; 0x17b4 <Steper_Init+0x42>
    DIO_u8SetPinDirection(coils[i].port ,coils[i].pin ,OUTPUT );
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	fc 01       	movw	r30, r24
    178c:	e8 59       	subi	r30, 0x98	; 152
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	20 81       	ld	r18, Z
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	fc 01       	movw	r30, r24
    179e:	e7 59       	subi	r30, 0x97	; 151
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	90 81       	ld	r25, Z
    17a4:	82 2f       	mov	r24, r18
    17a6:	69 2f       	mov	r22, r25
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>

 static u8_t Current_pattern = 0 ;

void Steper_Init()
{
	for(u8_t i = 0 ; i< NUM_OF_COILS ;i++)
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	8f 5f       	subi	r24, 0xFF	; 255
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	18 f3       	brcs	.-58     	; 0x1780 <Steper_Init+0xe>
    DIO_u8SetPinDirection(coils[i].port ,coils[i].pin ,OUTPUT );
}
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <Steper_StepCW>:
void Steper_StepCW()
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62


   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    17cc:	19 82       	std	Y+1, r1	; 0x01
    17ce:	30 c0       	rjmp	.+96     	; 0x1830 <Steper_StepCW+0x6e>
   {
	   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	fc 01       	movw	r30, r24
    17dc:	e8 59       	subi	r30, 0x98	; 152
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	40 81       	ld	r20, Z
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	fc 01       	movw	r30, r24
    17ee:	e7 59       	subi	r30, 0x97	; 151
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	50 81       	ld	r21, Z
    17f4:	80 91 a6 00 	lds	r24, 0x00A6
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	e0 59       	subi	r30, 0x90	; 144
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	80 81       	ld	r24, Z
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b9 01       	movw	r22, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <Steper_StepCW+0x54>
    1812:	75 95       	asr	r23
    1814:	67 95       	ror	r22
    1816:	8a 95       	dec	r24
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <Steper_StepCW+0x50>
    181a:	cb 01       	movw	r24, r22
    181c:	98 2f       	mov	r25, r24
    181e:	91 70       	andi	r25, 0x01	; 1
    1820:	84 2f       	mov	r24, r20
    1822:	65 2f       	mov	r22, r21
    1824:	49 2f       	mov	r20, r25
    1826:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
}
void Steper_StepCW()
{


   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	8f 5f       	subi	r24, 0xFF	; 255
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	84 30       	cpi	r24, 0x04	; 4
    1834:	68 f2       	brcs	.-102    	; 0x17d0 <Steper_StepCW+0xe>
   {
	   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
   }
  Current_pattern++ ;
    1836:	80 91 a6 00 	lds	r24, 0x00A6
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	80 93 a6 00 	sts	0x00A6, r24
  if(Current_pattern>7) Current_pattern = 0 ;
    1840:	80 91 a6 00 	lds	r24, 0x00A6
    1844:	88 30       	cpi	r24, 0x08	; 8
    1846:	10 f0       	brcs	.+4      	; 0x184c <Steper_StepCW+0x8a>
    1848:	10 92 a6 00 	sts	0x00A6, r1
}
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <Steper_StepCCW>:
void Steper_StepCCW()
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62

	   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    185e:	19 82       	std	Y+1, r1	; 0x01
    1860:	30 c0       	rjmp	.+96     	; 0x18c2 <Steper_StepCCW+0x6e>
	   {
		   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	fc 01       	movw	r30, r24
    186e:	e8 59       	subi	r30, 0x98	; 152
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	40 81       	ld	r20, Z
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	fc 01       	movw	r30, r24
    1880:	e7 59       	subi	r30, 0x97	; 151
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	50 81       	ld	r21, Z
    1886:	80 91 a6 00 	lds	r24, 0x00A6
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	fc 01       	movw	r30, r24
    1890:	e0 59       	subi	r30, 0x90	; 144
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	b9 01       	movw	r22, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <Steper_StepCCW+0x54>
    18a4:	75 95       	asr	r23
    18a6:	67 95       	ror	r22
    18a8:	8a 95       	dec	r24
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <Steper_StepCCW+0x50>
    18ac:	cb 01       	movw	r24, r22
    18ae:	98 2f       	mov	r25, r24
    18b0:	91 70       	andi	r25, 0x01	; 1
    18b2:	84 2f       	mov	r24, r20
    18b4:	65 2f       	mov	r22, r21
    18b6:	49 2f       	mov	r20, r25
    18b8:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
  if(Current_pattern>7) Current_pattern = 0 ;
}
void Steper_StepCCW()
{

	   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	8f 5f       	subi	r24, 0xFF	; 255
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	68 f2       	brcs	.-102    	; 0x1862 <Steper_StepCCW+0xe>
	   {
		   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
	   }
	  Current_pattern++ ;
    18c8:	80 91 a6 00 	lds	r24, 0x00A6
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	80 93 a6 00 	sts	0x00A6, r24
	  if(Current_pattern >7) Current_pattern = 7 ;
    18d2:	80 91 a6 00 	lds	r24, 0x00A6
    18d6:	88 30       	cpi	r24, 0x08	; 8
    18d8:	18 f0       	brcs	.+6      	; 0x18e0 <Steper_StepCCW+0x8c>
    18da:	87 e0       	ldi	r24, 0x07	; 7
    18dc:	80 93 a6 00 	sts	0x00A6, r24
}
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <SEG_voidInit>:
#include "SEG_config.h"
#include "SEG_interfac.h"
#include "SEG_private.h"

void SEG_voidInit(u8_t SEG_NUM)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	0f 92       	push	r0
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	89 83       	std	Y+1, r24	; 0x01

	switch(SEG_NUM)
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	91 05       	cpc	r25, r1
    18fe:	21 f4       	brne	.+8      	; 0x1908 <SEG_voidInit+0x20>
	{
	case SEG1:
         DIO_u8SetPortDirection(SEG1_PORT ,OUTPUT);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	61 e0       	ldi	r22, 0x01	; 1
    1904:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_u8SetPortDirection>
		break ;
	}

}
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <SEG_display>:

void SEG_display(u8_t SEG_NUM ,u8_t val)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <SEG_display+0x6>
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	6a 83       	std	Y+2, r22	; 0x02
	switch(SEG_NUM)
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	91 05       	cpc	r25, r1
    1928:	59 f4       	brne	.+22     	; 0x1940 <SEG_display+0x30>
	{
	case SEG1:
	  DIO_u8SetPortValue(SEG1_PORT ,seg[val]);
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	fc 01       	movw	r30, r24
    1932:	e8 56       	subi	r30, 0x68	; 104
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	90 81       	ld	r25, Z
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	69 2f       	mov	r22, r25
    193c:	0e 94 20 0b 	call	0x1640	; 0x1640 <DIO_u8SetPortValue>
	  break ;
	}
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <SEG_VoidClear>:
void SEG_VoidClear(u8_t SEG_NUM)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(SEG1_PORT , HSEG_PING ,LOW);
	DIO_u8SetPinValue(SEG1_PORT , HSEG_PINH ,LOW);
	break ;
	}

}
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <LED_voidInit>:

#include "LED_interface.h"
#include "LED_private.h"

void LED_voidInit(u8_t L_u8led)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <LED_voidInit+0x6>
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	3b 83       	std	Y+3, r19	; 0x03
    1974:	2a 83       	std	Y+2, r18	; 0x02
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	82 30       	cpi	r24, 0x02	; 2
    197c:	91 05       	cpc	r25, r1
    197e:	31 f1       	breq	.+76     	; 0x19cc <LED_voidInit+0x6e>
    1980:	2a 81       	ldd	r18, Y+2	; 0x02
    1982:	3b 81       	ldd	r19, Y+3	; 0x03
    1984:	23 30       	cpi	r18, 0x03	; 3
    1986:	31 05       	cpc	r19, r1
    1988:	54 f4       	brge	.+20     	; 0x199e <LED_voidInit+0x40>
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	89 f0       	breq	.+34     	; 0x19b4 <LED_voidInit+0x56>
    1992:	2a 81       	ldd	r18, Y+2	; 0x02
    1994:	3b 81       	ldd	r19, Y+3	; 0x03
    1996:	21 30       	cpi	r18, 0x01	; 1
    1998:	31 05       	cpc	r19, r1
    199a:	91 f0       	breq	.+36     	; 0x19c0 <LED_voidInit+0x62>
    199c:	28 c0       	rjmp	.+80     	; 0x19ee <LED_voidInit+0x90>
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	c1 f0       	breq	.+48     	; 0x19d8 <LED_voidInit+0x7a>
    19a8:	2a 81       	ldd	r18, Y+2	; 0x02
    19aa:	3b 81       	ldd	r19, Y+3	; 0x03
    19ac:	24 30       	cpi	r18, 0x04	; 4
    19ae:	31 05       	cpc	r19, r1
    19b0:	c9 f0       	breq	.+50     	; 0x19e4 <LED_voidInit+0x86>
    19b2:	1d c0       	rjmp	.+58     	; 0x19ee <LED_voidInit+0x90>
	{
	case LED1 :DIO_u8SetPinDirection(LED1_PORT, LED1_PIN, OUTPUT); break ;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
    19be:	17 c0       	rjmp	.+46     	; 0x19ee <LED_voidInit+0x90>
	case LED2 :DIO_u8SetPinDirection(LED2_PORT, LED2_PIN, OUTPUT); break ;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
    19ca:	11 c0       	rjmp	.+34     	; 0x19ee <LED_voidInit+0x90>
	case LED3 :DIO_u8SetPinDirection(LED3_PORT, LED3_PIN, OUTPUT); break ;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	62 e0       	ldi	r22, 0x02	; 2
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
    19d6:	0b c0       	rjmp	.+22     	; 0x19ee <LED_voidInit+0x90>
	case LED4 :DIO_u8SetPinDirection(LED4_PORT, LED4_PIN, OUTPUT); break ;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	63 e0       	ldi	r22, 0x03	; 3
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <LED_voidInit+0x90>
	case LED5 :DIO_u8SetPinDirection(LED5_PORT, LED5_PIN, OUTPUT); break ;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	64 e0       	ldi	r22, 0x04	; 4
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	}
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <LED_voidSetLEDHigh>:
void LED_voidSetLEDHigh(u8_t L_u8led)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <LED_voidSetLEDHigh+0x6>
    1a00:	0f 92       	push	r0
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	3b 83       	std	Y+3, r19	; 0x03
    1a10:	2a 83       	std	Y+2, r18	; 0x02
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	9b 81       	ldd	r25, Y+3	; 0x03
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	91 05       	cpc	r25, r1
    1a1a:	31 f1       	breq	.+76     	; 0x1a68 <LED_voidSetLEDHigh+0x6e>
    1a1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a20:	23 30       	cpi	r18, 0x03	; 3
    1a22:	31 05       	cpc	r19, r1
    1a24:	54 f4       	brge	.+20     	; 0x1a3a <LED_voidSetLEDHigh+0x40>
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	89 f0       	breq	.+34     	; 0x1a50 <LED_voidSetLEDHigh+0x56>
    1a2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a30:	3b 81       	ldd	r19, Y+3	; 0x03
    1a32:	21 30       	cpi	r18, 0x01	; 1
    1a34:	31 05       	cpc	r19, r1
    1a36:	91 f0       	breq	.+36     	; 0x1a5c <LED_voidSetLEDHigh+0x62>
    1a38:	28 c0       	rjmp	.+80     	; 0x1a8a <LED_voidSetLEDHigh+0x90>
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	91 05       	cpc	r25, r1
    1a42:	c1 f0       	breq	.+48     	; 0x1a74 <LED_voidSetLEDHigh+0x7a>
    1a44:	2a 81       	ldd	r18, Y+2	; 0x02
    1a46:	3b 81       	ldd	r19, Y+3	; 0x03
    1a48:	24 30       	cpi	r18, 0x04	; 4
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	c9 f0       	breq	.+50     	; 0x1a80 <LED_voidSetLEDHigh+0x86>
    1a4e:	1d c0       	rjmp	.+58     	; 0x1a8a <LED_voidSetLEDHigh+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, HIGH); break;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1a5a:	17 c0       	rjmp	.+46     	; 0x1a8a <LED_voidSetLEDHigh+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, HIGH); break;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1a66:	11 c0       	rjmp	.+34     	; 0x1a8a <LED_voidSetLEDHigh+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, HIGH); break;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	62 e0       	ldi	r22, 0x02	; 2
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1a72:	0b c0       	rjmp	.+22     	; 0x1a8a <LED_voidSetLEDHigh+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, HIGH); break;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	63 e0       	ldi	r22, 0x03	; 3
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <LED_voidSetLEDHigh+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, HIGH); break;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	64 e0       	ldi	r22, 0x04	; 4
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
	}
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <LED_voidSetLEDLow>:
void LED_voidSetLEDLow(u8_t L_u8led)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <LED_voidSetLEDLow+0x6>
    1a9c:	0f 92       	push	r0
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	3b 83       	std	Y+3, r19	; 0x03
    1aac:	2a 83       	std	Y+2, r18	; 0x02
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	31 f1       	breq	.+76     	; 0x1b04 <LED_voidSetLEDLow+0x6e>
    1ab8:	2a 81       	ldd	r18, Y+2	; 0x02
    1aba:	3b 81       	ldd	r19, Y+3	; 0x03
    1abc:	23 30       	cpi	r18, 0x03	; 3
    1abe:	31 05       	cpc	r19, r1
    1ac0:	54 f4       	brge	.+20     	; 0x1ad6 <LED_voidSetLEDLow+0x40>
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	89 f0       	breq	.+34     	; 0x1aec <LED_voidSetLEDLow+0x56>
    1aca:	2a 81       	ldd	r18, Y+2	; 0x02
    1acc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ace:	21 30       	cpi	r18, 0x01	; 1
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	91 f0       	breq	.+36     	; 0x1af8 <LED_voidSetLEDLow+0x62>
    1ad4:	28 c0       	rjmp	.+80     	; 0x1b26 <LED_voidSetLEDLow+0x90>
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	91 05       	cpc	r25, r1
    1ade:	c1 f0       	breq	.+48     	; 0x1b10 <LED_voidSetLEDLow+0x7a>
    1ae0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae4:	24 30       	cpi	r18, 0x04	; 4
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	c9 f0       	breq	.+50     	; 0x1b1c <LED_voidSetLEDLow+0x86>
    1aea:	1d c0       	rjmp	.+58     	; 0x1b26 <LED_voidSetLEDLow+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, LOW); break;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1af6:	17 c0       	rjmp	.+46     	; 0x1b26 <LED_voidSetLEDLow+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, LOW); break;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1b02:	11 c0       	rjmp	.+34     	; 0x1b26 <LED_voidSetLEDLow+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, LOW); break;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1b0e:	0b c0       	rjmp	.+22     	; 0x1b26 <LED_voidSetLEDLow+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, LOW); break;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	63 e0       	ldi	r22, 0x03	; 3
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <LED_voidSetLEDLow+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, LOW); break;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	64 e0       	ldi	r22, 0x04	; 4
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
	}
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <HLCD_voidinit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include <util/delay.h>

void HLCD_voidinit()
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	e8 97       	sbiw	r28, 0x38	; 56
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_DATA_PORT ,OUTPUT);
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RS_PIN ,OUTPUT);
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RW_PIN ,OUTPUT);
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_E_PIN ,OUTPUT);
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 ef       	ldi	r26, 0xF0	; 240
    1b72:	b1 e4       	ldi	r27, 0x41	; 65
    1b74:	8d ab       	std	Y+53, r24	; 0x35
    1b76:	9e ab       	std	Y+54, r25	; 0x36
    1b78:	af ab       	std	Y+55, r26	; 0x37
    1b7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b80:	8f a9       	ldd	r24, Y+55	; 0x37
    1b82:	98 ad       	ldd	r25, Y+56	; 0x38
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4a ef       	ldi	r20, 0xFA	; 250
    1b8a:	54 e4       	ldi	r21, 0x44	; 68
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	89 ab       	std	Y+49, r24	; 0x31
    1b96:	9a ab       	std	Y+50, r25	; 0x32
    1b98:	ab ab       	std	Y+51, r26	; 0x33
    1b9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <HLCD_voidinit+0x8c>
		__ticks = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	98 ab       	std	Y+48, r25	; 0x30
    1bba:	8f a7       	std	Y+47, r24	; 0x2f
    1bbc:	3f c0       	rjmp	.+126    	; 0x1c3c <HLCD_voidinit+0x10a>
	else if (__tmp > 65535)
    1bbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	57 e4       	ldi	r21, 0x47	; 71
    1bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	4c f5       	brge	.+82     	; 0x1c28 <HLCD_voidinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bda:	8f a9       	ldd	r24, Y+55	; 0x37
    1bdc:	98 ad       	ldd	r25, Y+56	; 0x38
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	98 ab       	std	Y+48, r25	; 0x30
    1bfc:	8f a7       	std	Y+47, r24	; 0x2f
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <HLCD_voidinit+0xec>
    1c00:	88 ec       	ldi	r24, 0xC8	; 200
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9e a7       	std	Y+46, r25	; 0x2e
    1c06:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c08:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <HLCD_voidinit+0xda>
    1c10:	9e a7       	std	Y+46, r25	; 0x2e
    1c12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c16:	98 a9       	ldd	r25, Y+48	; 0x30
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	98 ab       	std	Y+48, r25	; 0x30
    1c1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c20:	98 a9       	ldd	r25, Y+48	; 0x30
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <HLCD_voidinit+0xce>
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <HLCD_voidinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	98 ab       	std	Y+48, r25	; 0x30
    1c3a:	8f a7       	std	Y+47, r24	; 0x2f
    1c3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c40:	9c a7       	std	Y+44, r25	; 0x2c
    1c42:	8b a7       	std	Y+43, r24	; 0x2b
    1c44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c46:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <HLCD_voidinit+0x116>
    1c4c:	9c a7       	std	Y+44, r25	; 0x2c
    1c4e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(30);
	HLCD_voidCommand(LCD_Function_set1);
    1c50:	88 e3       	ldi	r24, 0x38	; 56
    1c52:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <HLCD_voidCommand>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e8       	ldi	r26, 0x80	; 128
    1c5c:	bf e3       	ldi	r27, 0x3F	; 63
    1c5e:	8f a3       	std	Y+39, r24	; 0x27
    1c60:	98 a7       	std	Y+40, r25	; 0x28
    1c62:	a9 a7       	std	Y+41, r26	; 0x29
    1c64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6f a1       	ldd	r22, Y+39	; 0x27
    1c68:	78 a5       	ldd	r23, Y+40	; 0x28
    1c6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a ef       	ldi	r20, 0xFA	; 250
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8b a3       	std	Y+35, r24	; 0x23
    1c80:	9c a3       	std	Y+36, r25	; 0x24
    1c82:	ad a3       	std	Y+37, r26	; 0x25
    1c84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c86:	6b a1       	ldd	r22, Y+35	; 0x23
    1c88:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <HLCD_voidinit+0x176>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <HLCD_voidinit+0x1f4>
	else if (__tmp > 65535)
    1ca8:	6b a1       	ldd	r22, Y+35	; 0x23
    1caa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cac:	8d a1       	ldd	r24, Y+37	; 0x25
    1cae:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <HLCD_voidinit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9a a3       	std	Y+34, r25	; 0x22
    1ce6:	89 a3       	std	Y+33, r24	; 0x21
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <HLCD_voidinit+0x1d6>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	98 a3       	std	Y+32, r25	; 0x20
    1cf0:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cf4:	98 a1       	ldd	r25, Y+32	; 0x20
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <HLCD_voidinit+0x1c4>
    1cfa:	98 a3       	std	Y+32, r25	; 0x20
    1cfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1d00:	9a a1       	ldd	r25, Y+34	; 0x22
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9a a3       	std	Y+34, r25	; 0x22
    1d06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <HLCD_voidinit+0x1b8>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <HLCD_voidinit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	6b a1       	ldd	r22, Y+35	; 0x23
    1d14:	7c a1       	ldd	r23, Y+36	; 0x24
    1d16:	8d a1       	ldd	r24, Y+37	; 0x25
    1d18:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9a a3       	std	Y+34, r25	; 0x22
    1d24:	89 a3       	std	Y+33, r24	; 0x21
    1d26:	89 a1       	ldd	r24, Y+33	; 0x21
    1d28:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <HLCD_voidinit+0x200>
    1d36:	9e 8f       	std	Y+30, r25	; 0x1e
    1d38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_voidCommand(LCD_Display_Mode1);
    1d3a:	8f e0       	ldi	r24, 0x0F	; 15
    1d3c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <HLCD_voidCommand>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e8       	ldi	r26, 0x80	; 128
    1d46:	bf e3       	ldi	r27, 0x3F	; 63
    1d48:	89 8f       	std	Y+25, r24	; 0x19
    1d4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	69 8d       	ldd	r22, Y+25	; 0x19
    1d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a ef       	ldi	r20, 0xFA	; 250
    1d5e:	54 e4       	ldi	r21, 0x44	; 68
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	8d 8b       	std	Y+21, r24	; 0x15
    1d6a:	9e 8b       	std	Y+22, r25	; 0x16
    1d6c:	af 8b       	std	Y+23, r26	; 0x17
    1d6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d70:	6d 89       	ldd	r22, Y+21	; 0x15
    1d72:	7e 89       	ldd	r23, Y+22	; 0x16
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <HLCD_voidinit+0x260>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <HLCD_voidinit+0x2de>
	else if (__tmp > 65535)
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	4c f5       	brge	.+82     	; 0x1dfc <HLCD_voidinit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	69 8d       	ldd	r22, Y+25	; 0x19
    1dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <HLCD_voidinit+0x2c0>
    1dd4:	88 ec       	ldi	r24, 0xC8	; 200
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9a 8b       	std	Y+18, r25	; 0x12
    1dda:	89 8b       	std	Y+17, r24	; 0x11
    1ddc:	89 89       	ldd	r24, Y+17	; 0x11
    1dde:	9a 89       	ldd	r25, Y+18	; 0x12
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <HLCD_voidinit+0x2ae>
    1de4:	9a 8b       	std	Y+18, r25	; 0x12
    1de6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	9c 8b       	std	Y+20, r25	; 0x14
    1df0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <HLCD_voidinit+0x2a2>
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <HLCD_voidinit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9c 8b       	std	Y+20, r25	; 0x14
    1e0e:	8b 8b       	std	Y+19, r24	; 0x13
    1e10:	8b 89       	ldd	r24, Y+19	; 0x13
    1e12:	9c 89       	ldd	r25, Y+20	; 0x14
    1e14:	98 8b       	std	Y+16, r25	; 0x10
    1e16:	8f 87       	std	Y+15, r24	; 0x0f
    1e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1a:	98 89       	ldd	r25, Y+16	; 0x10
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <HLCD_voidinit+0x2ea>
    1e20:	98 8b       	std	Y+16, r25	; 0x10
    1e22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_voidCommand(LCD_Clear_Screen);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <HLCD_voidCommand>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e0       	ldi	r26, 0x00	; 0
    1e30:	b0 e4       	ldi	r27, 0x40	; 64
    1e32:	8b 87       	std	Y+11, r24	; 0x0b
    1e34:	9c 87       	std	Y+12, r25	; 0x0c
    1e36:	ad 87       	std	Y+13, r26	; 0x0d
    1e38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4a ef       	ldi	r20, 0xFA	; 250
    1e48:	54 e4       	ldi	r21, 0x44	; 68
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	8f 83       	std	Y+7, r24	; 0x07
    1e54:	98 87       	std	Y+8, r25	; 0x08
    1e56:	a9 87       	std	Y+9, r26	; 0x09
    1e58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5c:	78 85       	ldd	r23, Y+8	; 0x08
    1e5e:	89 85       	ldd	r24, Y+9	; 0x09
    1e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6e:	88 23       	and	r24, r24
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <HLCD_voidinit+0x34a>
		__ticks = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	3f c0       	rjmp	.+126    	; 0x1efa <HLCD_voidinit+0x3c8>
	else if (__tmp > 65535)
    1e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7e:	78 85       	ldd	r23, Y+8	; 0x08
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	4c f5       	brge	.+82     	; 0x1ee6 <HLCD_voidinit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e2       	ldi	r20, 0x20	; 32
    1ea2:	51 e4       	ldi	r21, 0x41	; 65
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <HLCD_voidinit+0x3aa>
    1ebe:	88 ec       	ldi	r24, 0xC8	; 200
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <HLCD_voidinit+0x398>
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <HLCD_voidinit+0x38c>
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <HLCD_voidinit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee8:	78 85       	ldd	r23, Y+8	; 0x08
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <HLCD_voidinit+0x3d4>
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidCommand(LCD_Entry_Mode1);
    1f0e:	86 e0       	ldi	r24, 0x06	; 6
    1f10:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <HLCD_voidCommand>


}
    1f14:	e8 96       	adiw	r28, 0x38	; 56
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <HLCD_voidCommand>:

void HLCD_voidCommand(u8_t command)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	0f 92       	push	r0
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,LOW );
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW );
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT ,command );
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	69 81       	ldd	r22, Y+1	; 0x01
    1f4a:	0e 94 20 0b 	call	0x1640	; 0x1640 <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    1f4e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <HLCD_voidSendPulse>
}
    1f52:	0f 90       	pop	r0
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <HLCD_voidSetDDRAM_Address>:
void HLCD_voidSetDDRAM_Address(u8_t address)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	0f 92       	push	r0
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
	SetBit(address,7);
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	80 68       	ori	r24, 0x80	; 128
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidCommand(address);
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <HLCD_voidCommand>
}
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <HLCD_voidSendPulse>:

void static HLCD_voidSendPulse(void)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	6c 97       	sbiw	r28, 0x1c	; 28
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,HIGH);
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	62 e0       	ldi	r22, 0x02	; 2
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a0 e8       	ldi	r26, 0x80	; 128
    1f9e:	bf e3       	ldi	r27, 0x3F	; 63
    1fa0:	89 8f       	std	Y+25, r24	; 0x19
    1fa2:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa4:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa8:	69 8d       	ldd	r22, Y+25	; 0x19
    1faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4a ef       	ldi	r20, 0xFA	; 250
    1fb6:	54 e4       	ldi	r21, 0x44	; 68
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8d 8b       	std	Y+21, r24	; 0x15
    1fc2:	9e 8b       	std	Y+22, r25	; 0x16
    1fc4:	af 8b       	std	Y+23, r26	; 0x17
    1fc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fca:	7e 89       	ldd	r23, Y+22	; 0x16
    1fcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fce:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	2c f4       	brge	.+10     	; 0x1fea <HLCD_voidSendPulse+0x70>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 8b       	std	Y+20, r25	; 0x14
    1fe6:	8b 8b       	std	Y+19, r24	; 0x13
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <HLCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    1fea:	6d 89       	ldd	r22, Y+21	; 0x15
    1fec:	7e 89       	ldd	r23, Y+22	; 0x16
    1fee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffe:	18 16       	cp	r1, r24
    2000:	4c f5       	brge	.+82     	; 0x2054 <HLCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	69 8d       	ldd	r22, Y+25	; 0x19
    2004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9c 8b       	std	Y+20, r25	; 0x14
    2028:	8b 8b       	std	Y+19, r24	; 0x13
    202a:	0f c0       	rjmp	.+30     	; 0x204a <HLCD_voidSendPulse+0xd0>
    202c:	88 ec       	ldi	r24, 0xC8	; 200
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9a 8b       	std	Y+18, r25	; 0x12
    2032:	89 8b       	std	Y+17, r24	; 0x11
    2034:	89 89       	ldd	r24, Y+17	; 0x11
    2036:	9a 89       	ldd	r25, Y+18	; 0x12
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <HLCD_voidSendPulse+0xbe>
    203c:	9a 8b       	std	Y+18, r25	; 0x12
    203e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	9c 8b       	std	Y+20, r25	; 0x14
    2048:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204a:	8b 89       	ldd	r24, Y+19	; 0x13
    204c:	9c 89       	ldd	r25, Y+20	; 0x14
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	69 f7       	brne	.-38     	; 0x202c <HLCD_voidSendPulse+0xb2>
    2052:	14 c0       	rjmp	.+40     	; 0x207c <HLCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2054:	6d 89       	ldd	r22, Y+21	; 0x15
    2056:	7e 89       	ldd	r23, Y+22	; 0x16
    2058:	8f 89       	ldd	r24, Y+23	; 0x17
    205a:	98 8d       	ldd	r25, Y+24	; 0x18
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9c 8b       	std	Y+20, r25	; 0x14
    2066:	8b 8b       	std	Y+19, r24	; 0x13
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	98 8b       	std	Y+16, r25	; 0x10
    206e:	8f 87       	std	Y+15, r24	; 0x0f
    2070:	8f 85       	ldd	r24, Y+15	; 0x0f
    2072:	98 89       	ldd	r25, Y+16	; 0x10
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <HLCD_voidSendPulse+0xfa>
    2078:	98 8b       	std	Y+16, r25	; 0x10
    207a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,LOW);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	62 e0       	ldi	r22, 0x02	; 2
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a0 e8       	ldi	r26, 0x80	; 128
    208c:	bf e3       	ldi	r27, 0x3F	; 63
    208e:	8b 87       	std	Y+11, r24	; 0x0b
    2090:	9c 87       	std	Y+12, r25	; 0x0c
    2092:	ad 87       	std	Y+13, r26	; 0x0d
    2094:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2096:	6b 85       	ldd	r22, Y+11	; 0x0b
    2098:	7c 85       	ldd	r23, Y+12	; 0x0c
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	4a ef       	ldi	r20, 0xFA	; 250
    20a4:	54 e4       	ldi	r21, 0x44	; 68
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8f 83       	std	Y+7, r24	; 0x07
    20b0:	98 87       	std	Y+8, r25	; 0x08
    20b2:	a9 87       	std	Y+9, r26	; 0x09
    20b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b6:	6f 81       	ldd	r22, Y+7	; 0x07
    20b8:	78 85       	ldd	r23, Y+8	; 0x08
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ca:	88 23       	and	r24, r24
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <HLCD_voidSendPulse+0x15e>
		__ticks = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
    20d6:	3f c0       	rjmp	.+126    	; 0x2156 <HLCD_voidSendPulse+0x1dc>
	else if (__tmp > 65535)
    20d8:	6f 81       	ldd	r22, Y+7	; 0x07
    20da:	78 85       	ldd	r23, Y+8	; 0x08
    20dc:	89 85       	ldd	r24, Y+9	; 0x09
    20de:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	4c f5       	brge	.+82     	; 0x2142 <HLCD_voidSendPulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
    2118:	0f c0       	rjmp	.+30     	; 0x2138 <HLCD_voidSendPulse+0x1be>
    211a:	88 ec       	ldi	r24, 0xC8	; 200
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9c 83       	std	Y+4, r25	; 0x04
    2120:	8b 83       	std	Y+3, r24	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <HLCD_voidSendPulse+0x1ac>
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f7       	brne	.-38     	; 0x211a <HLCD_voidSendPulse+0x1a0>
    2140:	14 c0       	rjmp	.+40     	; 0x216a <HLCD_voidSendPulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <HLCD_voidSendPulse+0x1e8>
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    216a:	6c 96       	adiw	r28, 0x1c	; 28
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <HLCD_SendData>:

void HLCD_SendData(u8_t data)
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,HIGH);
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW);
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	61 e0       	ldi	r22, 0x01	; 1
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_DATA_PORT ,data);
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	69 81       	ldd	r22, Y+1	; 0x01
    21a0:	0e 94 20 0b 	call	0x1640	; 0x1640 <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    21a4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <HLCD_voidSendPulse>
}
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <HLCD_PrintString>:

void HLCD_PrintString(u8_t *string)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <HLCD_PrintString+0x6>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <HLCD_PrintString+0x8>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    21c0:	1a 82       	std	Y+2, r1	; 0x02
    21c2:	19 82       	std	Y+1, r1	; 0x01
    21c4:	26 c0       	rjmp	.+76     	; 0x2212 <HLCD_PrintString+0x62>
	while (*string > 0) {
		count++;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
		HLCD_SendData(*string++);
    21d0:	eb 81       	ldd	r30, Y+3	; 0x03
    21d2:	fc 81       	ldd	r31, Y+4	; 0x04
    21d4:	20 81       	ld	r18, Z
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	82 2f       	mov	r24, r18
    21e2:	0e 94 be 10 	call	0x217c	; 0x217c <HLCD_SendData>
		if (count == 16) {
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	80 31       	cpi	r24, 0x10	; 16
    21ec:	91 05       	cpc	r25, r1
    21ee:	21 f4       	brne	.+8      	; 0x21f8 <HLCD_PrintString+0x48>
			HLCD_voidSetDDRAM_Address(0x40);
    21f0:	80 e4       	ldi	r24, 0x40	; 64
    21f2:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <HLCD_voidSetDDRAM_Address>
    21f6:	0d c0       	rjmp	.+26     	; 0x2212 <HLCD_PrintString+0x62>
		} else if (count == 32) {
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	80 32       	cpi	r24, 0x20	; 32
    21fe:	91 05       	cpc	r25, r1
    2200:	41 f4       	brne	.+16     	; 0x2212 <HLCD_PrintString+0x62>
			HLCD_voidCommand(LCD_Clear_Screen);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <HLCD_voidCommand>
			HLCD_voidSetDDRAM_Address(0);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <HLCD_voidSetDDRAM_Address>
			count = 0;
    220e:	1a 82       	std	Y+2, r1	; 0x02
    2210:	19 82       	std	Y+1, r1	; 0x01
}

void HLCD_PrintString(u8_t *string)
{
	int count = 0;
	while (*string > 0) {
    2212:	eb 81       	ldd	r30, Y+3	; 0x03
    2214:	fc 81       	ldd	r31, Y+4	; 0x04
    2216:	80 81       	ld	r24, Z
    2218:	88 23       	and	r24, r24
    221a:	a9 f6       	brne	.-86     	; 0x21c6 <HLCD_PrintString+0x16>
			HLCD_voidCommand(LCD_Clear_Screen);
			HLCD_voidSetDDRAM_Address(0);
			count = 0;
		}
	}
}
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <HLCD_GOTO_XY>:

void HLCD_GOTO_XY(u8_t line, u8_t position) {
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	00 d0       	rcall	.+0      	; 0x2230 <HLCD_GOTO_XY+0x6>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1) {
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	39 f4       	brne	.+14     	; 0x224c <HLCD_GOTO_XY+0x22>
		if (position < 16 && position >= 0) {
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	80 31       	cpi	r24, 0x10	; 16
    2242:	20 f4       	brcc	.+8      	; 0x224c <HLCD_GOTO_XY+0x22>
			HLCD_voidSetDDRAM_Address(LCD_FIRST_ROW + position-1);
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	81 58       	subi	r24, 0x81	; 129
    2248:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <HLCD_voidSetDDRAM_Address>
		}
	}
	if (line == 2) {
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	82 30       	cpi	r24, 0x02	; 2
    2250:	39 f4       	brne	.+14     	; 0x2260 <HLCD_GOTO_XY+0x36>
		if (position < 16 && position >= 0) {
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	80 31       	cpi	r24, 0x10	; 16
    2256:	20 f4       	brcc	.+8      	; 0x2260 <HLCD_GOTO_XY+0x36>
			HLCD_voidSetDDRAM_Address(LCD_SECOND_ROW + position -1);
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	81 54       	subi	r24, 0x41	; 65
    225c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <HLCD_voidSetDDRAM_Address>
		}
	}
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <Keypad_init>:
#include "KeyPade_interface.h"
#include "KeyPade_private.h"


void Keypad_init()
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(KeyPade_PORT , R1 ,INPUT);
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R1 ,HIGH);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R2 ,INPUT);
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R2 ,HIGH);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R3 ,INPUT);
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R3 ,HIGH);
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	62 e0       	ldi	r22, 0x02	; 2
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R4 ,INPUT);
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	63 e0       	ldi	r22, 0x03	; 3
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R4 ,HIGH);
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	63 e0       	ldi	r22, 0x03	; 3
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , C1 ,OUTPUT);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	64 e0       	ldi	r22, 0x04	; 4
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C2 ,OUTPUT);
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	65 e0       	ldi	r22, 0x05	; 5
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C3 ,OUTPUT);
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	66 e0       	ldi	r22, 0x06	; 6
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C4 ,OUTPUT);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	67 e0       	ldi	r22, 0x07	; 7
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>


}
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <Keypad_getkey>:

u8_t Keypad_getkey(void)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <Keypad_getkey+0x6>
    22f6:	0f 92       	push	r0
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	for(u8_t COL = 0 ; COL<4 ;COL++)
    22fc:	1a 82       	std	Y+2, r1	; 0x02
    22fe:	60 c0       	rjmp	.+192    	; 0x23c0 <Keypad_getkey+0xd0>
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	88 2f       	mov	r24, r24
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	fc 01       	movw	r30, r24
    230c:	e0 58       	subi	r30, 0x80	; 128
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	98 2f       	mov	r25, r24
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	69 2f       	mov	r22, r25
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>

		for(u8_t ROW = 0 ; ROW<4 ;ROW++)
    2320:	19 82       	std	Y+1, r1	; 0x01
    2322:	38 c0       	rjmp	.+112    	; 0x2394 <Keypad_getkey+0xa4>
		{
			if(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0)
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	fc 01       	movw	r30, r24
    2330:	e8 58       	subi	r30, 0x88	; 136
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 81       	ld	r24, Z
    2336:	91 81       	ldd	r25, Z+1	; 0x01
    2338:	98 2f       	mov	r25, r24
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	69 2f       	mov	r22, r25
    233e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8GetBit>
    2342:	88 23       	and	r24, r24
    2344:	21 f5       	brne	.+72     	; 0x238e <Keypad_getkey+0x9e>
			{
				while(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0);
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	fc 01       	movw	r30, r24
    2352:	e8 58       	subi	r30, 0x88	; 136
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	98 2f       	mov	r25, r24
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	69 2f       	mov	r22, r25
    2360:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8GetBit>
    2364:	88 23       	and	r24, r24
    2366:	79 f3       	breq	.-34     	; 0x2346 <Keypad_getkey+0x56>
				return digit[ROW][COL] ;
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	48 2f       	mov	r20, r24
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	ca 01       	movw	r24, r20
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	82 0f       	add	r24, r18
    2380:	93 1f       	adc	r25, r19
    2382:	fc 01       	movw	r30, r24
    2384:	e8 57       	subi	r30, 0x78	; 120
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	8b 83       	std	Y+3, r24	; 0x03
    238c:	1f c0       	rjmp	.+62     	; 0x23cc <Keypad_getkey+0xdc>
{
	for(u8_t COL = 0 ; COL<4 ;COL++)
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);

		for(u8_t ROW = 0 ; ROW<4 ;ROW++)
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	28 f2       	brcs	.-118    	; 0x2324 <Keypad_getkey+0x34>
			{
				while(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0);
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	fc 01       	movw	r30, r24
    23a6:	e0 58       	subi	r30, 0x80	; 128
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	98 2f       	mov	r25, r24
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	69 2f       	mov	r22, r25
    23b4:	41 e0       	ldi	r20, 0x01	; 1
    23b6:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>

}

u8_t Keypad_getkey(void)
{
	for(u8_t COL = 0 ; COL<4 ;COL++)
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	8f 5f       	subi	r24, 0xFF	; 255
    23be:	8a 83       	std	Y+2, r24	; 0x02
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	84 30       	cpi	r24, 0x04	; 4
    23c4:	08 f4       	brcc	.+2      	; 0x23c8 <Keypad_getkey+0xd8>
    23c6:	9c cf       	rjmp	.-200    	; 0x2300 <Keypad_getkey+0x10>
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
	}
	return -1;
    23c8:	8f ef       	ldi	r24, 0xFF	; 255
    23ca:	8b 83       	std	Y+3, r24	; 0x03
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <Button_Init>:
 */
#include "Button_config.h"
#include "Button_interface.h"
#include "Button_private.h"
void Button_Init(u8_t L_u8ButtonNum)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <Button_Init+0x6>
    23e0:	0f 92       	push	r0
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	89 83       	std	Y+1, r24	; 0x01
   switch(L_u8ButtonNum)
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	3b 83       	std	Y+3, r19	; 0x03
    23f0:	2a 83       	std	Y+2, r18	; 0x02
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	9b 81       	ldd	r25, Y+3	; 0x03
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	91 05       	cpc	r25, r1
    23fa:	a1 f0       	breq	.+40     	; 0x2424 <Button_Init+0x4a>
    23fc:	2a 81       	ldd	r18, Y+2	; 0x02
    23fe:	3b 81       	ldd	r19, Y+3	; 0x03
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	d1 f0       	breq	.+52     	; 0x243a <Button_Init+0x60>
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	01 f5       	brne	.+64     	; 0x244e <Button_Init+0x74>
   {
	case BUTTON1: DIO_u8SetPinDirection(BUTTON1_PORT , BUTTON1_PIN , INPUT);
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON1_PORT ,BUTTON1_PIN ,HIGH);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    2422:	15 c0       	rjmp	.+42     	; 0x244e <Button_Init+0x74>
	              break ;
	case BUTTON2: DIO_u8SetPinDirection(BUTTON2_PORT , BUTTON2_PIN , INPUT);
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	61 e0       	ldi	r22, 0x01	; 1
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON2_PORT ,BUTTON2_PIN ,HIGH);
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
    2438:	0a c0       	rjmp	.+20     	; 0x244e <Button_Init+0x74>
	              break;
	case BUTTON3: DIO_u8SetPinDirection(BUTTON3_PORT , BUTTON3_PIN , INPUT);
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	62 e0       	ldi	r22, 0x02	; 2
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON3_PORT ,BUTTON3_PIN ,HIGH);
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	62 e0       	ldi	r22, 0x02	; 2
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_u8SetPinValue>
	              break;
   }
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <Button_u8GetButtonstatus>:

u8_t Button_u8GetButtonstatus(u8_t L_u8ButtonNum)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <Button_u8GetButtonstatus+0x6>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <Button_u8GetButtonstatus+0x8>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	8a 83       	std	Y+2, r24	; 0x02
	u8_t button_vall ;
	switch(L_u8ButtonNum)
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	3c 83       	std	Y+4, r19	; 0x04
    2470:	2b 83       	std	Y+3, r18	; 0x03
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	91 05       	cpc	r25, r1
    247a:	79 f0       	breq	.+30     	; 0x249a <Button_u8GetButtonstatus+0x40>
    247c:	2b 81       	ldd	r18, Y+3	; 0x03
    247e:	3c 81       	ldd	r19, Y+4	; 0x04
    2480:	22 30       	cpi	r18, 0x02	; 2
    2482:	31 05       	cpc	r19, r1
    2484:	81 f0       	breq	.+32     	; 0x24a6 <Button_u8GetButtonstatus+0x4c>
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	89 f4       	brne	.+34     	; 0x24b0 <Button_u8GetButtonstatus+0x56>
	{
	case BUTTON1:button_vall = DIO_u8GetBit(BUTTON1_PORT , BUTTON1_PIN); break ;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8GetBit>
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	0b c0       	rjmp	.+22     	; 0x24b0 <Button_u8GetButtonstatus+0x56>
	case BUTTON2:button_vall = DIO_u8GetBit(BUTTON2_PORT , BUTTON2_PIN); break ;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8GetBit>
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <Button_u8GetButtonstatus+0x56>
	case BUTTON3:button_vall = DIO_u8GetBit(BUTTON3_PORT , BUTTON3_PIN); break ;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	62 e0       	ldi	r22, 0x02	; 2
    24aa:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8GetBit>
    24ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return button_vall ;
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <Button_voidWaitForButton>:
void Button_voidWaitForButton(u8_t L_u8ButtonNum)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01
     while(1)
     {
   	  if(Button_u8GetButtonstatus(L_u8ButtonNum)==0)
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	0e 94 2d 12 	call	0x245a	; 0x245a <Button_u8GetButtonstatus>
    24d2:	88 23       	and	r24, r24
    24d4:	d9 f7       	brne	.-10     	; 0x24cc <Button_voidWaitForButton+0xc>
   	  {
   		 while(Button_u8GetButtonstatus(L_u8ButtonNum)==0);
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	0e 94 2d 12 	call	0x245a	; 0x245a <Button_u8GetButtonstatus>
    24dc:	88 23       	and	r24, r24
    24de:	d9 f3       	breq	.-10     	; 0x24d6 <Button_voidWaitForButton+0x16>
   		 break ;
   	  }
     }
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <main>:
#include "util/delay.h"

void f1();

int main()
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	LED_voidInit(LED1);
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	0e 94 af 0c 	call	0x195e	; 0x195e <LED_voidInit>
	TIM2_Init();
    24f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIM2_Init>
	TIM2_SetOVFCallback(f1);
    24fa:	8a e8       	ldi	r24, 0x8A	; 138
    24fc:	92 e1       	ldi	r25, 0x12	; 18
    24fe:	0e 94 5f 06 	call	0xcbe	; 0xcbe <TIM2_SetOVFCallback>
	TIM2_SetValueUS(1000000);
    2502:	60 e4       	ldi	r22, 0x40	; 64
    2504:	72 e4       	ldi	r23, 0x42	; 66
    2506:	8f e0       	ldi	r24, 0x0F	; 15
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <TIM2_SetValueUS>
	GIE_Enable();
    250e:	0e 94 d1 06 	call	0xda2	; 0xda2 <GIE_Enable>
    2512:	ff cf       	rjmp	.-2      	; 0x2512 <main+0x2a>

00002514 <f1>:

	return 0;
}

void f1(void) // 1ms
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	static u8_t x = 0;
	if(x == 0)
    251c:	80 91 a7 00 	lds	r24, 0x00A7
    2520:	88 23       	and	r24, r24
    2522:	39 f4       	brne	.+14     	; 0x2532 <f1+0x1e>
	{
		LED_voidSetLEDHigh(LED1);
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LED_voidSetLEDHigh>
		x = 1;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 93 a7 00 	sts	0x00A7, r24
    2530:	05 c0       	rjmp	.+10     	; 0x253c <f1+0x28>
	}
	else
	{
		LED_voidSetLEDLow(LED1);
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <LED_voidSetLEDLow>
		x = 0;
    2538:	10 92 a7 00 	sts	0x00A7, r1
	}

}
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <__udivmodsi4>:
    2542:	a1 e2       	ldi	r26, 0x21	; 33
    2544:	1a 2e       	mov	r1, r26
    2546:	aa 1b       	sub	r26, r26
    2548:	bb 1b       	sub	r27, r27
    254a:	fd 01       	movw	r30, r26
    254c:	0d c0       	rjmp	.+26     	; 0x2568 <__udivmodsi4_ep>

0000254e <__udivmodsi4_loop>:
    254e:	aa 1f       	adc	r26, r26
    2550:	bb 1f       	adc	r27, r27
    2552:	ee 1f       	adc	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	a2 17       	cp	r26, r18
    2558:	b3 07       	cpc	r27, r19
    255a:	e4 07       	cpc	r30, r20
    255c:	f5 07       	cpc	r31, r21
    255e:	20 f0       	brcs	.+8      	; 0x2568 <__udivmodsi4_ep>
    2560:	a2 1b       	sub	r26, r18
    2562:	b3 0b       	sbc	r27, r19
    2564:	e4 0b       	sbc	r30, r20
    2566:	f5 0b       	sbc	r31, r21

00002568 <__udivmodsi4_ep>:
    2568:	66 1f       	adc	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	1a 94       	dec	r1
    2572:	69 f7       	brne	.-38     	; 0x254e <__udivmodsi4_loop>
    2574:	60 95       	com	r22
    2576:	70 95       	com	r23
    2578:	80 95       	com	r24
    257a:	90 95       	com	r25
    257c:	9b 01       	movw	r18, r22
    257e:	ac 01       	movw	r20, r24
    2580:	bd 01       	movw	r22, r26
    2582:	cf 01       	movw	r24, r30
    2584:	08 95       	ret

00002586 <__prologue_saves__>:
    2586:	2f 92       	push	r2
    2588:	3f 92       	push	r3
    258a:	4f 92       	push	r4
    258c:	5f 92       	push	r5
    258e:	6f 92       	push	r6
    2590:	7f 92       	push	r7
    2592:	8f 92       	push	r8
    2594:	9f 92       	push	r9
    2596:	af 92       	push	r10
    2598:	bf 92       	push	r11
    259a:	cf 92       	push	r12
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	ca 1b       	sub	r28, r26
    25b0:	db 0b       	sbc	r29, r27
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	09 94       	ijmp

000025be <__epilogue_restores__>:
    25be:	2a 88       	ldd	r2, Y+18	; 0x12
    25c0:	39 88       	ldd	r3, Y+17	; 0x11
    25c2:	48 88       	ldd	r4, Y+16	; 0x10
    25c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    25cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    25d0:	b9 84       	ldd	r11, Y+9	; 0x09
    25d2:	c8 84       	ldd	r12, Y+8	; 0x08
    25d4:	df 80       	ldd	r13, Y+7	; 0x07
    25d6:	ee 80       	ldd	r14, Y+6	; 0x06
    25d8:	fd 80       	ldd	r15, Y+5	; 0x05
    25da:	0c 81       	ldd	r16, Y+4	; 0x04
    25dc:	1b 81       	ldd	r17, Y+3	; 0x03
    25de:	aa 81       	ldd	r26, Y+2	; 0x02
    25e0:	b9 81       	ldd	r27, Y+1	; 0x01
    25e2:	ce 0f       	add	r28, r30
    25e4:	d1 1d       	adc	r29, r1
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	ed 01       	movw	r28, r26
    25f2:	08 95       	ret

000025f4 <_exit>:
    25f4:	f8 94       	cli

000025f6 <__stop_program>:
    25f6:	ff cf       	rjmp	.-2      	; 0x25f6 <__stop_program>
