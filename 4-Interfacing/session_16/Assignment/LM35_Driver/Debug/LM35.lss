
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  000028f0  00002984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008001a2  008001a2  00002ac6  2**0
                  ALLOC
  3 .stab         0000375c  00000000  00000000  00002ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001676  00000000  00000000  00006224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000789a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00007a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00007bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00009bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000ad6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000bd70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000bf10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000c1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_1>
       8:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_2>
       c:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__vector_3>
      10:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a6 13 	call	0x274c	; 0x274c <main>
      8a:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 14 	jmp	0x282c	; 0x282c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 14 	jmp	0x282c	; 0x282c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <TIM2_Init>:
u32_t preload;

void (* func_ptr)(void);

void TIM2_Init(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	// CTC Mode
	CleartBit(TCCR2_Register, WGM20);
     cde:	a5 e4       	ldi	r26, 0x45	; 69
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e5 e4       	ldi	r30, 0x45	; 69
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7b       	andi	r24, 0xBF	; 191
     cea:	8c 93       	st	X, r24
	SetBit(TCCR2_Register, WGM21);
     cec:	a5 e4       	ldi	r26, 0x45	; 69
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e5 e4       	ldi	r30, 0x45	; 69
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	8c 93       	st	X, r24

	// Enable Overflow Interrupt
	SetBit(TIMSK_Register, OCIE2);
     cfa:	a9 e5       	ldi	r26, 0x59	; 89
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 e5       	ldi	r30, 0x59	; 89
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	8c 93       	st	X, r24


}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <TIM2_SetValueUS>:

void TIM2_SetValueUS(u32_t us)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <TIM2_SetValueUS+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <TIM2_SetValueUS+0x8>
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	69 83       	std	Y+1, r22	; 0x01
     d1c:	7a 83       	std	Y+2, r23	; 0x02
     d1e:	8b 83       	std	Y+3, r24	; 0x03
     d20:	9c 83       	std	Y+4, r25	; 0x04
	// Prescaler 8
	// Timer Freq = 1MHz
	// Tick_Time = 1uS
	// OVF Time = 2^(8 bits) * 1uS = 256uS

	TCNT2_Register = 0;
     d22:	e4 e4       	ldi	r30, 0x44	; 68
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	10 82       	st	Z, r1
    NoCounts = 255 ;
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	80 93 ab 01 	sts	0x01AB, r24
     d34:	90 93 ac 01 	sts	0x01AC, r25
     d38:	a0 93 ad 01 	sts	0x01AD, r26
     d3c:	b0 93 ae 01 	sts	0x01AE, r27
     d40:	13 c0       	rjmp	.+38     	; 0xd68 <TIM2_SetValueUS+0x5a>
    while((us % NoCounts)!=0)
    {
    	NoCounts-- ;
     d42:	80 91 ab 01 	lds	r24, 0x01AB
     d46:	90 91 ac 01 	lds	r25, 0x01AC
     d4a:	a0 91 ad 01 	lds	r26, 0x01AD
     d4e:	b0 91 ae 01 	lds	r27, 0x01AE
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	a1 09       	sbc	r26, r1
     d56:	b1 09       	sbc	r27, r1
     d58:	80 93 ab 01 	sts	0x01AB, r24
     d5c:	90 93 ac 01 	sts	0x01AC, r25
     d60:	a0 93 ad 01 	sts	0x01AD, r26
     d64:	b0 93 ae 01 	sts	0x01AE, r27
	// Tick_Time = 1uS
	// OVF Time = 2^(8 bits) * 1uS = 256uS

	TCNT2_Register = 0;
    NoCounts = 255 ;
    while((us % NoCounts)!=0)
     d68:	20 91 ab 01 	lds	r18, 0x01AB
     d6c:	30 91 ac 01 	lds	r19, 0x01AC
     d70:	40 91 ad 01 	lds	r20, 0x01AD
     d74:	50 91 ae 01 	lds	r21, 0x01AE
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	ab 81       	ldd	r26, Y+3	; 0x03
     d7e:	bc 81       	ldd	r27, Y+4	; 0x04
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__udivmodsi4>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	b9 f6       	brne	.-82     	; 0xd42 <TIM2_SetValueUS+0x34>
    {
    	NoCounts-- ;
    }
    OCR2_Register = NoCounts ;
     d94:	e3 e4       	ldi	r30, 0x43	; 67
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 91 ab 01 	lds	r24, 0x01AB
     d9c:	90 91 ac 01 	lds	r25, 0x01AC
     da0:	a0 91 ad 01 	lds	r26, 0x01AD
     da4:	b0 91 ae 01 	lds	r27, 0x01AE
     da8:	80 83       	st	Z, r24
    NoCounts = us / NoCounts ;
     daa:	20 91 ab 01 	lds	r18, 0x01AB
     dae:	30 91 ac 01 	lds	r19, 0x01AC
     db2:	40 91 ad 01 	lds	r20, 0x01AD
     db6:	50 91 ae 01 	lds	r21, 0x01AE
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	ab 81       	ldd	r26, Y+3	; 0x03
     dc0:	bc 81       	ldd	r27, Y+4	; 0x04
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__udivmodsi4>
     dca:	da 01       	movw	r26, r20
     dcc:	c9 01       	movw	r24, r18
     dce:	80 93 ab 01 	sts	0x01AB, r24
     dd2:	90 93 ac 01 	sts	0x01AC, r25
     dd6:	a0 93 ad 01 	sts	0x01AD, r26
     dda:	b0 93 ae 01 	sts	0x01AE, r27
	// Set Clock Source (Prescaler: 8)
	CleartBit(TCCR2_Register, CS20);
     dde:	a5 e4       	ldi	r26, 0x45	; 69
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 e4       	ldi	r30, 0x45	; 69
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8e 7f       	andi	r24, 0xFE	; 254
     dea:	8c 93       	st	X, r24
	SetBit(TCCR2_Register, CS21);
     dec:	a5 e4       	ldi	r26, 0x45	; 69
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e4       	ldi	r30, 0x45	; 69
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS22);
     dfa:	a5 e4       	ldi	r26, 0x45	; 69
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e4       	ldi	r30, 0x45	; 69
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8b 7f       	andi	r24, 0xFB	; 251
     e06:	8c 93       	st	X, r24
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <TIM2_Disable>:

void TIM2_Disable(void)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer (No clk)
	CleartBit(TCCR2_Register, CS20);
     e1e:	a5 e4       	ldi	r26, 0x45	; 69
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e4       	ldi	r30, 0x45	; 69
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS21);
     e2c:	a5 e4       	ldi	r26, 0x45	; 69
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e5 e4       	ldi	r30, 0x45	; 69
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8d 7f       	andi	r24, 0xFD	; 253
     e38:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS22);
     e3a:	a5 e4       	ldi	r26, 0x45	; 69
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e4       	ldi	r30, 0x45	; 69
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8b 7f       	andi	r24, 0xFB	; 251
     e46:	8c 93       	st	X, r24
}
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <TIM2_SetOVFCallback>:

void TIM2_SetOVFCallback(void (* ptr)(void))
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <TIM2_SetOVFCallback+0x6>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
	func_ptr = ptr;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	90 93 b0 01 	sts	0x01B0, r25
     e64:	80 93 af 01 	sts	0x01AF, r24
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <__vector_4>:

void __vector_4(void)
{
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	static u32_t counter = 0;
	if(counter == NoCounts)
     e9c:	20 91 a2 01 	lds	r18, 0x01A2
     ea0:	30 91 a3 01 	lds	r19, 0x01A3
     ea4:	40 91 a4 01 	lds	r20, 0x01A4
     ea8:	50 91 a5 01 	lds	r21, 0x01A5
     eac:	80 91 ab 01 	lds	r24, 0x01AB
     eb0:	90 91 ac 01 	lds	r25, 0x01AC
     eb4:	a0 91 ad 01 	lds	r26, 0x01AD
     eb8:	b0 91 ae 01 	lds	r27, 0x01AE
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	4a 07       	cpc	r20, r26
     ec2:	5b 07       	cpc	r21, r27
     ec4:	81 f4       	brne	.+32     	; 0xee6 <__vector_4+0x74>
	{
		func_ptr();
     ec6:	e0 91 af 01 	lds	r30, 0x01AF
     eca:	f0 91 b0 01 	lds	r31, 0x01B0
     ece:	09 95       	icall
		counter = 0;
     ed0:	10 92 a2 01 	sts	0x01A2, r1
     ed4:	10 92 a3 01 	sts	0x01A3, r1
     ed8:	10 92 a4 01 	sts	0x01A4, r1
     edc:	10 92 a5 01 	sts	0x01A5, r1
		TCNT2_Register = 0;
     ee0:	e4 e4       	ldi	r30, 0x44	; 68
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	10 82       	st	Z, r1
	}
	counter++;
     ee6:	80 91 a2 01 	lds	r24, 0x01A2
     eea:	90 91 a3 01 	lds	r25, 0x01A3
     eee:	a0 91 a4 01 	lds	r26, 0x01A4
     ef2:	b0 91 a5 01 	lds	r27, 0x01A5
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	a1 1d       	adc	r26, r1
     efa:	b1 1d       	adc	r27, r1
     efc:	80 93 a2 01 	sts	0x01A2, r24
     f00:	90 93 a3 01 	sts	0x01A3, r25
     f04:	a0 93 a4 01 	sts	0x01A4, r26
     f08:	b0 93 a5 01 	sts	0x01A5, r27
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <GIE_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"


void GIE_Enable(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG_Register, I_Bit);
     f3a:	af e5       	ldi	r26, 0x5F	; 95
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ef e5       	ldi	r30, 0x5F	; 95
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 68       	ori	r24, 0x80	; 128
     f46:	8c 93       	st	X, r24
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <GIE_Disable>:

void GIE_Disable(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	CleartBit(SREG_Register, I_Bit);
     f56:	af e5       	ldi	r26, 0x5F	; 95
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ef e5       	ldi	r30, 0x5F	; 95
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 77       	andi	r24, 0x7F	; 127
     f62:	8c 93       	st	X, r24
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <EXTI_Init>:
#include "EXTI_pirvate.h"



void EXTI_Init()
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	CleartBit(MCUCR_Register ,ISC01);
#elif EXTI0_MODE  == EXTI_FALLING
	CleartBit(MCUCR_Register ,ISC00);
	SetBit(MCUCR_Register ,ISC01);
#elif EXTI0_MODE  == EXTI_RISING
	SetBit(MCUCR_Register ,ISC00);
     f72:	a5 e5       	ldi	r26, 0x55	; 85
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e5       	ldi	r30, 0x55	; 85
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	8c 93       	st	X, r24
	SetBit(MCUCR_Register ,ISC01);
     f80:	a5 e5       	ldi	r26, 0x55	; 85
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e5 e5       	ldi	r30, 0x55	; 85
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	8c 93       	st	X, r24
	CleartBit(MCUCR_Register ,ISC11);
#elif EXTI1_MODE  == EXTI_ON_CHANGE
	SetBit(MCUCR_Register ,ISC00));
	CleartBit(MCUCR_Register ,ISC11);
#elif EXTI1_MODE  == EXTI_FALLING
	CleartBit(MCUCR_Register ,ISC00);
     f8e:	a5 e5       	ldi	r26, 0x55	; 85
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e5 e5       	ldi	r30, 0x55	; 85
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8e 7f       	andi	r24, 0xFE	; 254
     f9a:	8c 93       	st	X, r24
	SetBit(MCUCR_Register ,ISC11);
     f9c:	a5 e5       	ldi	r26, 0x55	; 85
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e5 e5       	ldi	r30, 0x55	; 85
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	88 60       	ori	r24, 0x08	; 8
     fa8:	8c 93       	st	X, r24


#if EXTI2_MODE  == EXTI_FALLING
	CleartBit(MCUCSR_Register ,ISC2);
#elif EXTI2_MODE  == EXTI_RISING
	SetBit(MCUCSR_Register ,ISC2);
     faa:	a4 e5       	ldi	r26, 0x54	; 84
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e4 e5       	ldi	r30, 0x54	; 84
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 64       	ori	r24, 0x40	; 64
     fb6:	8c 93       	st	X, r24

#endif

}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <EXTI_Enable>:


void EXTI_Enable(u8_t EXTI_Num)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <EXTI_Enable+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Num)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3b 83       	std	Y+3, r19	; 0x03
     fd4:	2a 83       	std	Y+2, r18	; 0x02
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 05       	cpc	r25, r1
     fde:	89 f0       	breq	.+34     	; 0x1002 <EXTI_Enable+0x44>
     fe0:	2a 81       	ldd	r18, Y+2	; 0x02
     fe2:	3b 81       	ldd	r19, Y+3	; 0x03
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	a1 f0       	breq	.+40     	; 0x1012 <EXTI_Enable+0x54>
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	9b 81       	ldd	r25, Y+3	; 0x03
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	b9 f4       	brne	.+46     	; 0x1020 <EXTI_Enable+0x62>
	{
	case EXTI0 : SetBit(GICR_Register ,INT0);break ;
     ff2:	ab e5       	ldi	r26, 0x5B	; 91
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	eb e5       	ldi	r30, 0x5B	; 91
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	8c 93       	st	X, r24
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <EXTI_Enable+0x62>
	case EXTI1 : SetBit(GICR_Register ,INT1);break ;
    1002:	ab e5       	ldi	r26, 0x5B	; 91
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	eb e5       	ldi	r30, 0x5B	; 91
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 68       	ori	r24, 0x80	; 128
    100e:	8c 93       	st	X, r24
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <EXTI_Enable+0x62>
	case EXTI2 : SetBit(GICR_Register ,INT2);break ;
    1012:	ab e5       	ldi	r26, 0x5B	; 91
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	eb e5       	ldi	r30, 0x5B	; 91
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 62       	ori	r24, 0x20	; 32
    101e:	8c 93       	st	X, r24
	}
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <EXTI_Disable>:

void EXTI_Disable(u8_t EXTI_Num)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <EXTI_Disable+0x6>
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Num)
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3b 83       	std	Y+3, r19	; 0x03
    1042:	2a 83       	std	Y+2, r18	; 0x02
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	9b 81       	ldd	r25, Y+3	; 0x03
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	91 05       	cpc	r25, r1
    104c:	89 f0       	breq	.+34     	; 0x1070 <EXTI_Disable+0x44>
    104e:	2a 81       	ldd	r18, Y+2	; 0x02
    1050:	3b 81       	ldd	r19, Y+3	; 0x03
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	a1 f0       	breq	.+40     	; 0x1080 <EXTI_Disable+0x54>
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	b9 f4       	brne	.+46     	; 0x108e <EXTI_Disable+0x62>
	{
	case EXTI0 : CleartBit(GICR_Register ,INT0);break ;
    1060:	ab e5       	ldi	r26, 0x5B	; 91
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e5       	ldi	r30, 0x5B	; 91
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7b       	andi	r24, 0xBF	; 191
    106c:	8c 93       	st	X, r24
    106e:	0f c0       	rjmp	.+30     	; 0x108e <EXTI_Disable+0x62>
	case EXTI1 : CleartBit(GICR_Register ,INT1);break ;
    1070:	ab e5       	ldi	r26, 0x5B	; 91
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	eb e5       	ldi	r30, 0x5B	; 91
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 77       	andi	r24, 0x7F	; 127
    107c:	8c 93       	st	X, r24
    107e:	07 c0       	rjmp	.+14     	; 0x108e <EXTI_Disable+0x62>
	case EXTI2 : CleartBit(GICR_Register ,INT2);break ;
    1080:	ab e5       	ldi	r26, 0x5B	; 91
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	eb e5       	ldi	r30, 0x5B	; 91
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8f 7d       	andi	r24, 0xDF	; 223
    108c:	8c 93       	st	X, r24
	}
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <Exti_setCallback>:

void Exti_setCallback(u8_t EXTI_num,void (*ptr)())
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <Exti_setCallback+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <Exti_setCallback+0x8>
    10a2:	0f 92       	push	r0
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	7b 83       	std	Y+3, r23	; 0x03
    10ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(EXTI_num)
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	3d 83       	std	Y+5, r19	; 0x05
    10b6:	2c 83       	std	Y+4, r18	; 0x04
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	9d 81       	ldd	r25, Y+5	; 0x05
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	81 f0       	breq	.+32     	; 0x10e2 <Exti_setCallback+0x48>
    10c2:	2c 81       	ldd	r18, Y+4	; 0x04
    10c4:	3d 81       	ldd	r19, Y+5	; 0x05
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	91 f0       	breq	.+36     	; 0x10f0 <Exti_setCallback+0x56>
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	a1 f4       	brne	.+40     	; 0x10fc <Exti_setCallback+0x62>
	{
	case EXTI0 : ptr1 = ptr;break ;
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	9b 81       	ldd	r25, Y+3	; 0x03
    10d8:	90 93 b4 01 	sts	0x01B4, r25
    10dc:	80 93 b3 01 	sts	0x01B3, r24
    10e0:	0d c0       	rjmp	.+26     	; 0x10fc <Exti_setCallback+0x62>
	case EXTI1 : ptr2 = ptr;break ;
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	90 93 b6 01 	sts	0x01B6, r25
    10ea:	80 93 b5 01 	sts	0x01B5, r24
    10ee:	06 c0       	rjmp	.+12     	; 0x10fc <Exti_setCallback+0x62>
	case EXTI2 : ptr3 = ptr;break ;
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	9b 81       	ldd	r25, Y+3	; 0x03
    10f4:	90 93 b2 01 	sts	0x01B2, r25
    10f8:	80 93 b1 01 	sts	0x01B1, r24
	}
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <__vector_1>:
void __vector_1(void)
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	5f 93       	push	r21
    111e:	6f 93       	push	r22
    1120:	7f 93       	push	r23
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	ptr1();
    1136:	e0 91 b3 01 	lds	r30, 0x01B3
    113a:	f0 91 b4 01 	lds	r31, 0x01B4
    113e:	09 95       	icall
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_2>:
void __vector_2(void)
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
	ptr2();
    1190:	e0 91 b5 01 	lds	r30, 0x01B5
    1194:	f0 91 b6 01 	lds	r31, 0x01B6
    1198:	09 95       	icall
}
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	ff 91       	pop	r31
    11a0:	ef 91       	pop	r30
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	7f 91       	pop	r23
    11ac:	6f 91       	pop	r22
    11ae:	5f 91       	pop	r21
    11b0:	4f 91       	pop	r20
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0
    11bc:	1f 90       	pop	r1
    11be:	18 95       	reti

000011c0 <__vector_3>:
void __vector_3(void)
{
    11c0:	1f 92       	push	r1
    11c2:	0f 92       	push	r0
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	0f 92       	push	r0
    11c8:	11 24       	eor	r1, r1
    11ca:	2f 93       	push	r18
    11cc:	3f 93       	push	r19
    11ce:	4f 93       	push	r20
    11d0:	5f 93       	push	r21
    11d2:	6f 93       	push	r22
    11d4:	7f 93       	push	r23
    11d6:	8f 93       	push	r24
    11d8:	9f 93       	push	r25
    11da:	af 93       	push	r26
    11dc:	bf 93       	push	r27
    11de:	ef 93       	push	r30
    11e0:	ff 93       	push	r31
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	ptr3();
    11ea:	e0 91 b1 01 	lds	r30, 0x01B1
    11ee:	f0 91 b2 01 	lds	r31, 0x01B2
    11f2:	09 95       	icall
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <DIO_u8SetPinValue>:

#include "DIO_private.h"
#include "DIO_interface.h"

u8_t DIO_u8SetPinValue(u8_t L_u8Port ,u8_t L_u8Pin ,u8_t L_u8Value)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	28 97       	sbiw	r28, 0x08	; 8
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	6a 83       	std	Y+2, r22	; 0x02
    1232:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Value == HIGH)
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	09 f0       	breq	.+2      	; 0x123c <DIO_u8SetPinValue+0x22>
    123a:	71 c0       	rjmp	.+226    	; 0x131e <DIO_u8SetPinValue+0x104>
	{
		switch(L_u8Port)
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	38 87       	std	Y+8, r19	; 0x08
    1244:	2f 83       	std	Y+7, r18	; 0x07
    1246:	8f 81       	ldd	r24, Y+7	; 0x07
    1248:	98 85       	ldd	r25, Y+8	; 0x08
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	49 f1       	breq	.+82     	; 0x12a2 <DIO_u8SetPinValue+0x88>
    1250:	2f 81       	ldd	r18, Y+7	; 0x07
    1252:	38 85       	ldd	r19, Y+8	; 0x08
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <DIO_u8SetPinValue+0x4a>
    125a:	8f 81       	ldd	r24, Y+7	; 0x07
    125c:	98 85       	ldd	r25, Y+8	; 0x08
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 f0       	breq	.+24     	; 0x127a <DIO_u8SetPinValue+0x60>
    1262:	5b c0       	rjmp	.+182    	; 0x131a <DIO_u8SetPinValue+0x100>
    1264:	2f 81       	ldd	r18, Y+7	; 0x07
    1266:	38 85       	ldd	r19, Y+8	; 0x08
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	71 f1       	breq	.+92     	; 0x12ca <DIO_u8SetPinValue+0xb0>
    126e:	8f 81       	ldd	r24, Y+7	; 0x07
    1270:	98 85       	ldd	r25, Y+8	; 0x08
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	e9 f1       	breq	.+122    	; 0x12f2 <DIO_u8SetPinValue+0xd8>
    1278:	50 c0       	rjmp	.+160    	; 0x131a <DIO_u8SetPinValue+0x100>
		{
		case PORTA : SetBit(PORTA_REG , L_u8Pin); break ;
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8SetPinValue+0x7e>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8SetPinValue+0x7a>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	ba c0       	rjmp	.+372    	; 0x1416 <DIO_u8SetPinValue+0x1fc>
		case PORTB : SetBit(PORTB_REG , L_u8Pin); break ;
    12a2:	a8 e3       	ldi	r26, 0x38	; 56
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8SetPinValue+0xa6>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8SetPinValue+0xa2>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	a6 c0       	rjmp	.+332    	; 0x1416 <DIO_u8SetPinValue+0x1fc>
		case PORTC : SetBit(PORTC_REG , L_u8Pin); break ;
    12ca:	a5 e3       	ldi	r26, 0x35	; 53
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e3       	ldi	r30, 0x35	; 53
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8SetPinValue+0xce>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8SetPinValue+0xca>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	92 c0       	rjmp	.+292    	; 0x1416 <DIO_u8SetPinValue+0x1fc>
		case PORTD : SetBit(PORTD_REG , L_u8Pin); break ;
    12f2:	a2 e3       	ldi	r26, 0x32	; 50
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e2 e3       	ldi	r30, 0x32	; 50
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8SetPinValue+0xf6>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8SetPinValue+0xf2>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	7e c0       	rjmp	.+252    	; 0x1416 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    131a:	1e 82       	std	Y+6, r1	; 0x06
    131c:	7e c0       	rjmp	.+252    	; 0x141a <DIO_u8SetPinValue+0x200>
		}
	}
	else if(L_u8Value == LOW)
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 23       	and	r24, r24
    1322:	09 f0       	breq	.+2      	; 0x1326 <DIO_u8SetPinValue+0x10c>
    1324:	76 c0       	rjmp	.+236    	; 0x1412 <DIO_u8SetPinValue+0x1f8>
	{
		switch(L_u8Port)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3d 83       	std	Y+5, r19	; 0x05
    132e:	2c 83       	std	Y+4, r18	; 0x04
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	59 f1       	breq	.+86     	; 0x1390 <DIO_u8SetPinValue+0x176>
    133a:	2c 81       	ldd	r18, Y+4	; 0x04
    133c:	3d 81       	ldd	r19, Y+5	; 0x05
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <DIO_u8SetPinValue+0x134>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f0       	breq	.+26     	; 0x1366 <DIO_u8SetPinValue+0x14c>
    134c:	60 c0       	rjmp	.+192    	; 0x140e <DIO_u8SetPinValue+0x1f4>
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	3d 81       	ldd	r19, Y+5	; 0x05
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	89 f1       	breq	.+98     	; 0x13ba <DIO_u8SetPinValue+0x1a0>
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	09 f4       	brne	.+2      	; 0x1364 <DIO_u8SetPinValue+0x14a>
    1362:	40 c0       	rjmp	.+128    	; 0x13e4 <DIO_u8SetPinValue+0x1ca>
    1364:	54 c0       	rjmp	.+168    	; 0x140e <DIO_u8SetPinValue+0x1f4>
		{
		case PORTA : CleartBit(PORTA_REG , L_u8Pin); break ;
    1366:	ab e3       	ldi	r26, 0x3B	; 59
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	eb e3       	ldi	r30, 0x3B	; 59
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_u8SetPinValue+0x16a>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_u8SetPinValue+0x166>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	43 c0       	rjmp	.+134    	; 0x1416 <DIO_u8SetPinValue+0x1fc>
		case PORTB : CleartBit(PORTB_REG , L_u8Pin); break ;
    1390:	a8 e3       	ldi	r26, 0x38	; 56
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e8 e3       	ldi	r30, 0x38	; 56
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_u8SetPinValue+0x194>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_u8SetPinValue+0x190>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	2e c0       	rjmp	.+92     	; 0x1416 <DIO_u8SetPinValue+0x1fc>
		case PORTC : CleartBit(PORTC_REG , L_u8Pin); break ;
    13ba:	a5 e3       	ldi	r26, 0x35	; 53
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e3       	ldi	r30, 0x35	; 53
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_u8SetPinValue+0x1be>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_u8SetPinValue+0x1ba>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	19 c0       	rjmp	.+50     	; 0x1416 <DIO_u8SetPinValue+0x1fc>
		case PORTD : CleartBit(PORTD_REG , L_u8Pin); break ;
    13e4:	a2 e3       	ldi	r26, 0x32	; 50
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_u8SetPinValue+0x1e8>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_u8SetPinValue+0x1e4>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    140e:	1e 82       	std	Y+6, r1	; 0x06
    1410:	04 c0       	rjmp	.+8      	; 0x141a <DIO_u8SetPinValue+0x200>
		}
	}
	else
	{
		return ERROR ;
    1412:	1e 82       	std	Y+6, r1	; 0x06
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_u8SetPinValue+0x200>
	}
	return NO_ERROR ;
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    141c:	28 96       	adiw	r28, 0x08	; 8
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <DIO_u8SetPinDirection>:
u8_t DIO_u8SetPinDirection(u8_t L_u8Port ,u8_t L_u8Pin ,u8_t L_u8Direction)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	28 97       	sbiw	r28, 0x08	; 8
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
    1446:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Direction== OUTPUT)
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	09 f0       	breq	.+2      	; 0x1450 <DIO_u8SetPinDirection+0x22>
    144e:	71 c0       	rjmp	.+226    	; 0x1532 <DIO_u8SetPinDirection+0x104>
	{
		switch(L_u8Port)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	38 87       	std	Y+8, r19	; 0x08
    1458:	2f 83       	std	Y+7, r18	; 0x07
    145a:	8f 81       	ldd	r24, Y+7	; 0x07
    145c:	98 85       	ldd	r25, Y+8	; 0x08
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	49 f1       	breq	.+82     	; 0x14b6 <DIO_u8SetPinDirection+0x88>
    1464:	2f 81       	ldd	r18, Y+7	; 0x07
    1466:	38 85       	ldd	r19, Y+8	; 0x08
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <DIO_u8SetPinDirection+0x4a>
    146e:	8f 81       	ldd	r24, Y+7	; 0x07
    1470:	98 85       	ldd	r25, Y+8	; 0x08
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	61 f0       	breq	.+24     	; 0x148e <DIO_u8SetPinDirection+0x60>
    1476:	5b c0       	rjmp	.+182    	; 0x152e <DIO_u8SetPinDirection+0x100>
    1478:	2f 81       	ldd	r18, Y+7	; 0x07
    147a:	38 85       	ldd	r19, Y+8	; 0x08
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	71 f1       	breq	.+92     	; 0x14de <DIO_u8SetPinDirection+0xb0>
    1482:	8f 81       	ldd	r24, Y+7	; 0x07
    1484:	98 85       	ldd	r25, Y+8	; 0x08
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	e9 f1       	breq	.+122    	; 0x1506 <DIO_u8SetPinDirection+0xd8>
    148c:	50 c0       	rjmp	.+160    	; 0x152e <DIO_u8SetPinDirection+0x100>
		{
		case PORTA : SetBit(DDRA_REG , L_u8Pin); break ;
    148e:	aa e3       	ldi	r26, 0x3A	; 58
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ea e3       	ldi	r30, 0x3A	; 58
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_u8SetPinDirection+0x7e>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_u8SetPinDirection+0x7a>
    14b0:	84 2b       	or	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	ba c0       	rjmp	.+372    	; 0x162a <DIO_u8SetPinDirection+0x1fc>
		case PORTB : SetBit(DDRB_REG , L_u8Pin); break ;
    14b6:	a7 e3       	ldi	r26, 0x37	; 55
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e7 e3       	ldi	r30, 0x37	; 55
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8SetPinDirection+0xa6>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_u8SetPinDirection+0xa2>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	a6 c0       	rjmp	.+332    	; 0x162a <DIO_u8SetPinDirection+0x1fc>
		case PORTC : SetBit(DDRC_REG , L_u8Pin); break ;
    14de:	a4 e3       	ldi	r26, 0x34	; 52
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e4 e3       	ldi	r30, 0x34	; 52
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8SetPinDirection+0xce>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_u8SetPinDirection+0xca>
    1500:	84 2b       	or	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	92 c0       	rjmp	.+292    	; 0x162a <DIO_u8SetPinDirection+0x1fc>
		case PORTD : SetBit(DDRD_REG , L_u8Pin); break ;
    1506:	a1 e3       	ldi	r26, 0x31	; 49
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e1 e3       	ldi	r30, 0x31	; 49
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_u8SetPinDirection+0xf6>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_u8SetPinDirection+0xf2>
    1528:	84 2b       	or	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	7e c0       	rjmp	.+252    	; 0x162a <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    152e:	1e 82       	std	Y+6, r1	; 0x06
    1530:	7e c0       	rjmp	.+252    	; 0x162e <DIO_u8SetPinDirection+0x200>
		}
	}
	else if(L_u8Direction == INPUT)
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	88 23       	and	r24, r24
    1536:	09 f0       	breq	.+2      	; 0x153a <DIO_u8SetPinDirection+0x10c>
    1538:	76 c0       	rjmp	.+236    	; 0x1626 <DIO_u8SetPinDirection+0x1f8>
	{
		switch(L_u8Port)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3d 83       	std	Y+5, r19	; 0x05
    1542:	2c 83       	std	Y+4, r18	; 0x04
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	91 05       	cpc	r25, r1
    154c:	59 f1       	breq	.+86     	; 0x15a4 <DIO_u8SetPinDirection+0x176>
    154e:	2c 81       	ldd	r18, Y+4	; 0x04
    1550:	3d 81       	ldd	r19, Y+5	; 0x05
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	2c f4       	brge	.+10     	; 0x1562 <DIO_u8SetPinDirection+0x134>
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	69 f0       	breq	.+26     	; 0x157a <DIO_u8SetPinDirection+0x14c>
    1560:	60 c0       	rjmp	.+192    	; 0x1622 <DIO_u8SetPinDirection+0x1f4>
    1562:	2c 81       	ldd	r18, Y+4	; 0x04
    1564:	3d 81       	ldd	r19, Y+5	; 0x05
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	89 f1       	breq	.+98     	; 0x15ce <DIO_u8SetPinDirection+0x1a0>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <DIO_u8SetPinDirection+0x14a>
    1576:	40 c0       	rjmp	.+128    	; 0x15f8 <DIO_u8SetPinDirection+0x1ca>
    1578:	54 c0       	rjmp	.+168    	; 0x1622 <DIO_u8SetPinDirection+0x1f4>
		{
		case PORTA : CleartBit(DDRA_REG , L_u8Pin); break ;
    157a:	aa e3       	ldi	r26, 0x3A	; 58
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ea e3       	ldi	r30, 0x3A	; 58
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8SetPinDirection+0x16a>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_u8SetPinDirection+0x166>
    159c:	80 95       	com	r24
    159e:	84 23       	and	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	43 c0       	rjmp	.+134    	; 0x162a <DIO_u8SetPinDirection+0x1fc>
		case PORTB : CleartBit(DDRB_REG , L_u8Pin); break ;
    15a4:	a7 e3       	ldi	r26, 0x37	; 55
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_u8SetPinDirection+0x194>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_u8SetPinDirection+0x190>
    15c6:	80 95       	com	r24
    15c8:	84 23       	and	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	2e c0       	rjmp	.+92     	; 0x162a <DIO_u8SetPinDirection+0x1fc>
		case PORTC : CleartBit(DDRC_REG , L_u8Pin); break ;
    15ce:	a4 e3       	ldi	r26, 0x34	; 52
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e4 e3       	ldi	r30, 0x34	; 52
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_u8SetPinDirection+0x1be>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_u8SetPinDirection+0x1ba>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	19 c0       	rjmp	.+50     	; 0x162a <DIO_u8SetPinDirection+0x1fc>
		case PORTD : CleartBit(DDRD_REG , L_u8Pin); break ;
    15f8:	a1 e3       	ldi	r26, 0x31	; 49
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e1 e3       	ldi	r30, 0x31	; 49
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_u8SetPinDirection+0x1e8>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_u8SetPinDirection+0x1e4>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	04 c0       	rjmp	.+8      	; 0x162a <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    1622:	1e 82       	std	Y+6, r1	; 0x06
    1624:	04 c0       	rjmp	.+8      	; 0x162e <DIO_u8SetPinDirection+0x200>
		}
	}
	else
	{
		return ERROR ;
    1626:	1e 82       	std	Y+6, r1	; 0x06
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_u8SetPinDirection+0x200>
	}

	return NO_ERROR ;
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1630:	28 96       	adiw	r28, 0x08	; 8
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <DIO_u8GetBit>:

u8_t DIO_u8GetBit(u8_t L_u8Port ,u8_t L_u8Pin )
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <DIO_u8GetBit+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <DIO_u8GetBit+0x8>
    164a:	00 d0       	rcall	.+0      	; 0x164c <DIO_u8GetBit+0xa>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	8a 83       	std	Y+2, r24	; 0x02
    1652:	6b 83       	std	Y+3, r22	; 0x03
	u8_t L_u8pinval ;
	switch(L_u8Port)
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	3e 83       	std	Y+6, r19	; 0x06
    165c:	2d 83       	std	Y+5, r18	; 0x05
    165e:	4d 81       	ldd	r20, Y+5	; 0x05
    1660:	5e 81       	ldd	r21, Y+6	; 0x06
    1662:	41 30       	cpi	r20, 0x01	; 1
    1664:	51 05       	cpc	r21, r1
    1666:	41 f1       	breq	.+80     	; 0x16b8 <DIO_u8GetBit+0x76>
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	91 05       	cpc	r25, r1
    1670:	34 f4       	brge	.+12     	; 0x167e <DIO_u8GetBit+0x3c>
    1672:	2d 81       	ldd	r18, Y+5	; 0x05
    1674:	3e 81       	ldd	r19, Y+6	; 0x06
    1676:	21 15       	cp	r18, r1
    1678:	31 05       	cpc	r19, r1
    167a:	61 f0       	breq	.+24     	; 0x1694 <DIO_u8GetBit+0x52>
    167c:	53 c0       	rjmp	.+166    	; 0x1724 <DIO_u8GetBit+0xe2>
    167e:	4d 81       	ldd	r20, Y+5	; 0x05
    1680:	5e 81       	ldd	r21, Y+6	; 0x06
    1682:	42 30       	cpi	r20, 0x02	; 2
    1684:	51 05       	cpc	r21, r1
    1686:	51 f1       	breq	.+84     	; 0x16dc <DIO_u8GetBit+0x9a>
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	b9 f1       	breq	.+110    	; 0x1700 <DIO_u8GetBit+0xbe>
    1692:	48 c0       	rjmp	.+144    	; 0x1724 <DIO_u8GetBit+0xe2>
	{
	case PORTA :L_u8pinval = GetBit(PINA_REG , L_u8Pin); break ;
    1694:	e9 e3       	ldi	r30, 0x39	; 57
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_u8GetBit+0x6a>
    16a8:	55 95       	asr	r21
    16aa:	47 95       	ror	r20
    16ac:	8a 95       	dec	r24
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_u8GetBit+0x66>
    16b0:	ca 01       	movw	r24, r20
    16b2:	81 70       	andi	r24, 0x01	; 1
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	38 c0       	rjmp	.+112    	; 0x1728 <DIO_u8GetBit+0xe6>
	case PORTB :L_u8pinval = GetBit(PINB_REG , L_u8Pin); break ;
    16b8:	e6 e3       	ldi	r30, 0x36	; 54
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a9 01       	movw	r20, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_u8GetBit+0x8e>
    16cc:	55 95       	asr	r21
    16ce:	47 95       	ror	r20
    16d0:	8a 95       	dec	r24
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_u8GetBit+0x8a>
    16d4:	ca 01       	movw	r24, r20
    16d6:	81 70       	andi	r24, 0x01	; 1
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	26 c0       	rjmp	.+76     	; 0x1728 <DIO_u8GetBit+0xe6>
	case PORTC :L_u8pinval = GetBit(PINC_REG , L_u8Pin); break ;
    16dc:	e3 e3       	ldi	r30, 0x33	; 51
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a9 01       	movw	r20, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_u8GetBit+0xb2>
    16f0:	55 95       	asr	r21
    16f2:	47 95       	ror	r20
    16f4:	8a 95       	dec	r24
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_u8GetBit+0xae>
    16f8:	ca 01       	movw	r24, r20
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <DIO_u8GetBit+0xe6>
	case PORTD :L_u8pinval = GetBit(PIND_REG , L_u8Pin); break ;
    1700:	e0 e3       	ldi	r30, 0x30	; 48
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	88 2f       	mov	r24, r24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a9 01       	movw	r20, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_u8GetBit+0xd6>
    1714:	55 95       	asr	r21
    1716:	47 95       	ror	r20
    1718:	8a 95       	dec	r24
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_u8GetBit+0xd2>
    171c:	ca 01       	movw	r24, r20
    171e:	81 70       	andi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8GetBit+0xe6>
	default : return ERROR ; break ;
    1724:	1c 82       	std	Y+4, r1	; 0x04
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_u8GetBit+0xea>
	}

	return L_u8pinval ;
    1728:	59 81       	ldd	r21, Y+1	; 0x01
    172a:	5c 83       	std	Y+4, r21	; 0x04
    172c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    172e:	26 96       	adiw	r28, 0x06	; 6
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <DIO_u8GetPort>:

u8_t DIO_u8GetPort(u8_t L_u8Port )
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <DIO_u8GetPort+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <DIO_u8GetPort+0x8>
    1748:	0f 92       	push	r0
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	8a 83       	std	Y+2, r24	; 0x02
	u8_t L_u8pinval ;
	switch(L_u8Port)
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	3d 83       	std	Y+5, r19	; 0x05
    1758:	2c 83       	std	Y+4, r18	; 0x04
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	9d 81       	ldd	r25, Y+5	; 0x05
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 05       	cpc	r25, r1
    1762:	d1 f0       	breq	.+52     	; 0x1798 <DIO_u8GetPort+0x58>
    1764:	2c 81       	ldd	r18, Y+4	; 0x04
    1766:	3d 81       	ldd	r19, Y+5	; 0x05
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	2c f4       	brge	.+10     	; 0x1778 <DIO_u8GetPort+0x38>
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	61 f0       	breq	.+24     	; 0x178e <DIO_u8GetPort+0x4e>
    1776:	1f c0       	rjmp	.+62     	; 0x17b6 <DIO_u8GetPort+0x76>
    1778:	2c 81       	ldd	r18, Y+4	; 0x04
    177a:	3d 81       	ldd	r19, Y+5	; 0x05
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	81 f0       	breq	.+32     	; 0x17a2 <DIO_u8GetPort+0x62>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	91 05       	cpc	r25, r1
    178a:	81 f0       	breq	.+32     	; 0x17ac <DIO_u8GetPort+0x6c>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <DIO_u8GetPort+0x76>
	{
	case PORTA :L_u8pinval = PINA_REG; break ;
    178e:	e9 e3       	ldi	r30, 0x39	; 57
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	11 c0       	rjmp	.+34     	; 0x17ba <DIO_u8GetPort+0x7a>
	case PORTB :L_u8pinval = PINB_REG; break ;
    1798:	e6 e3       	ldi	r30, 0x36	; 54
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	0c c0       	rjmp	.+24     	; 0x17ba <DIO_u8GetPort+0x7a>
	case PORTC :L_u8pinval = PINC_REG; break ;
    17a2:	e3 e3       	ldi	r30, 0x33	; 51
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <DIO_u8GetPort+0x7a>
	case PORTD :L_u8pinval = PIND_REG; break ;
    17ac:	e0 e3       	ldi	r30, 0x30	; 48
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_u8GetPort+0x7a>
	default : return ERROR ; break ;
    17b6:	1b 82       	std	Y+3, r1	; 0x03
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_u8GetPort+0x7e>
	}

	return L_u8pinval ;
    17ba:	99 81       	ldd	r25, Y+1	; 0x01
    17bc:	9b 83       	std	Y+3, r25	; 0x03
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <DIO_u8SetPortValue>:

u8_t DIO_u8SetPortValue(u8_t L_u8Port ,u8_t L_u8Value)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <DIO_u8SetPortValue+0x6>
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <DIO_u8SetPortValue+0x8>
    17d8:	0f 92       	push	r0
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3d 83       	std	Y+5, r19	; 0x05
    17ea:	2c 83       	std	Y+4, r18	; 0x04
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	9d 81       	ldd	r25, Y+5	; 0x05
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	91 05       	cpc	r25, r1
    17f4:	d1 f0       	breq	.+52     	; 0x182a <DIO_u8SetPortValue+0x5a>
    17f6:	2c 81       	ldd	r18, Y+4	; 0x04
    17f8:	3d 81       	ldd	r19, Y+5	; 0x05
    17fa:	22 30       	cpi	r18, 0x02	; 2
    17fc:	31 05       	cpc	r19, r1
    17fe:	2c f4       	brge	.+10     	; 0x180a <DIO_u8SetPortValue+0x3a>
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	61 f0       	breq	.+24     	; 0x1820 <DIO_u8SetPortValue+0x50>
    1808:	1f c0       	rjmp	.+62     	; 0x1848 <DIO_u8SetPortValue+0x78>
    180a:	2c 81       	ldd	r18, Y+4	; 0x04
    180c:	3d 81       	ldd	r19, Y+5	; 0x05
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	81 f0       	breq	.+32     	; 0x1834 <DIO_u8SetPortValue+0x64>
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	91 05       	cpc	r25, r1
    181c:	81 f0       	breq	.+32     	; 0x183e <DIO_u8SetPortValue+0x6e>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <DIO_u8SetPortValue+0x78>
	{
	case PORTA: PORTA_REG = L_u8Value; break;
    1820:	eb e3       	ldi	r30, 0x3B	; 59
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	80 83       	st	Z, r24
    1828:	11 c0       	rjmp	.+34     	; 0x184c <DIO_u8SetPortValue+0x7c>
	case PORTB: PORTB_REG = L_u8Value; break;
    182a:	e8 e3       	ldi	r30, 0x38	; 56
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	80 83       	st	Z, r24
    1832:	0c c0       	rjmp	.+24     	; 0x184c <DIO_u8SetPortValue+0x7c>
	case PORTC: PORTC_REG = L_u8Value; break;
    1834:	e5 e3       	ldi	r30, 0x35	; 53
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	80 83       	st	Z, r24
    183c:	07 c0       	rjmp	.+14     	; 0x184c <DIO_u8SetPortValue+0x7c>
	case PORTD: PORTD_REG = L_u8Value; break;
    183e:	e2 e3       	ldi	r30, 0x32	; 50
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	80 83       	st	Z, r24
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_u8SetPortValue+0x7c>
	default: return ERROR; break;
    1848:	1b 82       	std	Y+3, r1	; 0x03
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_u8SetPortValue+0x80>
	}
	return NO_ERROR ;
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	9b 83       	std	Y+3, r25	; 0x03
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <DIO_u8SetPortDirection>:
u8_t DIO_u8SetPortDirection(u8_t L_u8Port ,u8_t L_u8Direction)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <DIO_u8SetPortDirection+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <DIO_u8SetPortDirection+0x8>
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	6a 83       	std	Y+2, r22	; 0x02
	if(L_u8Direction==OUTPUT)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	19 f4       	brne	.+6      	; 0x1880 <DIO_u8SetPortDirection+0x1e>
		L_u8Direction =0xFF;
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <DIO_u8SetPortDirection+0x20>
	else
	{
		L_u8Direction =0x00;
    1880:	1a 82       	std	Y+2, r1	; 0x02
	}
	switch(L_u8Port)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3d 83       	std	Y+5, r19	; 0x05
    188a:	2c 83       	std	Y+4, r18	; 0x04
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	9d 81       	ldd	r25, Y+5	; 0x05
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	d1 f0       	breq	.+52     	; 0x18ca <DIO_u8SetPortDirection+0x68>
    1896:	2c 81       	ldd	r18, Y+4	; 0x04
    1898:	3d 81       	ldd	r19, Y+5	; 0x05
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	2c f4       	brge	.+10     	; 0x18aa <DIO_u8SetPortDirection+0x48>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <DIO_u8SetPortDirection+0x5e>
    18a8:	1f c0       	rjmp	.+62     	; 0x18e8 <DIO_u8SetPortDirection+0x86>
    18aa:	2c 81       	ldd	r18, Y+4	; 0x04
    18ac:	3d 81       	ldd	r19, Y+5	; 0x05
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	81 f0       	breq	.+32     	; 0x18d4 <DIO_u8SetPortDirection+0x72>
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	9d 81       	ldd	r25, Y+5	; 0x05
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	91 05       	cpc	r25, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <DIO_u8SetPortDirection+0x7c>
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <DIO_u8SetPortDirection+0x86>
	{
		case PORTA: DDRA_REG = L_u8Direction; break;
    18c0:	ea e3       	ldi	r30, 0x3A	; 58
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	80 83       	st	Z, r24
    18c8:	11 c0       	rjmp	.+34     	; 0x18ec <DIO_u8SetPortDirection+0x8a>
		case PORTB: DDRB_REG = L_u8Direction; break;
    18ca:	e7 e3       	ldi	r30, 0x37	; 55
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	80 83       	st	Z, r24
    18d2:	0c c0       	rjmp	.+24     	; 0x18ec <DIO_u8SetPortDirection+0x8a>
		case PORTC: DDRC_REG = L_u8Direction; break;
    18d4:	e4 e3       	ldi	r30, 0x34	; 52
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	80 83       	st	Z, r24
    18dc:	07 c0       	rjmp	.+14     	; 0x18ec <DIO_u8SetPortDirection+0x8a>
		case PORTD: DDRD_REG = L_u8Direction; break;
    18de:	e1 e3       	ldi	r30, 0x31	; 49
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	80 83       	st	Z, r24
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <DIO_u8SetPortDirection+0x8a>
		default: return ERROR; break;
    18e8:	1b 82       	std	Y+3, r1	; 0x03
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_u8SetPortDirection+0x8e>
	}
	return NO_ERROR ;
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	9b 83       	std	Y+3, r25	; 0x03
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <ADC_Init>:
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_config.h"

void ADC_Init(void)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
     ADMUX_Register = 0 ;
    190a:	e7 e2       	ldi	r30, 0x27	; 39
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	10 82       	st	Z, r1
     ADCSRA_Register = 0 ;
    1910:	e6 e2       	ldi	r30, 0x26	; 38
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	10 82       	st	Z, r1

	SetBit(ADCSRA_Register , ADEN);
    1916:	a6 e2       	ldi	r26, 0x26	; 38
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e6 e2       	ldi	r30, 0x26	; 38
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 68       	ori	r24, 0x80	; 128
    1922:	8c 93       	st	X, r24

	//set prescaler
	ADCSRA_Register |=ADC_PSC <<ADPS0;
    1924:	a6 e2       	ldi	r26, 0x26	; 38
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e6 e2       	ldi	r30, 0x26	; 38
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	85 60       	ori	r24, 0x05	; 5
    1930:	8c 93       	st	X, r24

	//set reference
	ADMUX_Register |= ADC_REF  <<REFS0 ;
    1932:	a7 e2       	ldi	r26, 0x27	; 39
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e7 e2       	ldi	r30, 0x27	; 39
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	80 64       	ori	r24, 0x40	; 64
    193e:	8c 93       	st	X, r24

	//set result adjust

	ADMUX_Register |= ADC_ADJUST <<ADLAR ;
    1940:	a7 e2       	ldi	r26, 0x27	; 39
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e7 e2       	ldi	r30, 0x27	; 39
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8c 93       	st	X, r24
}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <ADC_Selectchannel>:

void ADC_Selectchannel(u8_t channel)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	0f 92       	push	r0
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	89 83       	std	Y+1, r24	; 0x01
    ADMUX_Register &=0b11100000 ;
    195e:	a7 e2       	ldi	r26, 0x27	; 39
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e7 e2       	ldi	r30, 0x27	; 39
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	80 7e       	andi	r24, 0xE0	; 224
    196a:	8c 93       	st	X, r24
	ADMUX_Register |= channel <<MUX0 ;
    196c:	a7 e2       	ldi	r26, 0x27	; 39
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e7 e2       	ldi	r30, 0x27	; 39
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	90 81       	ld	r25, Z
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	89 2b       	or	r24, r25
    197a:	8c 93       	st	X, r24
}
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <ADC_StartConversion>:

u16_t ADC_StartConversion(void)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
	//start conversion
	SetBit(ADCSRA_Register ,ADSC);
    198c:	a6 e2       	ldi	r26, 0x26	; 38
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e6 e2       	ldi	r30, 0x26	; 38
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	80 64       	ori	r24, 0x40	; 64
    1998:	8c 93       	st	X, r24

	//wait for conversion to complete
	while(GetBit(ADCSRA_Register , ADSC));
    199a:	e6 e2       	ldi	r30, 0x26	; 38
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	82 95       	swap	r24
    19a2:	86 95       	lsr	r24
    19a4:	86 95       	lsr	r24
    19a6:	83 70       	andi	r24, 0x03	; 3
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	81 70       	andi	r24, 0x01	; 1
    19ae:	90 70       	andi	r25, 0x00	; 0
    19b0:	88 23       	and	r24, r24
    19b2:	99 f7       	brne	.-26     	; 0x199a <ADC_StartConversion+0x16>

	return ADCDATA_Register ;
    19b4:	e4 e2       	ldi	r30, 0x24	; 36
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
}
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <Steper_Init>:
#include "Steper_private.h"

 static u8_t Current_pattern = 0 ;

void Steper_Init()
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	for(u8_t i = 0 ; i< NUM_OF_COILS ;i++)
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	1a c0       	rjmp	.+52     	; 0x1a04 <Steper_Init+0x42>
    DIO_u8SetPinDirection(coils[i].port ,coils[i].pin ,OUTPUT );
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	fc 01       	movw	r30, r24
    19dc:	e8 59       	subi	r30, 0x98	; 152
    19de:	fe 4f       	sbci	r31, 0xFE	; 254
    19e0:	20 81       	ld	r18, Z
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	fc 01       	movw	r30, r24
    19ee:	e7 59       	subi	r30, 0x97	; 151
    19f0:	fe 4f       	sbci	r31, 0xFE	; 254
    19f2:	90 81       	ld	r25, Z
    19f4:	82 2f       	mov	r24, r18
    19f6:	69 2f       	mov	r22, r25
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>

 static u8_t Current_pattern = 0 ;

void Steper_Init()
{
	for(u8_t i = 0 ; i< NUM_OF_COILS ;i++)
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	18 f3       	brcs	.-58     	; 0x19d0 <Steper_Init+0xe>
    DIO_u8SetPinDirection(coils[i].port ,coils[i].pin ,OUTPUT );
}
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <Steper_StepCW>:
void Steper_StepCW()
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62


   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1a1c:	19 82       	std	Y+1, r1	; 0x01
    1a1e:	30 c0       	rjmp	.+96     	; 0x1a80 <Steper_StepCW+0x6e>
   {
	   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	e8 59       	subi	r30, 0x98	; 152
    1a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a30:	40 81       	ld	r20, Z
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	e7 59       	subi	r30, 0x97	; 151
    1a40:	fe 4f       	sbci	r31, 0xFE	; 254
    1a42:	50 81       	ld	r21, Z
    1a44:	80 91 a6 01 	lds	r24, 0x01A6
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	e0 59       	subi	r30, 0x90	; 144
    1a50:	fe 4f       	sbci	r31, 0xFE	; 254
    1a52:	80 81       	ld	r24, Z
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	b9 01       	movw	r22, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <Steper_StepCW+0x54>
    1a62:	75 95       	asr	r23
    1a64:	67 95       	ror	r22
    1a66:	8a 95       	dec	r24
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <Steper_StepCW+0x50>
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	91 70       	andi	r25, 0x01	; 1
    1a70:	84 2f       	mov	r24, r20
    1a72:	65 2f       	mov	r22, r21
    1a74:	49 2f       	mov	r20, r25
    1a76:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
}
void Steper_StepCW()
{


   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	8f 5f       	subi	r24, 0xFF	; 255
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	84 30       	cpi	r24, 0x04	; 4
    1a84:	68 f2       	brcs	.-102    	; 0x1a20 <Steper_StepCW+0xe>
   {
	   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
   }
  Current_pattern++ ;
    1a86:	80 91 a6 01 	lds	r24, 0x01A6
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	80 93 a6 01 	sts	0x01A6, r24
  if(Current_pattern>7) Current_pattern = 0 ;
    1a90:	80 91 a6 01 	lds	r24, 0x01A6
    1a94:	88 30       	cpi	r24, 0x08	; 8
    1a96:	10 f0       	brcs	.+4      	; 0x1a9c <Steper_StepCW+0x8a>
    1a98:	10 92 a6 01 	sts	0x01A6, r1
}
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <Steper_StepCCW>:
void Steper_StepCCW()
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	0f 92       	push	r0
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62

	   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1aae:	19 82       	std	Y+1, r1	; 0x01
    1ab0:	30 c0       	rjmp	.+96     	; 0x1b12 <Steper_StepCCW+0x6e>
	   {
		   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	fc 01       	movw	r30, r24
    1abe:	e8 59       	subi	r30, 0x98	; 152
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	40 81       	ld	r20, Z
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	fc 01       	movw	r30, r24
    1ad0:	e7 59       	subi	r30, 0x97	; 151
    1ad2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad4:	50 81       	ld	r21, Z
    1ad6:	80 91 a6 01 	lds	r24, 0x01A6
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e0 59       	subi	r30, 0x90	; 144
    1ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae4:	80 81       	ld	r24, Z
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	b9 01       	movw	r22, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <Steper_StepCCW+0x54>
    1af4:	75 95       	asr	r23
    1af6:	67 95       	ror	r22
    1af8:	8a 95       	dec	r24
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <Steper_StepCCW+0x50>
    1afc:	cb 01       	movw	r24, r22
    1afe:	98 2f       	mov	r25, r24
    1b00:	91 70       	andi	r25, 0x01	; 1
    1b02:	84 2f       	mov	r24, r20
    1b04:	65 2f       	mov	r22, r21
    1b06:	49 2f       	mov	r20, r25
    1b08:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
  if(Current_pattern>7) Current_pattern = 0 ;
}
void Steper_StepCCW()
{

	   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	68 f2       	brcs	.-102    	; 0x1ab2 <Steper_StepCCW+0xe>
	   {
		   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
	   }
	  Current_pattern++ ;
    1b18:	80 91 a6 01 	lds	r24, 0x01A6
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	80 93 a6 01 	sts	0x01A6, r24
	  if(Current_pattern >7) Current_pattern = 7 ;
    1b22:	80 91 a6 01 	lds	r24, 0x01A6
    1b26:	88 30       	cpi	r24, 0x08	; 8
    1b28:	18 f0       	brcs	.+6      	; 0x1b30 <Steper_StepCCW+0x8c>
    1b2a:	87 e0       	ldi	r24, 0x07	; 7
    1b2c:	80 93 a6 01 	sts	0x01A6, r24
}
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <SEG_voidInit>:
#include "SEG_config.h"
#include "SEG_interfac.h"
#include "SEG_private.h"

void SEG_voidInit(u8_t SEG_NUM)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	0f 92       	push	r0
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	89 83       	std	Y+1, r24	; 0x01

	switch(SEG_NUM)
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <SEG_voidInit+0x20>
	{
	case SEG1:
         DIO_u8SetPortDirection(SEG1_PORT ,OUTPUT);
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	0e 94 31 0c 	call	0x1862	; 0x1862 <DIO_u8SetPortDirection>
		break ;
	}

}
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <SEG_display>:

void SEG_display(u8_t SEG_NUM ,u8_t val)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <SEG_display+0x6>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	6a 83       	std	Y+2, r22	; 0x02
	switch(SEG_NUM)
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	59 f4       	brne	.+22     	; 0x1b90 <SEG_display+0x30>
	{
	case SEG1:
	  DIO_u8SetPortValue(SEG1_PORT ,seg[val]);
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	fc 01       	movw	r30, r24
    1b82:	e8 56       	subi	r30, 0x68	; 104
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
    1b86:	90 81       	ld	r25, Z
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	69 2f       	mov	r22, r25
    1b8c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_u8SetPortValue>
	  break ;
	}
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <SEG_VoidClear>:
void SEG_VoidClear(u8_t SEG_NUM)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(SEG1_PORT , HSEG_PING ,LOW);
	DIO_u8SetPinValue(SEG1_PORT , HSEG_PINH ,LOW);
	break ;
	}

}
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <LM35_Init>:
#include "../../LIB/Bit_Math.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/ADC/ADC_interface.h"

void LM35_Init()
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTA , PIN1 ,INPUT);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
    ADC_Selectchannel(ADC_CH_CH0);
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <ADC_Selectchannel>
	ADC_Init();
    1bc6:	0e 94 81 0c 	call	0x1902	; 0x1902 <ADC_Init>
}
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <LM35_GetTemp>:

u32_t LM35_GetTemp(void)
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <LM35_GetTemp+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <LM35_GetTemp+0x8>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62

  u32_t res = ADC_StartConversion();
    1bdc:	0e 94 c2 0c 	call	0x1984	; 0x1984 <ADC_StartConversion>
    1be0:	cc 01       	movw	r24, r24
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	ab 83       	std	Y+3, r26	; 0x03
    1bec:	bc 83       	std	Y+4, r27	; 0x04

  res = res *(5.0/1024.0)*100 ;
    1bee:	69 81       	ldd	r22, Y+1	; 0x01
    1bf0:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 ea       	ldi	r20, 0xA0	; 160
    1c08:	5b e3       	ldi	r21, 0x3B	; 59
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	48 ec       	ldi	r20, 0xC8	; 200
    1c1c:	52 e4       	ldi	r21, 0x42	; 66
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	ab 83       	std	Y+3, r26	; 0x03
    1c38:	bc 83       	std	Y+4, r27	; 0x04
  return res ;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c40:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <LED_voidInit>:

#include "LED_interface.h"
#include "LED_private.h"

void LED_voidInit(u8_t L_u8led)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <LED_voidInit+0x6>
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led)
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	3b 83       	std	Y+3, r19	; 0x03
    1c6a:	2a 83       	std	Y+2, r18	; 0x02
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c70:	82 30       	cpi	r24, 0x02	; 2
    1c72:	91 05       	cpc	r25, r1
    1c74:	31 f1       	breq	.+76     	; 0x1cc2 <LED_voidInit+0x6e>
    1c76:	2a 81       	ldd	r18, Y+2	; 0x02
    1c78:	3b 81       	ldd	r19, Y+3	; 0x03
    1c7a:	23 30       	cpi	r18, 0x03	; 3
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	54 f4       	brge	.+20     	; 0x1c94 <LED_voidInit+0x40>
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	9b 81       	ldd	r25, Y+3	; 0x03
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	89 f0       	breq	.+34     	; 0x1caa <LED_voidInit+0x56>
    1c88:	2a 81       	ldd	r18, Y+2	; 0x02
    1c8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c8c:	21 30       	cpi	r18, 0x01	; 1
    1c8e:	31 05       	cpc	r19, r1
    1c90:	91 f0       	breq	.+36     	; 0x1cb6 <LED_voidInit+0x62>
    1c92:	28 c0       	rjmp	.+80     	; 0x1ce4 <LED_voidInit+0x90>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	c1 f0       	breq	.+48     	; 0x1cce <LED_voidInit+0x7a>
    1c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca2:	24 30       	cpi	r18, 0x04	; 4
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	c9 f0       	breq	.+50     	; 0x1cda <LED_voidInit+0x86>
    1ca8:	1d c0       	rjmp	.+58     	; 0x1ce4 <LED_voidInit+0x90>
	{
	case LED1 :DIO_u8SetPinDirection(LED1_PORT, LED1_PIN, OUTPUT); break ;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
    1cb4:	17 c0       	rjmp	.+46     	; 0x1ce4 <LED_voidInit+0x90>
	case LED2 :DIO_u8SetPinDirection(LED2_PORT, LED2_PIN, OUTPUT); break ;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
    1cc0:	11 c0       	rjmp	.+34     	; 0x1ce4 <LED_voidInit+0x90>
	case LED3 :DIO_u8SetPinDirection(LED3_PORT, LED3_PIN, OUTPUT); break ;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	62 e0       	ldi	r22, 0x02	; 2
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
    1ccc:	0b c0       	rjmp	.+22     	; 0x1ce4 <LED_voidInit+0x90>
	case LED4 :DIO_u8SetPinDirection(LED4_PORT, LED4_PIN, OUTPUT); break ;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	63 e0       	ldi	r22, 0x03	; 3
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
    1cd8:	05 c0       	rjmp	.+10     	; 0x1ce4 <LED_voidInit+0x90>
	case LED5 :DIO_u8SetPinDirection(LED5_PORT, LED5_PIN, OUTPUT); break ;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	64 e0       	ldi	r22, 0x04	; 4
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	}
}
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <LED_voidSetLEDHigh>:
void LED_voidSetLEDHigh(u8_t L_u8led)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <LED_voidSetLEDHigh+0x6>
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3b 83       	std	Y+3, r19	; 0x03
    1d06:	2a 83       	std	Y+2, r18	; 0x02
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	82 30       	cpi	r24, 0x02	; 2
    1d0e:	91 05       	cpc	r25, r1
    1d10:	31 f1       	breq	.+76     	; 0x1d5e <LED_voidSetLEDHigh+0x6e>
    1d12:	2a 81       	ldd	r18, Y+2	; 0x02
    1d14:	3b 81       	ldd	r19, Y+3	; 0x03
    1d16:	23 30       	cpi	r18, 0x03	; 3
    1d18:	31 05       	cpc	r19, r1
    1d1a:	54 f4       	brge	.+20     	; 0x1d30 <LED_voidSetLEDHigh+0x40>
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	89 f0       	breq	.+34     	; 0x1d46 <LED_voidSetLEDHigh+0x56>
    1d24:	2a 81       	ldd	r18, Y+2	; 0x02
    1d26:	3b 81       	ldd	r19, Y+3	; 0x03
    1d28:	21 30       	cpi	r18, 0x01	; 1
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	91 f0       	breq	.+36     	; 0x1d52 <LED_voidSetLEDHigh+0x62>
    1d2e:	28 c0       	rjmp	.+80     	; 0x1d80 <LED_voidSetLEDHigh+0x90>
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	91 05       	cpc	r25, r1
    1d38:	c1 f0       	breq	.+48     	; 0x1d6a <LED_voidSetLEDHigh+0x7a>
    1d3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d3e:	24 30       	cpi	r18, 0x04	; 4
    1d40:	31 05       	cpc	r19, r1
    1d42:	c9 f0       	breq	.+50     	; 0x1d76 <LED_voidSetLEDHigh+0x86>
    1d44:	1d c0       	rjmp	.+58     	; 0x1d80 <LED_voidSetLEDHigh+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, HIGH); break;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    1d50:	17 c0       	rjmp	.+46     	; 0x1d80 <LED_voidSetLEDHigh+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, HIGH); break;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	61 e0       	ldi	r22, 0x01	; 1
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    1d5c:	11 c0       	rjmp	.+34     	; 0x1d80 <LED_voidSetLEDHigh+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, HIGH); break;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    1d68:	0b c0       	rjmp	.+22     	; 0x1d80 <LED_voidSetLEDHigh+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, HIGH); break;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	63 e0       	ldi	r22, 0x03	; 3
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    1d74:	05 c0       	rjmp	.+10     	; 0x1d80 <LED_voidSetLEDHigh+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, HIGH); break;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	64 e0       	ldi	r22, 0x04	; 4
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
	}
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <LED_voidSetLEDLow>:
void LED_voidSetLEDLow(u8_t L_u8led)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <LED_voidSetLEDLow+0x6>
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3b 83       	std	Y+3, r19	; 0x03
    1da2:	2a 83       	std	Y+2, r18	; 0x02
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	82 30       	cpi	r24, 0x02	; 2
    1daa:	91 05       	cpc	r25, r1
    1dac:	31 f1       	breq	.+76     	; 0x1dfa <LED_voidSetLEDLow+0x6e>
    1dae:	2a 81       	ldd	r18, Y+2	; 0x02
    1db0:	3b 81       	ldd	r19, Y+3	; 0x03
    1db2:	23 30       	cpi	r18, 0x03	; 3
    1db4:	31 05       	cpc	r19, r1
    1db6:	54 f4       	brge	.+20     	; 0x1dcc <LED_voidSetLEDLow+0x40>
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	89 f0       	breq	.+34     	; 0x1de2 <LED_voidSetLEDLow+0x56>
    1dc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc4:	21 30       	cpi	r18, 0x01	; 1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	91 f0       	breq	.+36     	; 0x1dee <LED_voidSetLEDLow+0x62>
    1dca:	28 c0       	rjmp	.+80     	; 0x1e1c <LED_voidSetLEDLow+0x90>
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	c1 f0       	breq	.+48     	; 0x1e06 <LED_voidSetLEDLow+0x7a>
    1dd6:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dda:	24 30       	cpi	r18, 0x04	; 4
    1ddc:	31 05       	cpc	r19, r1
    1dde:	c9 f0       	breq	.+50     	; 0x1e12 <LED_voidSetLEDLow+0x86>
    1de0:	1d c0       	rjmp	.+58     	; 0x1e1c <LED_voidSetLEDLow+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, LOW); break;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    1dec:	17 c0       	rjmp	.+46     	; 0x1e1c <LED_voidSetLEDLow+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, LOW); break;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    1df8:	11 c0       	rjmp	.+34     	; 0x1e1c <LED_voidSetLEDLow+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, LOW); break;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	62 e0       	ldi	r22, 0x02	; 2
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    1e04:	0b c0       	rjmp	.+22     	; 0x1e1c <LED_voidSetLEDLow+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, LOW); break;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	63 e0       	ldi	r22, 0x03	; 3
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    1e10:	05 c0       	rjmp	.+10     	; 0x1e1c <LED_voidSetLEDLow+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, LOW); break;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	64 e0       	ldi	r22, 0x04	; 4
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
	}
}
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <HLCD_voidinit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include <util/delay.h>

void HLCD_voidinit()
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	aa 97       	sbiw	r28, 0x2a	; 42
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_DATA_PORT ,OUTPUT);
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	0e 94 31 0c 	call	0x1862	; 0x1862 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RS_PIN ,OUTPUT);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RW_PIN ,OUTPUT);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_E_PIN ,OUTPUT);
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	62 e0       	ldi	r22, 0x02	; 2
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 ef       	ldi	r26, 0xF0	; 240
    1e68:	b1 e4       	ldi	r27, 0x41	; 65
    1e6a:	8f a3       	std	Y+39, r24	; 0x27
    1e6c:	98 a7       	std	Y+40, r25	; 0x28
    1e6e:	a9 a7       	std	Y+41, r26	; 0x29
    1e70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6f a1       	ldd	r22, Y+39	; 0x27
    1e74:	78 a5       	ldd	r23, Y+40	; 0x28
    1e76:	89 a5       	ldd	r24, Y+41	; 0x29
    1e78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8b a3       	std	Y+35, r24	; 0x23
    1e8c:	9c a3       	std	Y+36, r25	; 0x24
    1e8e:	ad a3       	std	Y+37, r26	; 0x25
    1e90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e92:	6b a1       	ldd	r22, Y+35	; 0x23
    1e94:	7c a1       	ldd	r23, Y+36	; 0x24
    1e96:	8d a1       	ldd	r24, Y+37	; 0x25
    1e98:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <HLCD_voidinit+0x8c>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9a a3       	std	Y+34, r25	; 0x22
    1eb0:	89 a3       	std	Y+33, r24	; 0x21
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <HLCD_voidinit+0x10a>
	else if (__tmp > 65535)
    1eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eba:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <HLCD_voidinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ece:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9a a3       	std	Y+34, r25	; 0x22
    1ef2:	89 a3       	std	Y+33, r24	; 0x21
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <HLCD_voidinit+0xec>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	98 a3       	std	Y+32, r25	; 0x20
    1efc:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1efe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f00:	98 a1       	ldd	r25, Y+32	; 0x20
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <HLCD_voidinit+0xda>
    1f06:	98 a3       	std	Y+32, r25	; 0x20
    1f08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9a a3       	std	Y+34, r25	; 0x22
    1f12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	89 a1       	ldd	r24, Y+33	; 0x21
    1f16:	9a a1       	ldd	r25, Y+34	; 0x22
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <HLCD_voidinit+0xce>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <HLCD_voidinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f20:	7c a1       	ldd	r23, Y+36	; 0x24
    1f22:	8d a1       	ldd	r24, Y+37	; 0x25
    1f24:	9e a1       	ldd	r25, Y+38	; 0x26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	9e 8f       	std	Y+30, r25	; 0x1e
    1f38:	8d 8f       	std	Y+29, r24	; 0x1d
    1f3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <HLCD_voidinit+0x116>
    1f42:	9e 8f       	std	Y+30, r25	; 0x1e
    1f44:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);
	HLCD_voidCommand(LCD_Function_set1);
    1f46:	88 e3       	ldi	r24, 0x38	; 56
    1f48:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
	//_delay_ms(1);
	HLCD_voidCommand(LCD_Display_Mode2);
    1f4c:	8d e0       	ldi	r24, 0x0D	; 13
    1f4e:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 e8       	ldi	r26, 0x80	; 128
    1f58:	bf e3       	ldi	r27, 0x3F	; 63
    1f5a:	89 8f       	std	Y+25, r24	; 0x19
    1f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a ef       	ldi	r20, 0xFA	; 250
    1f70:	54 e4       	ldi	r21, 0x44	; 68
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8d 8b       	std	Y+21, r24	; 0x15
    1f7c:	9e 8b       	std	Y+22, r25	; 0x16
    1f7e:	af 8b       	std	Y+23, r26	; 0x17
    1f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <HLCD_voidinit+0x17c>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <HLCD_voidinit+0x1fa>
	else if (__tmp > 65535)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	3f ef       	ldi	r19, 0xFF	; 255
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	57 e4       	ldi	r21, 0x47	; 71
    1fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	4c f5       	brge	.+82     	; 0x200e <HLCD_voidinit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <HLCD_voidinit+0x1dc>
    1fe6:	88 ec       	ldi	r24, 0xC8	; 200
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <HLCD_voidinit+0x1ca>
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <HLCD_voidinit+0x1be>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <HLCD_voidinit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	98 89       	ldd	r25, Y+16	; 0x10
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <HLCD_voidinit+0x206>
    2032:	98 8b       	std	Y+16, r25	; 0x10
    2034:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_voidCommand(LCD_Clear_Screen);
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 e0       	ldi	r26, 0x00	; 0
    2042:	b0 e4       	ldi	r27, 0x40	; 64
    2044:	8b 87       	std	Y+11, r24	; 0x0b
    2046:	9c 87       	std	Y+12, r25	; 0x0c
    2048:	ad 87       	std	Y+13, r26	; 0x0d
    204a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	6b 85       	ldd	r22, Y+11	; 0x0b
    204e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2050:	8d 85       	ldd	r24, Y+13	; 0x0d
    2052:	9e 85       	ldd	r25, Y+14	; 0x0e
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a ef       	ldi	r20, 0xFA	; 250
    205a:	54 e4       	ldi	r21, 0x44	; 68
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	8f 83       	std	Y+7, r24	; 0x07
    2066:	98 87       	std	Y+8, r25	; 0x08
    2068:	a9 87       	std	Y+9, r26	; 0x09
    206a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    206c:	6f 81       	ldd	r22, Y+7	; 0x07
    206e:	78 85       	ldd	r23, Y+8	; 0x08
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e8       	ldi	r20, 0x80	; 128
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2080:	88 23       	and	r24, r24
    2082:	2c f4       	brge	.+10     	; 0x208e <HLCD_voidinit+0x266>
		__ticks = 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	3f c0       	rjmp	.+126    	; 0x210c <HLCD_voidinit+0x2e4>
	else if (__tmp > 65535)
    208e:	6f 81       	ldd	r22, Y+7	; 0x07
    2090:	78 85       	ldd	r23, Y+8	; 0x08
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	4c f5       	brge	.+82     	; 0x20f8 <HLCD_voidinit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e2       	ldi	r20, 0x20	; 32
    20b4:	51 e4       	ldi	r21, 0x41	; 65
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <HLCD_voidinit+0x2c6>
    20d0:	88 ec       	ldi	r24, 0xC8	; 200
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <HLCD_voidinit+0x2b4>
    20e0:	9c 83       	std	Y+4, r25	; 0x04
    20e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	9e 83       	std	Y+6, r25	; 0x06
    20ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <HLCD_voidinit+0x2a8>
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <HLCD_voidinit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	9e 81       	ldd	r25, Y+6	; 0x06
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <HLCD_voidinit+0x2f0>
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidCommand(LCD_Entry_Mode1);
    2120:	86 e0       	ldi	r24, 0x06	; 6
    2122:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>

    HLCD_voidCommand(LCD_DISP_ON_CURSOR);
    2126:	8e e0       	ldi	r24, 0x0E	; 14
    2128:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
    HLCD_voidCommand(LCD_DISP_ON);
    212c:	8c e0       	ldi	r24, 0x0C	; 12
    212e:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
}
    2132:	aa 96       	adiw	r28, 0x2a	; 42
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <HLCD_voidCommand>:

void HLCD_voidCommand(u8_t command)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	0f 92       	push	r0
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,LOW );
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW );
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT ,command );
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	69 81       	ldd	r22, Y+1	; 0x01
    2168:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    216c:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_voidSendPulse>
}
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <HLCD_voidSetDDRAM_Address>:
void HLCD_voidSetDDRAM_Address(u8_t address)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	0f 92       	push	r0
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	89 83       	std	Y+1, r24	; 0x01
	SetBit(address,7);
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	80 68       	ori	r24, 0x80	; 128
    2188:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidCommand(address);
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
}
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <HLCD_voidSendPulse>:

void static HLCD_voidSendPulse(void)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	6c 97       	sbiw	r28, 0x1c	; 28
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,HIGH);
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	62 e0       	ldi	r22, 0x02	; 2
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e8       	ldi	r26, 0x80	; 128
    21bc:	bf e3       	ldi	r27, 0x3F	; 63
    21be:	89 8f       	std	Y+25, r24	; 0x19
    21c0:	9a 8f       	std	Y+26, r25	; 0x1a
    21c2:	ab 8f       	std	Y+27, r26	; 0x1b
    21c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c6:	69 8d       	ldd	r22, Y+25	; 0x19
    21c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a ef       	ldi	r20, 0xFA	; 250
    21d4:	54 e4       	ldi	r21, 0x44	; 68
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8d 8b       	std	Y+21, r24	; 0x15
    21e0:	9e 8b       	std	Y+22, r25	; 0x16
    21e2:	af 8b       	std	Y+23, r26	; 0x17
    21e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e6:	6d 89       	ldd	r22, Y+21	; 0x15
    21e8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ea:	8f 89       	ldd	r24, Y+23	; 0x17
    21ec:	98 8d       	ldd	r25, Y+24	; 0x18
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	2c f4       	brge	.+10     	; 0x2208 <HLCD_voidSendPulse+0x70>
		__ticks = 1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
    2206:	3f c0       	rjmp	.+126    	; 0x2286 <HLCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	4c f5       	brge	.+82     	; 0x2272 <HLCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2220:	69 8d       	ldd	r22, Y+25	; 0x19
    2222:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e2       	ldi	r20, 0x20	; 32
    222e:	51 e4       	ldi	r21, 0x41	; 65
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9c 8b       	std	Y+20, r25	; 0x14
    2246:	8b 8b       	std	Y+19, r24	; 0x13
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <HLCD_voidSendPulse+0xd0>
    224a:	88 ec       	ldi	r24, 0xC8	; 200
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9a 8b       	std	Y+18, r25	; 0x12
    2250:	89 8b       	std	Y+17, r24	; 0x11
    2252:	89 89       	ldd	r24, Y+17	; 0x11
    2254:	9a 89       	ldd	r25, Y+18	; 0x12
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <HLCD_voidSendPulse+0xbe>
    225a:	9a 8b       	std	Y+18, r25	; 0x12
    225c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	8b 89       	ldd	r24, Y+19	; 0x13
    2260:	9c 89       	ldd	r25, Y+20	; 0x14
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	9c 8b       	std	Y+20, r25	; 0x14
    2266:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	8b 89       	ldd	r24, Y+19	; 0x13
    226a:	9c 89       	ldd	r25, Y+20	; 0x14
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	69 f7       	brne	.-38     	; 0x224a <HLCD_voidSendPulse+0xb2>
    2270:	14 c0       	rjmp	.+40     	; 0x229a <HLCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9c 8b       	std	Y+20, r25	; 0x14
    2284:	8b 8b       	std	Y+19, r24	; 0x13
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	98 8b       	std	Y+16, r25	; 0x10
    228c:	8f 87       	std	Y+15, r24	; 0x0f
    228e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2290:	98 89       	ldd	r25, Y+16	; 0x10
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <HLCD_voidSendPulse+0xfa>
    2296:	98 8b       	std	Y+16, r25	; 0x10
    2298:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,LOW);
    229a:	82 e0       	ldi	r24, 0x02	; 2
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e8       	ldi	r26, 0x80	; 128
    22aa:	bf e3       	ldi	r27, 0x3F	; 63
    22ac:	8b 87       	std	Y+11, r24	; 0x0b
    22ae:	9c 87       	std	Y+12, r25	; 0x0c
    22b0:	ad 87       	std	Y+13, r26	; 0x0d
    22b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a ef       	ldi	r20, 0xFA	; 250
    22c2:	54 e4       	ldi	r21, 0x44	; 68
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
    22d0:	a9 87       	std	Y+9, r26	; 0x09
    22d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <HLCD_voidSendPulse+0x15e>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <HLCD_voidSendPulse+0x1dc>
	else if (__tmp > 65535)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <HLCD_voidSendPulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2310:	7c 85       	ldd	r23, Y+12	; 0x0c
    2312:	8d 85       	ldd	r24, Y+13	; 0x0d
    2314:	9e 85       	ldd	r25, Y+14	; 0x0e
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <HLCD_voidSendPulse+0x1be>
    2338:	88 ec       	ldi	r24, 0xC8	; 200
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c 83       	std	Y+4, r25	; 0x04
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <HLCD_voidSendPulse+0x1ac>
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <HLCD_voidSendPulse+0x1a0>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <HLCD_voidSendPulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <HLCD_voidSendPulse+0x1e8>
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2388:	6c 96       	adiw	r28, 0x1c	; 28
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <HLCD_SendData>:

void HLCD_SendData(u8_t data)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	0f 92       	push	r0
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,HIGH);
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW);
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_DATA_PORT ,data);
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	69 81       	ldd	r22, Y+1	; 0x01
    23be:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    23c2:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_voidSendPulse>
}
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <HLCD_PrintString>:

void HLCD_PrintString(u8_t *string)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <HLCD_PrintString+0x6>
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <HLCD_PrintString+0x8>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	9c 83       	std	Y+4, r25	; 0x04
    23dc:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    23de:	1a 82       	std	Y+2, r1	; 0x02
    23e0:	19 82       	std	Y+1, r1	; 0x01
    23e2:	26 c0       	rjmp	.+76     	; 0x2430 <HLCD_PrintString+0x62>
	while (*string > 0) {
		count++;
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	9a 81       	ldd	r25, Y+2	; 0x02
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
		HLCD_SendData(*string++);
    23ee:	eb 81       	ldd	r30, Y+3	; 0x03
    23f0:	fc 81       	ldd	r31, Y+4	; 0x04
    23f2:	20 81       	ld	r18, Z
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	01 96       	adiw	r24, 0x01	; 1
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	82 2f       	mov	r24, r18
    2400:	0e 94 cd 11 	call	0x239a	; 0x239a <HLCD_SendData>
		if (count == 16) {
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	80 31       	cpi	r24, 0x10	; 16
    240a:	91 05       	cpc	r25, r1
    240c:	21 f4       	brne	.+8      	; 0x2416 <HLCD_PrintString+0x48>
			HLCD_voidSetDDRAM_Address(0x40);
    240e:	80 e4       	ldi	r24, 0x40	; 64
    2410:	0e 94 bc 10 	call	0x2178	; 0x2178 <HLCD_voidSetDDRAM_Address>
    2414:	0d c0       	rjmp	.+26     	; 0x2430 <HLCD_PrintString+0x62>
		} else if (count == 32) {
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	80 32       	cpi	r24, 0x20	; 32
    241c:	91 05       	cpc	r25, r1
    241e:	41 f4       	brne	.+16     	; 0x2430 <HLCD_PrintString+0x62>
			HLCD_voidCommand(LCD_Clear_Screen);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
			HLCD_voidSetDDRAM_Address(0);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	0e 94 bc 10 	call	0x2178	; 0x2178 <HLCD_voidSetDDRAM_Address>
			count = 0;
    242c:	1a 82       	std	Y+2, r1	; 0x02
    242e:	19 82       	std	Y+1, r1	; 0x01
}

void HLCD_PrintString(u8_t *string)
{
	int count = 0;
	while (*string > 0) {
    2430:	eb 81       	ldd	r30, Y+3	; 0x03
    2432:	fc 81       	ldd	r31, Y+4	; 0x04
    2434:	80 81       	ld	r24, Z
    2436:	88 23       	and	r24, r24
    2438:	a9 f6       	brne	.-86     	; 0x23e4 <HLCD_PrintString+0x16>
			HLCD_voidCommand(LCD_Clear_Screen);
			HLCD_voidSetDDRAM_Address(0);
			count = 0;
		}
	}
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <LCD_display_number>:

void LCD_display_number(int number)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	27 97       	sbiw	r28, 0x07	; 7
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	9f 83       	std	Y+7, r25	; 0x07
    245e:	8e 83       	std	Y+6, r24	; 0x06
	char str[5];

	itoa(number , str ,10);
    2460:	8e 81       	ldd	r24, Y+6	; 0x06
    2462:	9f 81       	ldd	r25, Y+7	; 0x07
    2464:	9e 01       	movw	r18, r28
    2466:	2f 5f       	subi	r18, 0xFF	; 255
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	b9 01       	movw	r22, r18
    246c:	4a e0       	ldi	r20, 0x0A	; 10
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	0e 94 31 14 	call	0x2862	; 0x2862 <itoa>
	HLCD_PrintString(str);
    2474:	ce 01       	movw	r24, r28
    2476:	01 96       	adiw	r24, 0x01	; 1
    2478:	0e 94 e7 11 	call	0x23ce	; 0x23ce <HLCD_PrintString>
}
    247c:	27 96       	adiw	r28, 0x07	; 7
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <HLCD_GOTO_XY>:

void HLCD_GOTO_XY(u8_t line, u8_t position) {
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	00 d0       	rcall	.+0      	; 0x2494 <HLCD_GOTO_XY+0x6>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1) {
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	39 f4       	brne	.+14     	; 0x24b0 <HLCD_GOTO_XY+0x22>
		if (position < 16 && position >= 0) {
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	80 31       	cpi	r24, 0x10	; 16
    24a6:	20 f4       	brcc	.+8      	; 0x24b0 <HLCD_GOTO_XY+0x22>
			HLCD_voidSetDDRAM_Address(LCD_FIRST_ROW + position-1);
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	81 58       	subi	r24, 0x81	; 129
    24ac:	0e 94 bc 10 	call	0x2178	; 0x2178 <HLCD_voidSetDDRAM_Address>
		}
	}
	if (line == 2) {
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	39 f4       	brne	.+14     	; 0x24c4 <HLCD_GOTO_XY+0x36>
		if (position < 16 && position >= 0) {
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	80 31       	cpi	r24, 0x10	; 16
    24ba:	20 f4       	brcc	.+8      	; 0x24c4 <HLCD_GOTO_XY+0x36>
			HLCD_voidSetDDRAM_Address(LCD_SECOND_ROW + position -1);
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	81 54       	subi	r24, 0x41	; 65
    24c0:	0e 94 bc 10 	call	0x2178	; 0x2178 <HLCD_voidSetDDRAM_Address>
		}
	}
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <Keypad_init>:
#include "KeyPade_interface.h"
#include "KeyPade_private.h"


void Keypad_init()
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(KeyPade_PORT , R1 ,INPUT);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R1 ,HIGH);
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R2 ,INPUT);
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R2 ,HIGH);
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R3 ,INPUT);
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	62 e0       	ldi	r22, 0x02	; 2
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R3 ,HIGH);
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R4 ,INPUT);
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	63 e0       	ldi	r22, 0x03	; 3
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R4 ,HIGH);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	63 e0       	ldi	r22, 0x03	; 3
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , C1 ,OUTPUT);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	64 e0       	ldi	r22, 0x04	; 4
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C2 ,OUTPUT);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	65 e0       	ldi	r22, 0x05	; 5
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C3 ,OUTPUT);
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	66 e0       	ldi	r22, 0x06	; 6
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C4 ,OUTPUT);
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	67 e0       	ldi	r22, 0x07	; 7
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>


}
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <Keypad_getkey>:

u8_t Keypad_getkey(void)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <Keypad_getkey+0x6>
    255a:	0f 92       	push	r0
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
	for(u8_t COL = 0 ; COL<4 ;COL++)
    2560:	1a 82       	std	Y+2, r1	; 0x02
    2562:	60 c0       	rjmp	.+192    	; 0x2624 <Keypad_getkey+0xd0>
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	fc 01       	movw	r30, r24
    2570:	e0 58       	subi	r30, 0x80	; 128
    2572:	fe 4f       	sbci	r31, 0xFE	; 254
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	98 2f       	mov	r25, r24
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	69 2f       	mov	r22, r25
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>

		for(u8_t ROW = 0 ; ROW<4 ;ROW++)
    2584:	19 82       	std	Y+1, r1	; 0x01
    2586:	38 c0       	rjmp	.+112    	; 0x25f8 <Keypad_getkey+0xa4>
		{
			if(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0)
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	fc 01       	movw	r30, r24
    2594:	e8 58       	subi	r30, 0x88	; 136
    2596:	fe 4f       	sbci	r31, 0xFE	; 254
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	98 2f       	mov	r25, r24
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	69 2f       	mov	r22, r25
    25a2:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8GetBit>
    25a6:	88 23       	and	r24, r24
    25a8:	21 f5       	brne	.+72     	; 0x25f2 <Keypad_getkey+0x9e>
			{
				while(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0);
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	88 2f       	mov	r24, r24
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	fc 01       	movw	r30, r24
    25b6:	e8 58       	subi	r30, 0x88	; 136
    25b8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	98 2f       	mov	r25, r24
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	69 2f       	mov	r22, r25
    25c4:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8GetBit>
    25c8:	88 23       	and	r24, r24
    25ca:	79 f3       	breq	.-34     	; 0x25aa <Keypad_getkey+0x56>
				return digit[ROW][COL] ;
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	48 2f       	mov	r20, r24
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	ca 01       	movw	r24, r20
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	82 0f       	add	r24, r18
    25e4:	93 1f       	adc	r25, r19
    25e6:	fc 01       	movw	r30, r24
    25e8:	e8 57       	subi	r30, 0x78	; 120
    25ea:	fe 4f       	sbci	r31, 0xFE	; 254
    25ec:	80 81       	ld	r24, Z
    25ee:	8b 83       	std	Y+3, r24	; 0x03
    25f0:	1f c0       	rjmp	.+62     	; 0x2630 <Keypad_getkey+0xdc>
{
	for(u8_t COL = 0 ; COL<4 ;COL++)
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);

		for(u8_t ROW = 0 ; ROW<4 ;ROW++)
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	84 30       	cpi	r24, 0x04	; 4
    25fc:	28 f2       	brcs	.-118    	; 0x2588 <Keypad_getkey+0x34>
			{
				while(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0);
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	fc 01       	movw	r30, r24
    260a:	e0 58       	subi	r30, 0x80	; 128
    260c:	fe 4f       	sbci	r31, 0xFE	; 254
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	98 2f       	mov	r25, r24
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	69 2f       	mov	r22, r25
    2618:	41 e0       	ldi	r20, 0x01	; 1
    261a:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>

}

u8_t Keypad_getkey(void)
{
	for(u8_t COL = 0 ; COL<4 ;COL++)
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	8f 5f       	subi	r24, 0xFF	; 255
    2622:	8a 83       	std	Y+2, r24	; 0x02
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	84 30       	cpi	r24, 0x04	; 4
    2628:	08 f4       	brcc	.+2      	; 0x262c <Keypad_getkey+0xd8>
    262a:	9c cf       	rjmp	.-200    	; 0x2564 <Keypad_getkey+0x10>
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
	}
	return -1;
    262c:	8f ef       	ldi	r24, 0xFF	; 255
    262e:	8b 83       	std	Y+3, r24	; 0x03
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <Button_Init>:
 */
#include "Button_config.h"
#include "Button_interface.h"
#include "Button_private.h"
void Button_Init(u8_t L_u8ButtonNum)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <Button_Init+0x6>
    2644:	0f 92       	push	r0
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	89 83       	std	Y+1, r24	; 0x01
   switch(L_u8ButtonNum)
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	3b 83       	std	Y+3, r19	; 0x03
    2654:	2a 83       	std	Y+2, r18	; 0x02
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	91 05       	cpc	r25, r1
    265e:	a1 f0       	breq	.+40     	; 0x2688 <Button_Init+0x4a>
    2660:	2a 81       	ldd	r18, Y+2	; 0x02
    2662:	3b 81       	ldd	r19, Y+3	; 0x03
    2664:	22 30       	cpi	r18, 0x02	; 2
    2666:	31 05       	cpc	r19, r1
    2668:	d1 f0       	breq	.+52     	; 0x269e <Button_Init+0x60>
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	01 f5       	brne	.+64     	; 0x26b2 <Button_Init+0x74>
   {
	case BUTTON1: DIO_u8SetPinDirection(BUTTON1_PORT , BUTTON1_PIN , INPUT);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON1_PORT ,BUTTON1_PIN ,HIGH);
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    2686:	15 c0       	rjmp	.+42     	; 0x26b2 <Button_Init+0x74>
	              break ;
	case BUTTON2: DIO_u8SetPinDirection(BUTTON2_PORT , BUTTON2_PIN , INPUT);
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	61 e0       	ldi	r22, 0x01	; 1
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON2_PORT ,BUTTON2_PIN ,HIGH);
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	61 e0       	ldi	r22, 0x01	; 1
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
    269c:	0a c0       	rjmp	.+20     	; 0x26b2 <Button_Init+0x74>
	              break;
	case BUTTON3: DIO_u8SetPinDirection(BUTTON3_PORT , BUTTON3_PIN , INPUT);
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	62 e0       	ldi	r22, 0x02	; 2
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	0e 94 17 0a 	call	0x142e	; 0x142e <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON3_PORT ,BUTTON3_PIN ,HIGH);
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	62 e0       	ldi	r22, 0x02	; 2
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_u8SetPinValue>
	              break;
   }
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <Button_u8GetButtonstatus>:

u8_t Button_u8GetButtonstatus(u8_t L_u8ButtonNum)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <Button_u8GetButtonstatus+0x6>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <Button_u8GetButtonstatus+0x8>
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	8a 83       	std	Y+2, r24	; 0x02
	u8_t button_vall ;
	switch(L_u8ButtonNum)
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	3c 83       	std	Y+4, r19	; 0x04
    26d4:	2b 83       	std	Y+3, r18	; 0x03
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	81 30       	cpi	r24, 0x01	; 1
    26dc:	91 05       	cpc	r25, r1
    26de:	79 f0       	breq	.+30     	; 0x26fe <Button_u8GetButtonstatus+0x40>
    26e0:	2b 81       	ldd	r18, Y+3	; 0x03
    26e2:	3c 81       	ldd	r19, Y+4	; 0x04
    26e4:	22 30       	cpi	r18, 0x02	; 2
    26e6:	31 05       	cpc	r19, r1
    26e8:	81 f0       	breq	.+32     	; 0x270a <Button_u8GetButtonstatus+0x4c>
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	89 f4       	brne	.+34     	; 0x2714 <Button_u8GetButtonstatus+0x56>
	{
	case BUTTON1:button_vall = DIO_u8GetBit(BUTTON1_PORT , BUTTON1_PIN); break ;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8GetBit>
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	0b c0       	rjmp	.+22     	; 0x2714 <Button_u8GetButtonstatus+0x56>
	case BUTTON2:button_vall = DIO_u8GetBit(BUTTON2_PORT , BUTTON2_PIN); break ;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8GetBit>
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	05 c0       	rjmp	.+10     	; 0x2714 <Button_u8GetButtonstatus+0x56>
	case BUTTON3:button_vall = DIO_u8GetBit(BUTTON3_PORT , BUTTON3_PIN); break ;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	62 e0       	ldi	r22, 0x02	; 2
    270e:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8GetBit>
    2712:	89 83       	std	Y+1, r24	; 0x01
	}
	return button_vall ;
    2714:	89 81       	ldd	r24, Y+1	; 0x01
}
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <Button_voidWaitForButton>:
void Button_voidWaitForButton(u8_t L_u8ButtonNum)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	0f 92       	push	r0
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	89 83       	std	Y+1, r24	; 0x01
     while(1)
     {
   	  if(Button_u8GetButtonstatus(L_u8ButtonNum)==0)
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	0e 94 5f 13 	call	0x26be	; 0x26be <Button_u8GetButtonstatus>
    2736:	88 23       	and	r24, r24
    2738:	d9 f7       	brne	.-10     	; 0x2730 <Button_voidWaitForButton+0xc>
   	  {
   		 while(Button_u8GetButtonstatus(L_u8ButtonNum)==0);
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	0e 94 5f 13 	call	0x26be	; 0x26be <Button_u8GetButtonstatus>
    2740:	88 23       	and	r24, r24
    2742:	d9 f3       	breq	.-10     	; 0x273a <Button_voidWaitForButton+0x16>
   		 break ;
   	  }
     }
    2744:	0f 90       	pop	r0
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <main>:




int main()
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	00 d0       	rcall	.+0      	; 0x2752 <main+0x6>
    2752:	00 d0       	rcall	.+0      	; 0x2754 <main+0x8>
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
	u32_t temp ;
	HLCD_voidinit();
    2758:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <HLCD_voidinit>
	LM35_Init();
    275c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <LM35_Init>
	HLCD_voidCommand(LCD_Clear_Screen);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
	HLCD_GOTO_XY(1,1);
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	0e 94 47 12 	call	0x248e	; 0x248e <HLCD_GOTO_XY>

  while(1)
  {
    temp =  LM35_GetTemp();
    276e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <LM35_GetTemp>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	ab 83       	std	Y+3, r26	; 0x03
    277c:	bc 83       	std	Y+4, r27	; 0x04
    LCD_display_number(temp);
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_display_number>
    HLCD_GOTO_XY(1,1);
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	61 e0       	ldi	r22, 0x01	; 1
    278a:	0e 94 47 12 	call	0x248e	; 0x248e <HLCD_GOTO_XY>
    if(temp != LM35_GetTemp() )
    278e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <LM35_GetTemp>
    2792:	9b 01       	movw	r18, r22
    2794:	ac 01       	movw	r20, r24
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	9a 81       	ldd	r25, Y+2	; 0x02
    279a:	ab 81       	ldd	r26, Y+3	; 0x03
    279c:	bc 81       	ldd	r27, Y+4	; 0x04
    279e:	28 17       	cp	r18, r24
    27a0:	39 07       	cpc	r19, r25
    27a2:	4a 07       	cpc	r20, r26
    27a4:	5b 07       	cpc	r21, r27
    27a6:	19 f3       	breq	.-58     	; 0x276e <main+0x22>
    HLCD_voidCommand(LCD_Clear_Screen);
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	0e 94 a2 10 	call	0x2144	; 0x2144 <HLCD_voidCommand>
    27ae:	df cf       	rjmp	.-66     	; 0x276e <main+0x22>

000027b0 <__udivmodsi4>:
    27b0:	a1 e2       	ldi	r26, 0x21	; 33
    27b2:	1a 2e       	mov	r1, r26
    27b4:	aa 1b       	sub	r26, r26
    27b6:	bb 1b       	sub	r27, r27
    27b8:	fd 01       	movw	r30, r26
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <__udivmodsi4_ep>

000027bc <__udivmodsi4_loop>:
    27bc:	aa 1f       	adc	r26, r26
    27be:	bb 1f       	adc	r27, r27
    27c0:	ee 1f       	adc	r30, r30
    27c2:	ff 1f       	adc	r31, r31
    27c4:	a2 17       	cp	r26, r18
    27c6:	b3 07       	cpc	r27, r19
    27c8:	e4 07       	cpc	r30, r20
    27ca:	f5 07       	cpc	r31, r21
    27cc:	20 f0       	brcs	.+8      	; 0x27d6 <__udivmodsi4_ep>
    27ce:	a2 1b       	sub	r26, r18
    27d0:	b3 0b       	sbc	r27, r19
    27d2:	e4 0b       	sbc	r30, r20
    27d4:	f5 0b       	sbc	r31, r21

000027d6 <__udivmodsi4_ep>:
    27d6:	66 1f       	adc	r22, r22
    27d8:	77 1f       	adc	r23, r23
    27da:	88 1f       	adc	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	1a 94       	dec	r1
    27e0:	69 f7       	brne	.-38     	; 0x27bc <__udivmodsi4_loop>
    27e2:	60 95       	com	r22
    27e4:	70 95       	com	r23
    27e6:	80 95       	com	r24
    27e8:	90 95       	com	r25
    27ea:	9b 01       	movw	r18, r22
    27ec:	ac 01       	movw	r20, r24
    27ee:	bd 01       	movw	r22, r26
    27f0:	cf 01       	movw	r24, r30
    27f2:	08 95       	ret

000027f4 <__prologue_saves__>:
    27f4:	2f 92       	push	r2
    27f6:	3f 92       	push	r3
    27f8:	4f 92       	push	r4
    27fa:	5f 92       	push	r5
    27fc:	6f 92       	push	r6
    27fe:	7f 92       	push	r7
    2800:	8f 92       	push	r8
    2802:	9f 92       	push	r9
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	ca 1b       	sub	r28, r26
    281e:	db 0b       	sbc	r29, r27
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	09 94       	ijmp

0000282c <__epilogue_restores__>:
    282c:	2a 88       	ldd	r2, Y+18	; 0x12
    282e:	39 88       	ldd	r3, Y+17	; 0x11
    2830:	48 88       	ldd	r4, Y+16	; 0x10
    2832:	5f 84       	ldd	r5, Y+15	; 0x0f
    2834:	6e 84       	ldd	r6, Y+14	; 0x0e
    2836:	7d 84       	ldd	r7, Y+13	; 0x0d
    2838:	8c 84       	ldd	r8, Y+12	; 0x0c
    283a:	9b 84       	ldd	r9, Y+11	; 0x0b
    283c:	aa 84       	ldd	r10, Y+10	; 0x0a
    283e:	b9 84       	ldd	r11, Y+9	; 0x09
    2840:	c8 84       	ldd	r12, Y+8	; 0x08
    2842:	df 80       	ldd	r13, Y+7	; 0x07
    2844:	ee 80       	ldd	r14, Y+6	; 0x06
    2846:	fd 80       	ldd	r15, Y+5	; 0x05
    2848:	0c 81       	ldd	r16, Y+4	; 0x04
    284a:	1b 81       	ldd	r17, Y+3	; 0x03
    284c:	aa 81       	ldd	r26, Y+2	; 0x02
    284e:	b9 81       	ldd	r27, Y+1	; 0x01
    2850:	ce 0f       	add	r28, r30
    2852:	d1 1d       	adc	r29, r1
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	ed 01       	movw	r28, r26
    2860:	08 95       	ret

00002862 <itoa>:
    2862:	fb 01       	movw	r30, r22
    2864:	9f 01       	movw	r18, r30
    2866:	e8 94       	clt
    2868:	42 30       	cpi	r20, 0x02	; 2
    286a:	c4 f0       	brlt	.+48     	; 0x289c <itoa+0x3a>
    286c:	45 32       	cpi	r20, 0x25	; 37
    286e:	b4 f4       	brge	.+44     	; 0x289c <itoa+0x3a>
    2870:	4a 30       	cpi	r20, 0x0A	; 10
    2872:	29 f4       	brne	.+10     	; 0x287e <itoa+0x1c>
    2874:	97 fb       	bst	r25, 7
    2876:	1e f4       	brtc	.+6      	; 0x287e <itoa+0x1c>
    2878:	90 95       	com	r25
    287a:	81 95       	neg	r24
    287c:	9f 4f       	sbci	r25, 0xFF	; 255
    287e:	64 2f       	mov	r22, r20
    2880:	77 27       	eor	r23, r23
    2882:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__udivmodhi4>
    2886:	80 5d       	subi	r24, 0xD0	; 208
    2888:	8a 33       	cpi	r24, 0x3A	; 58
    288a:	0c f0       	brlt	.+2      	; 0x288e <itoa+0x2c>
    288c:	89 5d       	subi	r24, 0xD9	; 217
    288e:	81 93       	st	Z+, r24
    2890:	cb 01       	movw	r24, r22
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	a1 f7       	brne	.-24     	; 0x287e <itoa+0x1c>
    2896:	16 f4       	brtc	.+4      	; 0x289c <itoa+0x3a>
    2898:	5d e2       	ldi	r21, 0x2D	; 45
    289a:	51 93       	st	Z+, r21
    289c:	10 82       	st	Z, r1
    289e:	c9 01       	movw	r24, r18
    28a0:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <strrev>

000028a4 <strrev>:
    28a4:	dc 01       	movw	r26, r24
    28a6:	fc 01       	movw	r30, r24
    28a8:	67 2f       	mov	r22, r23
    28aa:	71 91       	ld	r23, Z+
    28ac:	77 23       	and	r23, r23
    28ae:	e1 f7       	brne	.-8      	; 0x28a8 <strrev+0x4>
    28b0:	32 97       	sbiw	r30, 0x02	; 2
    28b2:	04 c0       	rjmp	.+8      	; 0x28bc <strrev+0x18>
    28b4:	7c 91       	ld	r23, X
    28b6:	6d 93       	st	X+, r22
    28b8:	70 83       	st	Z, r23
    28ba:	62 91       	ld	r22, -Z
    28bc:	ae 17       	cp	r26, r30
    28be:	bf 07       	cpc	r27, r31
    28c0:	c8 f3       	brcs	.-14     	; 0x28b4 <strrev+0x10>
    28c2:	08 95       	ret

000028c4 <__udivmodhi4>:
    28c4:	aa 1b       	sub	r26, r26
    28c6:	bb 1b       	sub	r27, r27
    28c8:	51 e1       	ldi	r21, 0x11	; 17
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <__udivmodhi4_ep>

000028cc <__udivmodhi4_loop>:
    28cc:	aa 1f       	adc	r26, r26
    28ce:	bb 1f       	adc	r27, r27
    28d0:	a6 17       	cp	r26, r22
    28d2:	b7 07       	cpc	r27, r23
    28d4:	10 f0       	brcs	.+4      	; 0x28da <__udivmodhi4_ep>
    28d6:	a6 1b       	sub	r26, r22
    28d8:	b7 0b       	sbc	r27, r23

000028da <__udivmodhi4_ep>:
    28da:	88 1f       	adc	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	5a 95       	dec	r21
    28e0:	a9 f7       	brne	.-22     	; 0x28cc <__udivmodhi4_loop>
    28e2:	80 95       	com	r24
    28e4:	90 95       	com	r25
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	08 95       	ret

000028ec <_exit>:
    28ec:	f8 94       	cli

000028ee <__stop_program>:
    28ee:	ff cf       	rjmp	.-2      	; 0x28ee <__stop_program>
