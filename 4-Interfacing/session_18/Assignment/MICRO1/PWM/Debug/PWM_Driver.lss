
PWM_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00002bec  00002c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008001a2  008001a2  00002dc2  2**0
                  ALLOC
  3 .stab         00003e64  00000000  00000000  00002dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001837  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000845f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000085df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000087b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000a7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000b931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000cad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000cd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_1>
       8:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_2>
       c:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_3>
      10:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <main>
      8a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <TIM2_Init>:
u32_t preload;

void (* func_ptr)(void);

void TIM2_Init(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	// CTC Mode
	CleartBit(TCCR2_Register, WGM20);
     cde:	a5 e4       	ldi	r26, 0x45	; 69
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e5 e4       	ldi	r30, 0x45	; 69
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7b       	andi	r24, 0xBF	; 191
     cea:	8c 93       	st	X, r24
	SetBit(TCCR2_Register, WGM21);
     cec:	a5 e4       	ldi	r26, 0x45	; 69
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e5 e4       	ldi	r30, 0x45	; 69
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	8c 93       	st	X, r24

	// Enable Overflow Interrupt
	SetBit(TIMSK_Register, OCIE2);
     cfa:	a9 e5       	ldi	r26, 0x59	; 89
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 e5       	ldi	r30, 0x59	; 89
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	8c 93       	st	X, r24


}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <TIM2_SetValueUS>:

void TIM2_SetValueUS(u32_t us)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <TIM2_SetValueUS+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <TIM2_SetValueUS+0x8>
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	69 83       	std	Y+1, r22	; 0x01
     d1c:	7a 83       	std	Y+2, r23	; 0x02
     d1e:	8b 83       	std	Y+3, r24	; 0x03
     d20:	9c 83       	std	Y+4, r25	; 0x04
	// Prescaler 8
	// Timer Freq = 1MHz
	// Tick_Time = 1uS
	// OVF Time = 2^(8 bits) * 1uS = 256uS

	TCNT2_Register = 0;
     d22:	e4 e4       	ldi	r30, 0x44	; 68
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	10 82       	st	Z, r1
    NoCounts = 255 ;
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	80 93 ab 01 	sts	0x01AB, r24
     d34:	90 93 ac 01 	sts	0x01AC, r25
     d38:	a0 93 ad 01 	sts	0x01AD, r26
     d3c:	b0 93 ae 01 	sts	0x01AE, r27
     d40:	13 c0       	rjmp	.+38     	; 0xd68 <TIM2_SetValueUS+0x5a>
    while((us % NoCounts)!=0)
    {
    	NoCounts-- ;
     d42:	80 91 ab 01 	lds	r24, 0x01AB
     d46:	90 91 ac 01 	lds	r25, 0x01AC
     d4a:	a0 91 ad 01 	lds	r26, 0x01AD
     d4e:	b0 91 ae 01 	lds	r27, 0x01AE
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	a1 09       	sbc	r26, r1
     d56:	b1 09       	sbc	r27, r1
     d58:	80 93 ab 01 	sts	0x01AB, r24
     d5c:	90 93 ac 01 	sts	0x01AC, r25
     d60:	a0 93 ad 01 	sts	0x01AD, r26
     d64:	b0 93 ae 01 	sts	0x01AE, r27
	// Tick_Time = 1uS
	// OVF Time = 2^(8 bits) * 1uS = 256uS

	TCNT2_Register = 0;
    NoCounts = 255 ;
    while((us % NoCounts)!=0)
     d68:	20 91 ab 01 	lds	r18, 0x01AB
     d6c:	30 91 ac 01 	lds	r19, 0x01AC
     d70:	40 91 ad 01 	lds	r20, 0x01AD
     d74:	50 91 ae 01 	lds	r21, 0x01AE
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	ab 81       	ldd	r26, Y+3	; 0x03
     d7e:	bc 81       	ldd	r27, Y+4	; 0x04
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 56 15 	call	0x2aac	; 0x2aac <__udivmodsi4>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	b9 f6       	brne	.-82     	; 0xd42 <TIM2_SetValueUS+0x34>
    {
    	NoCounts-- ;
    }
    OCR2_Register = NoCounts ;
     d94:	e3 e4       	ldi	r30, 0x43	; 67
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 91 ab 01 	lds	r24, 0x01AB
     d9c:	90 91 ac 01 	lds	r25, 0x01AC
     da0:	a0 91 ad 01 	lds	r26, 0x01AD
     da4:	b0 91 ae 01 	lds	r27, 0x01AE
     da8:	80 83       	st	Z, r24
    NoCounts = us / NoCounts ;
     daa:	20 91 ab 01 	lds	r18, 0x01AB
     dae:	30 91 ac 01 	lds	r19, 0x01AC
     db2:	40 91 ad 01 	lds	r20, 0x01AD
     db6:	50 91 ae 01 	lds	r21, 0x01AE
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	ab 81       	ldd	r26, Y+3	; 0x03
     dc0:	bc 81       	ldd	r27, Y+4	; 0x04
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 56 15 	call	0x2aac	; 0x2aac <__udivmodsi4>
     dca:	da 01       	movw	r26, r20
     dcc:	c9 01       	movw	r24, r18
     dce:	80 93 ab 01 	sts	0x01AB, r24
     dd2:	90 93 ac 01 	sts	0x01AC, r25
     dd6:	a0 93 ad 01 	sts	0x01AD, r26
     dda:	b0 93 ae 01 	sts	0x01AE, r27
	// Set Clock Source (Prescaler: 8)
	CleartBit(TCCR2_Register, CS20);
     dde:	a5 e4       	ldi	r26, 0x45	; 69
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 e4       	ldi	r30, 0x45	; 69
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8e 7f       	andi	r24, 0xFE	; 254
     dea:	8c 93       	st	X, r24
	SetBit(TCCR2_Register, CS21);
     dec:	a5 e4       	ldi	r26, 0x45	; 69
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e4       	ldi	r30, 0x45	; 69
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS22);
     dfa:	a5 e4       	ldi	r26, 0x45	; 69
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e4       	ldi	r30, 0x45	; 69
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8b 7f       	andi	r24, 0xFB	; 251
     e06:	8c 93       	st	X, r24
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <TIM2_Disable>:

void TIM2_Disable(void)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer (No clk)
	CleartBit(TCCR2_Register, CS20);
     e1e:	a5 e4       	ldi	r26, 0x45	; 69
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e4       	ldi	r30, 0x45	; 69
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS21);
     e2c:	a5 e4       	ldi	r26, 0x45	; 69
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e5 e4       	ldi	r30, 0x45	; 69
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8d 7f       	andi	r24, 0xFD	; 253
     e38:	8c 93       	st	X, r24
	CleartBit(TCCR2_Register, CS22);
     e3a:	a5 e4       	ldi	r26, 0x45	; 69
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e4       	ldi	r30, 0x45	; 69
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8b 7f       	andi	r24, 0xFB	; 251
     e46:	8c 93       	st	X, r24
}
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <TIM2_SetOVFCallback>:

void TIM2_SetOVFCallback(void (* ptr)(void))
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <TIM2_SetOVFCallback+0x6>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
	func_ptr = ptr;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	90 93 b0 01 	sts	0x01B0, r25
     e64:	80 93 af 01 	sts	0x01AF, r24
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <__vector_4>:

void __vector_4(void)
{
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	static u32_t counter = 0;
	if(counter == NoCounts)
     e9c:	20 91 a2 01 	lds	r18, 0x01A2
     ea0:	30 91 a3 01 	lds	r19, 0x01A3
     ea4:	40 91 a4 01 	lds	r20, 0x01A4
     ea8:	50 91 a5 01 	lds	r21, 0x01A5
     eac:	80 91 ab 01 	lds	r24, 0x01AB
     eb0:	90 91 ac 01 	lds	r25, 0x01AC
     eb4:	a0 91 ad 01 	lds	r26, 0x01AD
     eb8:	b0 91 ae 01 	lds	r27, 0x01AE
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	4a 07       	cpc	r20, r26
     ec2:	5b 07       	cpc	r21, r27
     ec4:	81 f4       	brne	.+32     	; 0xee6 <__vector_4+0x74>
	{
		func_ptr();
     ec6:	e0 91 af 01 	lds	r30, 0x01AF
     eca:	f0 91 b0 01 	lds	r31, 0x01B0
     ece:	09 95       	icall
		counter = 0;
     ed0:	10 92 a2 01 	sts	0x01A2, r1
     ed4:	10 92 a3 01 	sts	0x01A3, r1
     ed8:	10 92 a4 01 	sts	0x01A4, r1
     edc:	10 92 a5 01 	sts	0x01A5, r1
		TCNT2_Register = 0;
     ee0:	e4 e4       	ldi	r30, 0x44	; 68
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	10 82       	st	Z, r1
	}
	counter++;
     ee6:	80 91 a2 01 	lds	r24, 0x01A2
     eea:	90 91 a3 01 	lds	r25, 0x01A3
     eee:	a0 91 a4 01 	lds	r26, 0x01A4
     ef2:	b0 91 a5 01 	lds	r27, 0x01A5
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	a1 1d       	adc	r26, r1
     efa:	b1 1d       	adc	r27, r1
     efc:	80 93 a2 01 	sts	0x01A2, r24
     f00:	90 93 a3 01 	sts	0x01A3, r25
     f04:	a0 93 a4 01 	sts	0x01A4, r26
     f08:	b0 93 a5 01 	sts	0x01A5, r27
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <TIM1_InitPWM>:
#include "TIM1_interface.h"
#include "TIM1_private.h"
#include "TIM1_config.h"

void TIM1_InitPWM(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
  //select fast mode
  CleartBit(TCCR1A_Register , WGM10);
     f3a:	af e4       	ldi	r26, 0x4F	; 79
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ef e4       	ldi	r30, 0x4F	; 79
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	8c 93       	st	X, r24
  SetBit(TCCR1A_Register , WGM11);
     f48:	af e4       	ldi	r26, 0x4F	; 79
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ef e4       	ldi	r30, 0x4F	; 79
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	82 60       	ori	r24, 0x02	; 2
     f54:	8c 93       	st	X, r24
  SetBit(TCCR1B_Register , WGM12);
     f56:	ae e4       	ldi	r26, 0x4E	; 78
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ee e4       	ldi	r30, 0x4E	; 78
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 60       	ori	r24, 0x08	; 8
     f62:	8c 93       	st	X, r24
  SetBit(TCCR1B_Register , WGM13);
     f64:	ae e4       	ldi	r26, 0x4E	; 78
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ee e4       	ldi	r30, 0x4E	; 78
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 61       	ori	r24, 0x10	; 16
     f70:	8c 93       	st	X, r24

  //set mode channel A
  CleartBit(TCCR1A_Register , COM1A0);
     f72:	af e4       	ldi	r26, 0x4F	; 79
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ef e4       	ldi	r30, 0x4F	; 79
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 7b       	andi	r24, 0xBF	; 191
     f7e:	8c 93       	st	X, r24
  SetBit(TCCR1A_Register , COM1A1);
     f80:	af e4       	ldi	r26, 0x4F	; 79
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ef e4       	ldi	r30, 0x4F	; 79
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 68       	ori	r24, 0x80	; 128
     f8c:	8c 93       	st	X, r24

  //set mode channel A
  CleartBit(TCCR1A_Register , COM1B0);
     f8e:	af e4       	ldi	r26, 0x4F	; 79
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ef e4       	ldi	r30, 0x4F	; 79
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8f 7e       	andi	r24, 0xEF	; 239
     f9a:	8c 93       	st	X, r24
  SetBit(TCCR1A_Register , COM1B1);
     f9c:	af e4       	ldi	r26, 0x4F	; 79
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ef e4       	ldi	r30, 0x4F	; 79
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	80 62       	ori	r24, 0x20	; 32
     fa8:	8c 93       	st	X, r24

}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <TIM1_StartPWM>:
void TIM1_StartPWM()
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	  //select pre-scaler
	  CleartBit(TCCR1B_Register , CS10);
     fb8:	ae e4       	ldi	r26, 0x4E	; 78
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ee e4       	ldi	r30, 0x4E	; 78
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8e 7f       	andi	r24, 0xFE	; 254
     fc4:	8c 93       	st	X, r24
	  SetBit(TCCR1B_Register , CS11);
     fc6:	ae e4       	ldi	r26, 0x4E	; 78
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ee e4       	ldi	r30, 0x4E	; 78
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	82 60       	ori	r24, 0x02	; 2
     fd2:	8c 93       	st	X, r24
	  CleartBit(TCCR1B_Register , CS12);
     fd4:	ae e4       	ldi	r26, 0x4E	; 78
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ee e4       	ldi	r30, 0x4E	; 78
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8b 7f       	andi	r24, 0xFB	; 251
     fe0:	8c 93       	st	X, r24
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <TIM1_SetDutyCycle>:
void TIM1_SetDutyCycle(u8_t channel , u8_t duty)
{
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	28 97       	sbiw	r28, 0x08	; 8
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	6e 83       	std	Y+6, r22	; 0x06
  u32_t t_on = (u32_t) duty*ICR1_Register/100 ;
    1008:	8e 81       	ldd	r24, Y+6	; 0x06
    100a:	e8 2e       	mov	r14, r24
    100c:	ff 24       	eor	r15, r15
    100e:	00 e0       	ldi	r16, 0x00	; 0
    1010:	10 e0       	ldi	r17, 0x00	; 0
    1012:	e6 e4       	ldi	r30, 0x46	; 70
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	9c 01       	movw	r18, r24
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	c8 01       	movw	r24, r16
    1022:	b7 01       	movw	r22, r14
    1024:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__mulsi3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	24 e6       	ldi	r18, 0x64	; 100
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 56 15 	call	0x2aac	; 0x2aac <__udivmodsi4>
    103c:	da 01       	movw	r26, r20
    103e:	c9 01       	movw	r24, r18
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	ab 83       	std	Y+3, r26	; 0x03
    1046:	bc 83       	std	Y+4, r27	; 0x04

  switch(channel)
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	38 87       	std	Y+8, r19	; 0x08
    1050:	2f 83       	std	Y+7, r18	; 0x07
    1052:	8f 81       	ldd	r24, Y+7	; 0x07
    1054:	98 85       	ldd	r25, Y+8	; 0x08
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	31 f0       	breq	.+12     	; 0x1066 <TIM1_SetDutyCycle+0x7e>
    105a:	2f 81       	ldd	r18, Y+7	; 0x07
    105c:	38 85       	ldd	r19, Y+8	; 0x08
    105e:	21 30       	cpi	r18, 0x01	; 1
    1060:	31 05       	cpc	r19, r1
    1062:	41 f0       	breq	.+16     	; 0x1074 <TIM1_SetDutyCycle+0x8c>
    1064:	0d c0       	rjmp	.+26     	; 0x1080 <TIM1_SetDutyCycle+0x98>
  {
  case PWM_OCR1A : OCR1A_Register = (u16_t)t_on ;break ;
    1066:	ea e4       	ldi	r30, 0x4A	; 74
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <TIM1_SetDutyCycle+0x98>
  case PWM_OCR1B : OCR1B_Register = (u16_t)t_on ;break ;
    1074:	e8 e4       	ldi	r30, 0x48	; 72
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	80 83       	st	Z, r24
  }
  TIM1_T_ON(channel , duty);
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	b9 01       	movw	r22, r18
    108a:	0e 94 b8 08 	call	0x1170	; 0x1170 <TIM1_T_ON>
}
    108e:	28 96       	adiw	r28, 0x08	; 8
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	08 95       	ret

000010a8 <TIM1_SetPeriod>:
void TIM1_SetPeriod(u16_t us)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <TIM1_SetPeriod+0x6>
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
  ICR1_Register =us ;
    10b6:	e6 e4       	ldi	r30, 0x46	; 70
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <TIM1_PWMSetMode>:
void TIM1_PWMSetMode(u8_t mode ,u8_t channel)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <TIM1_PWMSetMode+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <TIM1_PWMSetMode+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
	  switch(channel)
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3c 83       	std	Y+4, r19	; 0x04
    10e4:	2b 83       	std	Y+3, r18	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	31 f0       	breq	.+12     	; 0x10fa <TIM1_PWMSetMode+0x2e>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	21 30       	cpi	r18, 0x01	; 1
    10f4:	31 05       	cpc	r19, r1
    10f6:	e9 f0       	breq	.+58     	; 0x1132 <TIM1_PWMSetMode+0x66>
    10f8:	34 c0       	rjmp	.+104    	; 0x1162 <TIM1_PWMSetMode+0x96>
	  {
	  case PWM_OCR1A :
		  TCCR1A_Register &= ~(0b11<<COM1A0) ;
    10fa:	af e4       	ldi	r26, 0x4F	; 79
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ef e4       	ldi	r30, 0x4F	; 79
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8f 73       	andi	r24, 0x3F	; 63
    1106:	8c 93       	st	X, r24
		  TCCR1A_Register |= (mode<<COM1A0) ;
    1108:	af e4       	ldi	r26, 0x4F	; 79
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ef e4       	ldi	r30, 0x4F	; 79
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	00 24       	eor	r0, r0
    111c:	96 95       	lsr	r25
    111e:	87 95       	ror	r24
    1120:	07 94       	ror	r0
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	07 94       	ror	r0
    1128:	98 2f       	mov	r25, r24
    112a:	80 2d       	mov	r24, r0
    112c:	82 2b       	or	r24, r18
    112e:	8c 93       	st	X, r24
    1130:	18 c0       	rjmp	.+48     	; 0x1162 <TIM1_PWMSetMode+0x96>
	  break ;
	  case PWM_OCR1B :
		  TCCR1B_Register &= ~(0b11<<COM1B0) ;
    1132:	ae e4       	ldi	r26, 0x4E	; 78
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ee e4       	ldi	r30, 0x4E	; 78
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	8f 7c       	andi	r24, 0xCF	; 207
    113e:	8c 93       	st	X, r24
		  TCCR1B_Register |= (mode<<COM1B0) ;
    1140:	ae e4       	ldi	r26, 0x4E	; 78
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ee e4       	ldi	r30, 0x4E	; 78
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	28 2f       	mov	r18, r24
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	82 95       	swap	r24
    1154:	92 95       	swap	r25
    1156:	90 7f       	andi	r25, 0xF0	; 240
    1158:	98 27       	eor	r25, r24
    115a:	80 7f       	andi	r24, 0xF0	; 240
    115c:	98 27       	eor	r25, r24
    115e:	82 2b       	or	r24, r18
    1160:	8c 93       	st	X, r24
	  break ;
	  }
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <TIM1_T_ON>:
void TIM1_T_ON(u8_t channel , u16_t value)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <TIM1_T_ON+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <TIM1_T_ON+0x8>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	7b 83       	std	Y+3, r23	; 0x03
    1182:	6a 83       	std	Y+2, r22	; 0x02
	  switch(channel)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3d 83       	std	Y+5, r19	; 0x05
    118c:	2c 83       	std	Y+4, r18	; 0x04
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	31 f0       	breq	.+12     	; 0x11a2 <TIM1_T_ON+0x32>
    1196:	2c 81       	ldd	r18, Y+4	; 0x04
    1198:	3d 81       	ldd	r19, Y+5	; 0x05
    119a:	21 30       	cpi	r18, 0x01	; 1
    119c:	31 05       	cpc	r19, r1
    119e:	41 f0       	breq	.+16     	; 0x11b0 <TIM1_T_ON+0x40>
    11a0:	0d c0       	rjmp	.+26     	; 0x11bc <TIM1_T_ON+0x4c>
	  {
	  case PWM_OCR1A : OCR1A_Register = (u16_t)value ;break ;
    11a2:	ea e4       	ldi	r30, 0x4A	; 74
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <TIM1_T_ON+0x4c>
	  case PWM_OCR1B : OCR1B_Register = (u16_t)value ;break ;
    11b0:	e8 e4       	ldi	r30, 0x48	; 72
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
	  }
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <GIE_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"


void GIE_Enable(void)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG_Register, I_Bit);
    11d4:	af e5       	ldi	r26, 0x5F	; 95
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e5       	ldi	r30, 0x5F	; 95
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	80 68       	ori	r24, 0x80	; 128
    11e0:	8c 93       	st	X, r24
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <GIE_Disable>:

void GIE_Disable(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	CleartBit(SREG_Register, I_Bit);
    11f0:	af e5       	ldi	r26, 0x5F	; 95
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ef e5       	ldi	r30, 0x5F	; 95
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8f 77       	andi	r24, 0x7F	; 127
    11fc:	8c 93       	st	X, r24
}
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <EXTI_Init>:
#include "EXTI_pirvate.h"



void EXTI_Init()
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	CleartBit(MCUCR_Register ,ISC01);
#elif EXTI0_MODE  == EXTI_FALLING
	CleartBit(MCUCR_Register ,ISC00);
	SetBit(MCUCR_Register ,ISC01);
#elif EXTI0_MODE  == EXTI_RISING
	SetBit(MCUCR_Register ,ISC00);
    120c:	a5 e5       	ldi	r26, 0x55	; 85
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e5       	ldi	r30, 0x55	; 85
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	8c 93       	st	X, r24
	SetBit(MCUCR_Register ,ISC01);
    121a:	a5 e5       	ldi	r26, 0x55	; 85
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e5       	ldi	r30, 0x55	; 85
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	82 60       	ori	r24, 0x02	; 2
    1226:	8c 93       	st	X, r24
	CleartBit(MCUCR_Register ,ISC11);
#elif EXTI1_MODE  == EXTI_ON_CHANGE
	SetBit(MCUCR_Register ,ISC00));
	CleartBit(MCUCR_Register ,ISC11);
#elif EXTI1_MODE  == EXTI_FALLING
	CleartBit(MCUCR_Register ,ISC00);
    1228:	a5 e5       	ldi	r26, 0x55	; 85
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e5       	ldi	r30, 0x55	; 85
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	8c 93       	st	X, r24
	SetBit(MCUCR_Register ,ISC11);
    1236:	a5 e5       	ldi	r26, 0x55	; 85
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e5       	ldi	r30, 0x55	; 85
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	88 60       	ori	r24, 0x08	; 8
    1242:	8c 93       	st	X, r24


#if EXTI2_MODE  == EXTI_FALLING
	CleartBit(MCUCSR_Register ,ISC2);
#elif EXTI2_MODE  == EXTI_RISING
	SetBit(MCUCSR_Register ,ISC2);
    1244:	a4 e5       	ldi	r26, 0x54	; 84
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e4 e5       	ldi	r30, 0x54	; 84
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 64       	ori	r24, 0x40	; 64
    1250:	8c 93       	st	X, r24

#endif

}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <EXTI_Enable>:


void EXTI_Enable(u8_t EXTI_Num)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <EXTI_Enable+0x6>
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Num)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3b 83       	std	Y+3, r19	; 0x03
    126e:	2a 83       	std	Y+2, r18	; 0x02
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	9b 81       	ldd	r25, Y+3	; 0x03
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	89 f0       	breq	.+34     	; 0x129c <EXTI_Enable+0x44>
    127a:	2a 81       	ldd	r18, Y+2	; 0x02
    127c:	3b 81       	ldd	r19, Y+3	; 0x03
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	a1 f0       	breq	.+40     	; 0x12ac <EXTI_Enable+0x54>
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	9b 81       	ldd	r25, Y+3	; 0x03
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	b9 f4       	brne	.+46     	; 0x12ba <EXTI_Enable+0x62>
	{
	case EXTI0 : SetBit(GICR_Register ,INT0);break ;
    128c:	ab e5       	ldi	r26, 0x5B	; 91
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e5       	ldi	r30, 0x5B	; 91
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	80 64       	ori	r24, 0x40	; 64
    1298:	8c 93       	st	X, r24
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <EXTI_Enable+0x62>
	case EXTI1 : SetBit(GICR_Register ,INT1);break ;
    129c:	ab e5       	ldi	r26, 0x5B	; 91
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	eb e5       	ldi	r30, 0x5B	; 91
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 68       	ori	r24, 0x80	; 128
    12a8:	8c 93       	st	X, r24
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <EXTI_Enable+0x62>
	case EXTI2 : SetBit(GICR_Register ,INT2);break ;
    12ac:	ab e5       	ldi	r26, 0x5B	; 91
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	eb e5       	ldi	r30, 0x5B	; 91
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	80 62       	ori	r24, 0x20	; 32
    12b8:	8c 93       	st	X, r24
	}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <EXTI_Disable>:

void EXTI_Disable(u8_t EXTI_Num)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <EXTI_Disable+0x6>
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Num)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3b 83       	std	Y+3, r19	; 0x03
    12dc:	2a 83       	std	Y+2, r18	; 0x02
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	89 f0       	breq	.+34     	; 0x130a <EXTI_Disable+0x44>
    12e8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ea:	3b 81       	ldd	r19, Y+3	; 0x03
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	a1 f0       	breq	.+40     	; 0x131a <EXTI_Disable+0x54>
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	b9 f4       	brne	.+46     	; 0x1328 <EXTI_Disable+0x62>
	{
	case EXTI0 : CleartBit(GICR_Register ,INT0);break ;
    12fa:	ab e5       	ldi	r26, 0x5B	; 91
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	eb e5       	ldi	r30, 0x5B	; 91
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7b       	andi	r24, 0xBF	; 191
    1306:	8c 93       	st	X, r24
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <EXTI_Disable+0x62>
	case EXTI1 : CleartBit(GICR_Register ,INT1);break ;
    130a:	ab e5       	ldi	r26, 0x5B	; 91
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	eb e5       	ldi	r30, 0x5B	; 91
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8f 77       	andi	r24, 0x7F	; 127
    1316:	8c 93       	st	X, r24
    1318:	07 c0       	rjmp	.+14     	; 0x1328 <EXTI_Disable+0x62>
	case EXTI2 : CleartBit(GICR_Register ,INT2);break ;
    131a:	ab e5       	ldi	r26, 0x5B	; 91
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e5       	ldi	r30, 0x5B	; 91
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 7d       	andi	r24, 0xDF	; 223
    1326:	8c 93       	st	X, r24
	}
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <Exti_setCallback>:

void Exti_setCallback(u8_t EXTI_num,void (*ptr)())
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <Exti_setCallback+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <Exti_setCallback+0x8>
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	7b 83       	std	Y+3, r23	; 0x03
    1346:	6a 83       	std	Y+2, r22	; 0x02
	switch(EXTI_num)
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3d 83       	std	Y+5, r19	; 0x05
    1350:	2c 83       	std	Y+4, r18	; 0x04
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	81 f0       	breq	.+32     	; 0x137c <Exti_setCallback+0x48>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	91 f0       	breq	.+36     	; 0x138a <Exti_setCallback+0x56>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	a1 f4       	brne	.+40     	; 0x1396 <Exti_setCallback+0x62>
	{
	case EXTI0 : ptr1 = ptr;break ;
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	9b 81       	ldd	r25, Y+3	; 0x03
    1372:	90 93 b4 01 	sts	0x01B4, r25
    1376:	80 93 b3 01 	sts	0x01B3, r24
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <Exti_setCallback+0x62>
	case EXTI1 : ptr2 = ptr;break ;
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	9b 81       	ldd	r25, Y+3	; 0x03
    1380:	90 93 b6 01 	sts	0x01B6, r25
    1384:	80 93 b5 01 	sts	0x01B5, r24
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <Exti_setCallback+0x62>
	case EXTI2 : ptr3 = ptr;break ;
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	90 93 b2 01 	sts	0x01B2, r25
    1392:	80 93 b1 01 	sts	0x01B1, r24
	}
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <__vector_1>:
void __vector_1(void)
{
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	0f 92       	push	r0
    13ae:	11 24       	eor	r1, r1
    13b0:	2f 93       	push	r18
    13b2:	3f 93       	push	r19
    13b4:	4f 93       	push	r20
    13b6:	5f 93       	push	r21
    13b8:	6f 93       	push	r22
    13ba:	7f 93       	push	r23
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	af 93       	push	r26
    13c2:	bf 93       	push	r27
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	ptr1();
    13d0:	e0 91 b3 01 	lds	r30, 0x01B3
    13d4:	f0 91 b4 01 	lds	r31, 0x01B4
    13d8:	09 95       	icall
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	ff 91       	pop	r31
    13e0:	ef 91       	pop	r30
    13e2:	bf 91       	pop	r27
    13e4:	af 91       	pop	r26
    13e6:	9f 91       	pop	r25
    13e8:	8f 91       	pop	r24
    13ea:	7f 91       	pop	r23
    13ec:	6f 91       	pop	r22
    13ee:	5f 91       	pop	r21
    13f0:	4f 91       	pop	r20
    13f2:	3f 91       	pop	r19
    13f4:	2f 91       	pop	r18
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f 90       	pop	r0
    13fc:	1f 90       	pop	r1
    13fe:	18 95       	reti

00001400 <__vector_2>:
void __vector_2(void)
{
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	ptr2();
    142a:	e0 91 b5 01 	lds	r30, 0x01B5
    142e:	f0 91 b6 01 	lds	r31, 0x01B6
    1432:	09 95       	icall
}
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <__vector_3>:
void __vector_3(void)
{
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	ptr3();
    1484:	e0 91 b1 01 	lds	r30, 0x01B1
    1488:	f0 91 b2 01 	lds	r31, 0x01B2
    148c:	09 95       	icall
}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <DIO_u8SetPinValue>:

#include "DIO_private.h"
#include "DIO_interface.h"

u8_t DIO_u8SetPinValue(u8_t L_u8Port ,u8_t L_u8Pin ,u8_t L_u8Value)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	28 97       	sbiw	r28, 0x08	; 8
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6a 83       	std	Y+2, r22	; 0x02
    14cc:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Value == HIGH)
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <DIO_u8SetPinValue+0x22>
    14d4:	71 c0       	rjmp	.+226    	; 0x15b8 <DIO_u8SetPinValue+0x104>
	{
		switch(L_u8Port)
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	38 87       	std	Y+8, r19	; 0x08
    14de:	2f 83       	std	Y+7, r18	; 0x07
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	91 05       	cpc	r25, r1
    14e8:	49 f1       	breq	.+82     	; 0x153c <DIO_u8SetPinValue+0x88>
    14ea:	2f 81       	ldd	r18, Y+7	; 0x07
    14ec:	38 85       	ldd	r19, Y+8	; 0x08
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	2c f4       	brge	.+10     	; 0x14fe <DIO_u8SetPinValue+0x4a>
    14f4:	8f 81       	ldd	r24, Y+7	; 0x07
    14f6:	98 85       	ldd	r25, Y+8	; 0x08
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	61 f0       	breq	.+24     	; 0x1514 <DIO_u8SetPinValue+0x60>
    14fc:	5b c0       	rjmp	.+182    	; 0x15b4 <DIO_u8SetPinValue+0x100>
    14fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1500:	38 85       	ldd	r19, Y+8	; 0x08
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	71 f1       	breq	.+92     	; 0x1564 <DIO_u8SetPinValue+0xb0>
    1508:	8f 81       	ldd	r24, Y+7	; 0x07
    150a:	98 85       	ldd	r25, Y+8	; 0x08
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	91 05       	cpc	r25, r1
    1510:	e9 f1       	breq	.+122    	; 0x158c <DIO_u8SetPinValue+0xd8>
    1512:	50 c0       	rjmp	.+160    	; 0x15b4 <DIO_u8SetPinValue+0x100>
		{
		case PORTA : SetBit(PORTA_REG , L_u8Pin); break ;
    1514:	ab e3       	ldi	r26, 0x3B	; 59
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	eb e3       	ldi	r30, 0x3B	; 59
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_u8SetPinValue+0x7e>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_u8SetPinValue+0x7a>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	ba c0       	rjmp	.+372    	; 0x16b0 <DIO_u8SetPinValue+0x1fc>
		case PORTB : SetBit(PORTB_REG , L_u8Pin); break ;
    153c:	a8 e3       	ldi	r26, 0x38	; 56
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e8 e3       	ldi	r30, 0x38	; 56
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_u8SetPinValue+0xa6>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_u8SetPinValue+0xa2>
    155e:	84 2b       	or	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	a6 c0       	rjmp	.+332    	; 0x16b0 <DIO_u8SetPinValue+0x1fc>
		case PORTC : SetBit(PORTC_REG , L_u8Pin); break ;
    1564:	a5 e3       	ldi	r26, 0x35	; 53
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e5 e3       	ldi	r30, 0x35	; 53
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_u8SetPinValue+0xce>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_u8SetPinValue+0xca>
    1586:	84 2b       	or	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	92 c0       	rjmp	.+292    	; 0x16b0 <DIO_u8SetPinValue+0x1fc>
		case PORTD : SetBit(PORTD_REG , L_u8Pin); break ;
    158c:	a2 e3       	ldi	r26, 0x32	; 50
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e2 e3       	ldi	r30, 0x32	; 50
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_u8SetPinValue+0xf6>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_u8SetPinValue+0xf2>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	7e c0       	rjmp	.+252    	; 0x16b0 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    15b4:	1e 82       	std	Y+6, r1	; 0x06
    15b6:	7e c0       	rjmp	.+252    	; 0x16b4 <DIO_u8SetPinValue+0x200>
		}
	}
	else if(L_u8Value == LOW)
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	88 23       	and	r24, r24
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <DIO_u8SetPinValue+0x10c>
    15be:	76 c0       	rjmp	.+236    	; 0x16ac <DIO_u8SetPinValue+0x1f8>
	{
		switch(L_u8Port)
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3d 83       	std	Y+5, r19	; 0x05
    15c8:	2c 83       	std	Y+4, r18	; 0x04
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	59 f1       	breq	.+86     	; 0x162a <DIO_u8SetPinValue+0x176>
    15d4:	2c 81       	ldd	r18, Y+4	; 0x04
    15d6:	3d 81       	ldd	r19, Y+5	; 0x05
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <DIO_u8SetPinValue+0x134>
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	69 f0       	breq	.+26     	; 0x1600 <DIO_u8SetPinValue+0x14c>
    15e6:	60 c0       	rjmp	.+192    	; 0x16a8 <DIO_u8SetPinValue+0x1f4>
    15e8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ea:	3d 81       	ldd	r19, Y+5	; 0x05
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	89 f1       	breq	.+98     	; 0x1654 <DIO_u8SetPinValue+0x1a0>
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <DIO_u8SetPinValue+0x14a>
    15fc:	40 c0       	rjmp	.+128    	; 0x167e <DIO_u8SetPinValue+0x1ca>
    15fe:	54 c0       	rjmp	.+168    	; 0x16a8 <DIO_u8SetPinValue+0x1f4>
		{
		case PORTA : CleartBit(PORTA_REG , L_u8Pin); break ;
    1600:	ab e3       	ldi	r26, 0x3B	; 59
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	eb e3       	ldi	r30, 0x3B	; 59
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_u8SetPinValue+0x16a>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_u8SetPinValue+0x166>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	43 c0       	rjmp	.+134    	; 0x16b0 <DIO_u8SetPinValue+0x1fc>
		case PORTB : CleartBit(PORTB_REG , L_u8Pin); break ;
    162a:	a8 e3       	ldi	r26, 0x38	; 56
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e8 e3       	ldi	r30, 0x38	; 56
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_u8SetPinValue+0x194>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_u8SetPinValue+0x190>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	2e c0       	rjmp	.+92     	; 0x16b0 <DIO_u8SetPinValue+0x1fc>
		case PORTC : CleartBit(PORTC_REG , L_u8Pin); break ;
    1654:	a5 e3       	ldi	r26, 0x35	; 53
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e3       	ldi	r30, 0x35	; 53
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_u8SetPinValue+0x1be>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_u8SetPinValue+0x1ba>
    1676:	80 95       	com	r24
    1678:	84 23       	and	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	19 c0       	rjmp	.+50     	; 0x16b0 <DIO_u8SetPinValue+0x1fc>
		case PORTD : CleartBit(PORTD_REG , L_u8Pin); break ;
    167e:	a2 e3       	ldi	r26, 0x32	; 50
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e2 e3       	ldi	r30, 0x32	; 50
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <DIO_u8SetPinValue+0x1e8>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <DIO_u8SetPinValue+0x1e4>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <DIO_u8SetPinValue+0x1fc>
		default : return ERROR ; break ;
    16a8:	1e 82       	std	Y+6, r1	; 0x06
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <DIO_u8SetPinValue+0x200>
		}
	}
	else
	{
		return ERROR ;
    16ac:	1e 82       	std	Y+6, r1	; 0x06
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_u8SetPinValue+0x200>
	}
	return NO_ERROR ;
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    16b6:	28 96       	adiw	r28, 0x08	; 8
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <DIO_u8SetPinDirection>:
u8_t DIO_u8SetPinDirection(u8_t L_u8Port ,u8_t L_u8Pin ,u8_t L_u8Direction)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	28 97       	sbiw	r28, 0x08	; 8
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	6a 83       	std	Y+2, r22	; 0x02
    16e0:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Direction== OUTPUT)
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	09 f0       	breq	.+2      	; 0x16ea <DIO_u8SetPinDirection+0x22>
    16e8:	71 c0       	rjmp	.+226    	; 0x17cc <DIO_u8SetPinDirection+0x104>
	{
		switch(L_u8Port)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	38 87       	std	Y+8, r19	; 0x08
    16f2:	2f 83       	std	Y+7, r18	; 0x07
    16f4:	8f 81       	ldd	r24, Y+7	; 0x07
    16f6:	98 85       	ldd	r25, Y+8	; 0x08
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	49 f1       	breq	.+82     	; 0x1750 <DIO_u8SetPinDirection+0x88>
    16fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1700:	38 85       	ldd	r19, Y+8	; 0x08
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	2c f4       	brge	.+10     	; 0x1712 <DIO_u8SetPinDirection+0x4a>
    1708:	8f 81       	ldd	r24, Y+7	; 0x07
    170a:	98 85       	ldd	r25, Y+8	; 0x08
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	61 f0       	breq	.+24     	; 0x1728 <DIO_u8SetPinDirection+0x60>
    1710:	5b c0       	rjmp	.+182    	; 0x17c8 <DIO_u8SetPinDirection+0x100>
    1712:	2f 81       	ldd	r18, Y+7	; 0x07
    1714:	38 85       	ldd	r19, Y+8	; 0x08
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	31 05       	cpc	r19, r1
    171a:	71 f1       	breq	.+92     	; 0x1778 <DIO_u8SetPinDirection+0xb0>
    171c:	8f 81       	ldd	r24, Y+7	; 0x07
    171e:	98 85       	ldd	r25, Y+8	; 0x08
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	91 05       	cpc	r25, r1
    1724:	e9 f1       	breq	.+122    	; 0x17a0 <DIO_u8SetPinDirection+0xd8>
    1726:	50 c0       	rjmp	.+160    	; 0x17c8 <DIO_u8SetPinDirection+0x100>
		{
		case PORTA : SetBit(DDRA_REG , L_u8Pin); break ;
    1728:	aa e3       	ldi	r26, 0x3A	; 58
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ea e3       	ldi	r30, 0x3A	; 58
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8SetPinDirection+0x7e>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_u8SetPinDirection+0x7a>
    174a:	84 2b       	or	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	ba c0       	rjmp	.+372    	; 0x18c4 <DIO_u8SetPinDirection+0x1fc>
		case PORTB : SetBit(DDRB_REG , L_u8Pin); break ;
    1750:	a7 e3       	ldi	r26, 0x37	; 55
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e7 e3       	ldi	r30, 0x37	; 55
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_u8SetPinDirection+0xa6>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_u8SetPinDirection+0xa2>
    1772:	84 2b       	or	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	a6 c0       	rjmp	.+332    	; 0x18c4 <DIO_u8SetPinDirection+0x1fc>
		case PORTC : SetBit(DDRC_REG , L_u8Pin); break ;
    1778:	a4 e3       	ldi	r26, 0x34	; 52
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_u8SetPinDirection+0xce>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_u8SetPinDirection+0xca>
    179a:	84 2b       	or	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	92 c0       	rjmp	.+292    	; 0x18c4 <DIO_u8SetPinDirection+0x1fc>
		case PORTD : SetBit(DDRD_REG , L_u8Pin); break ;
    17a0:	a1 e3       	ldi	r26, 0x31	; 49
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e1 e3       	ldi	r30, 0x31	; 49
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_u8SetPinDirection+0xf6>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_u8SetPinDirection+0xf2>
    17c2:	84 2b       	or	r24, r20
    17c4:	8c 93       	st	X, r24
    17c6:	7e c0       	rjmp	.+252    	; 0x18c4 <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    17c8:	1e 82       	std	Y+6, r1	; 0x06
    17ca:	7e c0       	rjmp	.+252    	; 0x18c8 <DIO_u8SetPinDirection+0x200>
		}
	}
	else if(L_u8Direction == INPUT)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	88 23       	and	r24, r24
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <DIO_u8SetPinDirection+0x10c>
    17d2:	76 c0       	rjmp	.+236    	; 0x18c0 <DIO_u8SetPinDirection+0x1f8>
	{
		switch(L_u8Port)
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	3d 83       	std	Y+5, r19	; 0x05
    17dc:	2c 83       	std	Y+4, r18	; 0x04
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	9d 81       	ldd	r25, Y+5	; 0x05
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	59 f1       	breq	.+86     	; 0x183e <DIO_u8SetPinDirection+0x176>
    17e8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ea:	3d 81       	ldd	r19, Y+5	; 0x05
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	31 05       	cpc	r19, r1
    17f0:	2c f4       	brge	.+10     	; 0x17fc <DIO_u8SetPinDirection+0x134>
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	9d 81       	ldd	r25, Y+5	; 0x05
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	69 f0       	breq	.+26     	; 0x1814 <DIO_u8SetPinDirection+0x14c>
    17fa:	60 c0       	rjmp	.+192    	; 0x18bc <DIO_u8SetPinDirection+0x1f4>
    17fc:	2c 81       	ldd	r18, Y+4	; 0x04
    17fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1800:	22 30       	cpi	r18, 0x02	; 2
    1802:	31 05       	cpc	r19, r1
    1804:	89 f1       	breq	.+98     	; 0x1868 <DIO_u8SetPinDirection+0x1a0>
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	91 05       	cpc	r25, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <DIO_u8SetPinDirection+0x14a>
    1810:	40 c0       	rjmp	.+128    	; 0x1892 <DIO_u8SetPinDirection+0x1ca>
    1812:	54 c0       	rjmp	.+168    	; 0x18bc <DIO_u8SetPinDirection+0x1f4>
		{
		case PORTA : CleartBit(DDRA_REG , L_u8Pin); break ;
    1814:	aa e3       	ldi	r26, 0x3A	; 58
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ea e3       	ldi	r30, 0x3A	; 58
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_u8SetPinDirection+0x16a>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <DIO_u8SetPinDirection+0x166>
    1836:	80 95       	com	r24
    1838:	84 23       	and	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	43 c0       	rjmp	.+134    	; 0x18c4 <DIO_u8SetPinDirection+0x1fc>
		case PORTB : CleartBit(DDRB_REG , L_u8Pin); break ;
    183e:	a7 e3       	ldi	r26, 0x37	; 55
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e7 e3       	ldi	r30, 0x37	; 55
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_u8SetPinDirection+0x194>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_u8SetPinDirection+0x190>
    1860:	80 95       	com	r24
    1862:	84 23       	and	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	2e c0       	rjmp	.+92     	; 0x18c4 <DIO_u8SetPinDirection+0x1fc>
		case PORTC : CleartBit(DDRC_REG , L_u8Pin); break ;
    1868:	a4 e3       	ldi	r26, 0x34	; 52
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e4 e3       	ldi	r30, 0x34	; 52
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_u8SetPinDirection+0x1be>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_u8SetPinDirection+0x1ba>
    188a:	80 95       	com	r24
    188c:	84 23       	and	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	19 c0       	rjmp	.+50     	; 0x18c4 <DIO_u8SetPinDirection+0x1fc>
		case PORTD : CleartBit(DDRD_REG , L_u8Pin); break ;
    1892:	a1 e3       	ldi	r26, 0x31	; 49
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e1 e3       	ldi	r30, 0x31	; 49
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_u8SetPinDirection+0x1e8>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_u8SetPinDirection+0x1e4>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <DIO_u8SetPinDirection+0x1fc>
		default : return ERROR ; break ;
    18bc:	1e 82       	std	Y+6, r1	; 0x06
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <DIO_u8SetPinDirection+0x200>
		}
	}
	else
	{
		return ERROR ;
    18c0:	1e 82       	std	Y+6, r1	; 0x06
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_u8SetPinDirection+0x200>
	}

	return NO_ERROR ;
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    18ca:	28 96       	adiw	r28, 0x08	; 8
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <DIO_u8GetBit>:

u8_t DIO_u8GetBit(u8_t L_u8Port ,u8_t L_u8Pin )
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <DIO_u8GetBit+0x6>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <DIO_u8GetBit+0x8>
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <DIO_u8GetBit+0xa>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	8a 83       	std	Y+2, r24	; 0x02
    18ec:	6b 83       	std	Y+3, r22	; 0x03
	u8_t L_u8pinval ;
	switch(L_u8Port)
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3e 83       	std	Y+6, r19	; 0x06
    18f6:	2d 83       	std	Y+5, r18	; 0x05
    18f8:	4d 81       	ldd	r20, Y+5	; 0x05
    18fa:	5e 81       	ldd	r21, Y+6	; 0x06
    18fc:	41 30       	cpi	r20, 0x01	; 1
    18fe:	51 05       	cpc	r21, r1
    1900:	41 f1       	breq	.+80     	; 0x1952 <DIO_u8GetBit+0x76>
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	82 30       	cpi	r24, 0x02	; 2
    1908:	91 05       	cpc	r25, r1
    190a:	34 f4       	brge	.+12     	; 0x1918 <DIO_u8GetBit+0x3c>
    190c:	2d 81       	ldd	r18, Y+5	; 0x05
    190e:	3e 81       	ldd	r19, Y+6	; 0x06
    1910:	21 15       	cp	r18, r1
    1912:	31 05       	cpc	r19, r1
    1914:	61 f0       	breq	.+24     	; 0x192e <DIO_u8GetBit+0x52>
    1916:	53 c0       	rjmp	.+166    	; 0x19be <DIO_u8GetBit+0xe2>
    1918:	4d 81       	ldd	r20, Y+5	; 0x05
    191a:	5e 81       	ldd	r21, Y+6	; 0x06
    191c:	42 30       	cpi	r20, 0x02	; 2
    191e:	51 05       	cpc	r21, r1
    1920:	51 f1       	breq	.+84     	; 0x1976 <DIO_u8GetBit+0x9a>
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	91 05       	cpc	r25, r1
    192a:	b9 f1       	breq	.+110    	; 0x199a <DIO_u8GetBit+0xbe>
    192c:	48 c0       	rjmp	.+144    	; 0x19be <DIO_u8GetBit+0xe2>
	{
	case PORTA :L_u8pinval = GetBit(PINA_REG , L_u8Pin); break ;
    192e:	e9 e3       	ldi	r30, 0x39	; 57
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a9 01       	movw	r20, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_u8GetBit+0x6a>
    1942:	55 95       	asr	r21
    1944:	47 95       	ror	r20
    1946:	8a 95       	dec	r24
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_u8GetBit+0x66>
    194a:	ca 01       	movw	r24, r20
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	38 c0       	rjmp	.+112    	; 0x19c2 <DIO_u8GetBit+0xe6>
	case PORTB :L_u8pinval = GetBit(PINB_REG , L_u8Pin); break ;
    1952:	e6 e3       	ldi	r30, 0x36	; 54
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a9 01       	movw	r20, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_u8GetBit+0x8e>
    1966:	55 95       	asr	r21
    1968:	47 95       	ror	r20
    196a:	8a 95       	dec	r24
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <DIO_u8GetBit+0x8a>
    196e:	ca 01       	movw	r24, r20
    1970:	81 70       	andi	r24, 0x01	; 1
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	26 c0       	rjmp	.+76     	; 0x19c2 <DIO_u8GetBit+0xe6>
	case PORTC :L_u8pinval = GetBit(PINC_REG , L_u8Pin); break ;
    1976:	e3 e3       	ldi	r30, 0x33	; 51
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a9 01       	movw	r20, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_u8GetBit+0xb2>
    198a:	55 95       	asr	r21
    198c:	47 95       	ror	r20
    198e:	8a 95       	dec	r24
    1990:	e2 f7       	brpl	.-8      	; 0x198a <DIO_u8GetBit+0xae>
    1992:	ca 01       	movw	r24, r20
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <DIO_u8GetBit+0xe6>
	case PORTD :L_u8pinval = GetBit(PIND_REG , L_u8Pin); break ;
    199a:	e0 e3       	ldi	r30, 0x30	; 48
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a9 01       	movw	r20, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_u8GetBit+0xd6>
    19ae:	55 95       	asr	r21
    19b0:	47 95       	ror	r20
    19b2:	8a 95       	dec	r24
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <DIO_u8GetBit+0xd2>
    19b6:	ca 01       	movw	r24, r20
    19b8:	81 70       	andi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_u8GetBit+0xe6>
	default : return ERROR ; break ;
    19be:	1c 82       	std	Y+4, r1	; 0x04
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_u8GetBit+0xea>
	}

	return L_u8pinval ;
    19c2:	59 81       	ldd	r21, Y+1	; 0x01
    19c4:	5c 83       	std	Y+4, r21	; 0x04
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19c8:	26 96       	adiw	r28, 0x06	; 6
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <DIO_u8GetPort>:

u8_t DIO_u8GetPort(u8_t L_u8Port )
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <DIO_u8GetPort+0x6>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <DIO_u8GetPort+0x8>
    19e2:	0f 92       	push	r0
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	8a 83       	std	Y+2, r24	; 0x02
	u8_t L_u8pinval ;
	switch(L_u8Port)
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3d 83       	std	Y+5, r19	; 0x05
    19f2:	2c 83       	std	Y+4, r18	; 0x04
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	91 05       	cpc	r25, r1
    19fc:	d1 f0       	breq	.+52     	; 0x1a32 <DIO_u8GetPort+0x58>
    19fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1a00:	3d 81       	ldd	r19, Y+5	; 0x05
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <DIO_u8GetPort+0x38>
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <DIO_u8GetPort+0x4e>
    1a10:	1f c0       	rjmp	.+62     	; 0x1a50 <DIO_u8GetPort+0x76>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	81 f0       	breq	.+32     	; 0x1a3c <DIO_u8GetPort+0x62>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	91 05       	cpc	r25, r1
    1a24:	81 f0       	breq	.+32     	; 0x1a46 <DIO_u8GetPort+0x6c>
    1a26:	14 c0       	rjmp	.+40     	; 0x1a50 <DIO_u8GetPort+0x76>
	{
	case PORTA :L_u8pinval = PINA_REG; break ;
    1a28:	e9 e3       	ldi	r30, 0x39	; 57
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	11 c0       	rjmp	.+34     	; 0x1a54 <DIO_u8GetPort+0x7a>
	case PORTB :L_u8pinval = PINB_REG; break ;
    1a32:	e6 e3       	ldi	r30, 0x36	; 54
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	0c c0       	rjmp	.+24     	; 0x1a54 <DIO_u8GetPort+0x7a>
	case PORTC :L_u8pinval = PINC_REG; break ;
    1a3c:	e3 e3       	ldi	r30, 0x33	; 51
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	07 c0       	rjmp	.+14     	; 0x1a54 <DIO_u8GetPort+0x7a>
	case PORTD :L_u8pinval = PIND_REG; break ;
    1a46:	e0 e3       	ldi	r30, 0x30	; 48
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_u8GetPort+0x7a>
	default : return ERROR ; break ;
    1a50:	1b 82       	std	Y+3, r1	; 0x03
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_u8GetPort+0x7e>
	}

	return L_u8pinval ;
    1a54:	99 81       	ldd	r25, Y+1	; 0x01
    1a56:	9b 83       	std	Y+3, r25	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <DIO_u8SetPortValue>:

u8_t DIO_u8SetPortValue(u8_t L_u8Port ,u8_t L_u8Value)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <DIO_u8SetPortValue+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <DIO_u8SetPortValue+0x8>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	3d 83       	std	Y+5, r19	; 0x05
    1a84:	2c 83       	std	Y+4, r18	; 0x04
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	d1 f0       	breq	.+52     	; 0x1ac4 <DIO_u8SetPortValue+0x5a>
    1a90:	2c 81       	ldd	r18, Y+4	; 0x04
    1a92:	3d 81       	ldd	r19, Y+5	; 0x05
    1a94:	22 30       	cpi	r18, 0x02	; 2
    1a96:	31 05       	cpc	r19, r1
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <DIO_u8SetPortValue+0x3a>
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <DIO_u8SetPortValue+0x50>
    1aa2:	1f c0       	rjmp	.+62     	; 0x1ae2 <DIO_u8SetPortValue+0x78>
    1aa4:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa6:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	81 f0       	breq	.+32     	; 0x1ace <DIO_u8SetPortValue+0x64>
    1aae:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab2:	83 30       	cpi	r24, 0x03	; 3
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	81 f0       	breq	.+32     	; 0x1ad8 <DIO_u8SetPortValue+0x6e>
    1ab8:	14 c0       	rjmp	.+40     	; 0x1ae2 <DIO_u8SetPortValue+0x78>
	{
	case PORTA: PORTA_REG = L_u8Value; break;
    1aba:	eb e3       	ldi	r30, 0x3B	; 59
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	80 83       	st	Z, r24
    1ac2:	11 c0       	rjmp	.+34     	; 0x1ae6 <DIO_u8SetPortValue+0x7c>
	case PORTB: PORTB_REG = L_u8Value; break;
    1ac4:	e8 e3       	ldi	r30, 0x38	; 56
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	80 83       	st	Z, r24
    1acc:	0c c0       	rjmp	.+24     	; 0x1ae6 <DIO_u8SetPortValue+0x7c>
	case PORTC: PORTC_REG = L_u8Value; break;
    1ace:	e5 e3       	ldi	r30, 0x35	; 53
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	80 83       	st	Z, r24
    1ad6:	07 c0       	rjmp	.+14     	; 0x1ae6 <DIO_u8SetPortValue+0x7c>
	case PORTD: PORTD_REG = L_u8Value; break;
    1ad8:	e2 e3       	ldi	r30, 0x32	; 50
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	80 83       	st	Z, r24
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <DIO_u8SetPortValue+0x7c>
	default: return ERROR; break;
    1ae2:	1b 82       	std	Y+3, r1	; 0x03
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_u8SetPortValue+0x80>
	}
	return NO_ERROR ;
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	9b 83       	std	Y+3, r25	; 0x03
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <DIO_u8SetPortDirection>:
u8_t DIO_u8SetPortDirection(u8_t L_u8Port ,u8_t L_u8Direction)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <DIO_u8SetPortDirection+0x6>
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <DIO_u8SetPortDirection+0x8>
    1b04:	0f 92       	push	r0
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	6a 83       	std	Y+2, r22	; 0x02
	if(L_u8Direction==OUTPUT)
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	19 f4       	brne	.+6      	; 0x1b1a <DIO_u8SetPortDirection+0x1e>
		L_u8Direction =0xFF;
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	8a 83       	std	Y+2, r24	; 0x02
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <DIO_u8SetPortDirection+0x20>
	else
	{
		L_u8Direction =0x00;
    1b1a:	1a 82       	std	Y+2, r1	; 0x02
	}
	switch(L_u8Port)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	3d 83       	std	Y+5, r19	; 0x05
    1b24:	2c 83       	std	Y+4, r18	; 0x04
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	d1 f0       	breq	.+52     	; 0x1b64 <DIO_u8SetPortDirection+0x68>
    1b30:	2c 81       	ldd	r18, Y+4	; 0x04
    1b32:	3d 81       	ldd	r19, Y+5	; 0x05
    1b34:	22 30       	cpi	r18, 0x02	; 2
    1b36:	31 05       	cpc	r19, r1
    1b38:	2c f4       	brge	.+10     	; 0x1b44 <DIO_u8SetPortDirection+0x48>
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	61 f0       	breq	.+24     	; 0x1b5a <DIO_u8SetPortDirection+0x5e>
    1b42:	1f c0       	rjmp	.+62     	; 0x1b82 <DIO_u8SetPortDirection+0x86>
    1b44:	2c 81       	ldd	r18, Y+4	; 0x04
    1b46:	3d 81       	ldd	r19, Y+5	; 0x05
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	81 f0       	breq	.+32     	; 0x1b6e <DIO_u8SetPortDirection+0x72>
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	83 30       	cpi	r24, 0x03	; 3
    1b54:	91 05       	cpc	r25, r1
    1b56:	81 f0       	breq	.+32     	; 0x1b78 <DIO_u8SetPortDirection+0x7c>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <DIO_u8SetPortDirection+0x86>
	{
		case PORTA: DDRA_REG = L_u8Direction; break;
    1b5a:	ea e3       	ldi	r30, 0x3A	; 58
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	80 83       	st	Z, r24
    1b62:	11 c0       	rjmp	.+34     	; 0x1b86 <DIO_u8SetPortDirection+0x8a>
		case PORTB: DDRB_REG = L_u8Direction; break;
    1b64:	e7 e3       	ldi	r30, 0x37	; 55
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	80 83       	st	Z, r24
    1b6c:	0c c0       	rjmp	.+24     	; 0x1b86 <DIO_u8SetPortDirection+0x8a>
		case PORTC: DDRC_REG = L_u8Direction; break;
    1b6e:	e4 e3       	ldi	r30, 0x34	; 52
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	80 83       	st	Z, r24
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <DIO_u8SetPortDirection+0x8a>
		case PORTD: DDRD_REG = L_u8Direction; break;
    1b78:	e1 e3       	ldi	r30, 0x31	; 49
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	80 83       	st	Z, r24
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <DIO_u8SetPortDirection+0x8a>
		default: return ERROR; break;
    1b82:	1b 82       	std	Y+3, r1	; 0x03
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_u8SetPortDirection+0x8e>
	}
	return NO_ERROR ;
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	9b 83       	std	Y+3, r25	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <ADC_Init>:
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_config.h"

void ADC_Init(void)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
     ADMUX_Register = 0 ;
    1ba4:	e7 e2       	ldi	r30, 0x27	; 39
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	10 82       	st	Z, r1
     ADCSRA_Register = 0 ;
    1baa:	e6 e2       	ldi	r30, 0x26	; 38
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	10 82       	st	Z, r1

	SetBit(ADCSRA_Register , ADEN);
    1bb0:	a6 e2       	ldi	r26, 0x26	; 38
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e6 e2       	ldi	r30, 0x26	; 38
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	80 68       	ori	r24, 0x80	; 128
    1bbc:	8c 93       	st	X, r24

	//set prescaler
	ADCSRA_Register |=ADC_PSC <<ADPS0;
    1bbe:	a6 e2       	ldi	r26, 0x26	; 38
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e6 e2       	ldi	r30, 0x26	; 38
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	85 60       	ori	r24, 0x05	; 5
    1bca:	8c 93       	st	X, r24

	//set reference
	ADMUX_Register |= ADC_REF  <<REFS0 ;
    1bcc:	a7 e2       	ldi	r26, 0x27	; 39
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e7 e2       	ldi	r30, 0x27	; 39
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	80 64       	ori	r24, 0x40	; 64
    1bd8:	8c 93       	st	X, r24

	//set result adjust

	ADMUX_Register |= ADC_ADJUST <<ADLAR ;
    1bda:	a7 e2       	ldi	r26, 0x27	; 39
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e7 e2       	ldi	r30, 0x27	; 39
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8c 93       	st	X, r24
}
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	08 95       	ret

00001bec <ADC_Selectchannel>:

void ADC_Selectchannel(u8_t channel)
{
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    ADMUX_Register &=0b11100000 ;
    1bf8:	a7 e2       	ldi	r26, 0x27	; 39
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e7 e2       	ldi	r30, 0x27	; 39
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 7e       	andi	r24, 0xE0	; 224
    1c04:	8c 93       	st	X, r24
	ADMUX_Register |= channel <<MUX0 ;
    1c06:	a7 e2       	ldi	r26, 0x27	; 39
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e7 e2       	ldi	r30, 0x27	; 39
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	90 81       	ld	r25, Z
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	89 2b       	or	r24, r25
    1c14:	8c 93       	st	X, r24
}
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <ADC_StartConversion>:

u16_t ADC_StartConversion(void)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	//start conversion
	SetBit(ADCSRA_Register ,ADSC);
    1c26:	a6 e2       	ldi	r26, 0x26	; 38
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e6 e2       	ldi	r30, 0x26	; 38
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 64       	ori	r24, 0x40	; 64
    1c32:	8c 93       	st	X, r24

	//wait for conversion to complete
	while(GetBit(ADCSRA_Register , ADSC));
    1c34:	e6 e2       	ldi	r30, 0x26	; 38
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	82 95       	swap	r24
    1c3c:	86 95       	lsr	r24
    1c3e:	86 95       	lsr	r24
    1c40:	83 70       	andi	r24, 0x03	; 3
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	81 70       	andi	r24, 0x01	; 1
    1c48:	90 70       	andi	r25, 0x00	; 0
    1c4a:	88 23       	and	r24, r24
    1c4c:	99 f7       	brne	.-26     	; 0x1c34 <ADC_StartConversion+0x16>

	return ADCDATA_Register ;
    1c4e:	e4 e2       	ldi	r30, 0x24	; 36
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <Steper_Init>:
#include "Steper_private.h"

 static u8_t Current_pattern = 0 ;

void Steper_Init()
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
	for(u8_t i = 0 ; i< NUM_OF_COILS ;i++)
    1c66:	19 82       	std	Y+1, r1	; 0x01
    1c68:	1a c0       	rjmp	.+52     	; 0x1c9e <Steper_Init+0x42>
    DIO_u8SetPinDirection(coils[i].port ,coils[i].pin ,OUTPUT );
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	88 2f       	mov	r24, r24
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	fc 01       	movw	r30, r24
    1c76:	e8 59       	subi	r30, 0x98	; 152
    1c78:	fe 4f       	sbci	r31, 0xFE	; 254
    1c7a:	20 81       	ld	r18, Z
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	fc 01       	movw	r30, r24
    1c88:	e7 59       	subi	r30, 0x97	; 151
    1c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8c:	90 81       	ld	r25, Z
    1c8e:	82 2f       	mov	r24, r18
    1c90:	69 2f       	mov	r22, r25
    1c92:	41 e0       	ldi	r20, 0x01	; 1
    1c94:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>

 static u8_t Current_pattern = 0 ;

void Steper_Init()
{
	for(u8_t i = 0 ; i< NUM_OF_COILS ;i++)
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	8f 5f       	subi	r24, 0xFF	; 255
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	84 30       	cpi	r24, 0x04	; 4
    1ca2:	18 f3       	brcs	.-58     	; 0x1c6a <Steper_Init+0xe>
    DIO_u8SetPinDirection(coils[i].port ,coils[i].pin ,OUTPUT );
}
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <Steper_StepCW>:
void Steper_StepCW()
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62


   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1cb6:	19 82       	std	Y+1, r1	; 0x01
    1cb8:	30 c0       	rjmp	.+96     	; 0x1d1a <Steper_StepCW+0x6e>
   {
	   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e8 59       	subi	r30, 0x98	; 152
    1cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cca:	40 81       	ld	r20, Z
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	e7 59       	subi	r30, 0x97	; 151
    1cda:	fe 4f       	sbci	r31, 0xFE	; 254
    1cdc:	50 81       	ld	r21, Z
    1cde:	80 91 a6 01 	lds	r24, 0x01A6
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	e0 59       	subi	r30, 0x90	; 144
    1cea:	fe 4f       	sbci	r31, 0xFE	; 254
    1cec:	80 81       	ld	r24, Z
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	b9 01       	movw	r22, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <Steper_StepCW+0x54>
    1cfc:	75 95       	asr	r23
    1cfe:	67 95       	ror	r22
    1d00:	8a 95       	dec	r24
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <Steper_StepCW+0x50>
    1d04:	cb 01       	movw	r24, r22
    1d06:	98 2f       	mov	r25, r24
    1d08:	91 70       	andi	r25, 0x01	; 1
    1d0a:	84 2f       	mov	r24, r20
    1d0c:	65 2f       	mov	r22, r21
    1d0e:	49 2f       	mov	r20, r25
    1d10:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
}
void Steper_StepCW()
{


   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	8f 5f       	subi	r24, 0xFF	; 255
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	68 f2       	brcs	.-102    	; 0x1cba <Steper_StepCW+0xe>
   {
	   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
   }
  Current_pattern++ ;
    1d20:	80 91 a6 01 	lds	r24, 0x01A6
    1d24:	8f 5f       	subi	r24, 0xFF	; 255
    1d26:	80 93 a6 01 	sts	0x01A6, r24
  if(Current_pattern>7) Current_pattern = 0 ;
    1d2a:	80 91 a6 01 	lds	r24, 0x01A6
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	10 f0       	brcs	.+4      	; 0x1d36 <Steper_StepCW+0x8a>
    1d32:	10 92 a6 01 	sts	0x01A6, r1
}
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <Steper_StepCCW>:
void Steper_StepCCW()
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62

	   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1d48:	19 82       	std	Y+1, r1	; 0x01
    1d4a:	30 c0       	rjmp	.+96     	; 0x1dac <Steper_StepCCW+0x6e>
	   {
		   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	fc 01       	movw	r30, r24
    1d58:	e8 59       	subi	r30, 0x98	; 152
    1d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5c:	40 81       	ld	r20, Z
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	fc 01       	movw	r30, r24
    1d6a:	e7 59       	subi	r30, 0x97	; 151
    1d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6e:	50 81       	ld	r21, Z
    1d70:	80 91 a6 01 	lds	r24, 0x01A6
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e0 59       	subi	r30, 0x90	; 144
    1d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7e:	80 81       	ld	r24, Z
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	b9 01       	movw	r22, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <Steper_StepCCW+0x54>
    1d8e:	75 95       	asr	r23
    1d90:	67 95       	ror	r22
    1d92:	8a 95       	dec	r24
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <Steper_StepCCW+0x50>
    1d96:	cb 01       	movw	r24, r22
    1d98:	98 2f       	mov	r25, r24
    1d9a:	91 70       	andi	r25, 0x01	; 1
    1d9c:	84 2f       	mov	r24, r20
    1d9e:	65 2f       	mov	r22, r21
    1da0:	49 2f       	mov	r20, r25
    1da2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
  if(Current_pattern>7) Current_pattern = 0 ;
}
void Steper_StepCCW()
{

	   for(u8_t i = 0 ;i<NUM_OF_COILS ;i++)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	84 30       	cpi	r24, 0x04	; 4
    1db0:	68 f2       	brcs	.-102    	; 0x1d4c <Steper_StepCCW+0xe>
	   {
		   DIO_u8SetPinValue(coils[i].port ,coils[i].pin ,GetBit(sequnce[Current_pattern],i));
	   }
	  Current_pattern++ ;
    1db2:	80 91 a6 01 	lds	r24, 0x01A6
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	80 93 a6 01 	sts	0x01A6, r24
	  if(Current_pattern >7) Current_pattern = 7 ;
    1dbc:	80 91 a6 01 	lds	r24, 0x01A6
    1dc0:	88 30       	cpi	r24, 0x08	; 8
    1dc2:	18 f0       	brcs	.+6      	; 0x1dca <Steper_StepCCW+0x8c>
    1dc4:	87 e0       	ldi	r24, 0x07	; 7
    1dc6:	80 93 a6 01 	sts	0x01A6, r24
}
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <SEG_voidInit>:
#include "SEG_config.h"
#include "SEG_interfac.h"
#include "SEG_private.h"

void SEG_voidInit(u8_t SEG_NUM)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	0f 92       	push	r0
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	89 83       	std	Y+1, r24	; 0x01

	switch(SEG_NUM)
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	91 05       	cpc	r25, r1
    1de8:	21 f4       	brne	.+8      	; 0x1df2 <SEG_voidInit+0x20>
	{
	case SEG1:
         DIO_u8SetPortDirection(SEG1_PORT ,OUTPUT);
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <DIO_u8SetPortDirection>
		break ;
	}

}
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <SEG_display>:

void SEG_display(u8_t SEG_NUM ,u8_t val)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <SEG_display+0x6>
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	6a 83       	std	Y+2, r22	; 0x02
	switch(SEG_NUM)
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	91 05       	cpc	r25, r1
    1e12:	59 f4       	brne	.+22     	; 0x1e2a <SEG_display+0x30>
	{
	case SEG1:
	  DIO_u8SetPortValue(SEG1_PORT ,seg[val]);
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	e8 56       	subi	r30, 0x68	; 104
    1e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e20:	90 81       	ld	r25, Z
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	69 2f       	mov	r22, r25
    1e26:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <DIO_u8SetPortValue>
	  break ;
	}
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <SEG_VoidClear>:
void SEG_VoidClear(u8_t SEG_NUM)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	0f 92       	push	r0
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(SEG1_PORT , HSEG_PING ,LOW);
	DIO_u8SetPinValue(SEG1_PORT , HSEG_PINH ,LOW);
	break ;
	}

}
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <PWM_Init>:
#include "PWM_interface.h"
#include "PWM_private.h"


void PWM_Init()
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	  DIO_u8SetPinDirection(PORTD, PIN5 , OUTPUT);
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	65 e0       	ldi	r22, 0x05	; 5
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	  TIM1_InitPWM();
    1e5a:	0e 94 99 07 	call	0xf32	; 0xf32 <TIM1_InitPWM>
	  TIM1_PWMSetMode(PWM_CHAAMEL , PWM_NON_INVERTING);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	62 e0       	ldi	r22, 0x02	; 2
    1e62:	0e 94 66 08 	call	0x10cc	; 0x10cc <TIM1_PWMSetMode>
	  TIM1_SetPeriod(PWM_PERIOD);
    1e66:	88 ee       	ldi	r24, 0xE8	; 232
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <TIM1_SetPeriod>
	  TIM1_StartPWM();
    1e6e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <TIM1_StartPWM>
}
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <PWM_GeneratePulls>:
void PWM_GeneratePulls(u8_t presange)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <PWM_GeneratePulls+0x6>
    1e7e:	0f 92       	push	r0
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	8b 83       	std	Y+3, r24	; 0x03

   u16_t T_on = (presange*(PWM_PERIOD/100));
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 01       	movw	r18, r24
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	c9 01       	movw	r24, r18
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	82 0f       	add	r24, r18
    1e9e:	93 1f       	adc	r25, r19
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
   TIM1_T_ON(PWM_CHAAMEL ,T_on);
    1ea4:	29 81       	ldd	r18, Y+1	; 0x01
    1ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	b9 01       	movw	r22, r18
    1eac:	0e 94 b8 08 	call	0x1170	; 0x1170 <TIM1_T_ON>
}
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <LM35_Init>:
#include "../../LIB/Bit_Math.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/ADC/ADC_interface.h"

void LM35_Init()
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTA , PIN1 ,INPUT);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
    ADC_Selectchannel(ADC_CH_CH0);
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <ADC_Selectchannel>
	ADC_Init();
    1ed4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <ADC_Init>
}
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <LM35_GetTemp>:

u32_t LM35_GetTemp(void)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <LM35_GetTemp+0x6>
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <LM35_GetTemp+0x8>
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62

  u32_t res = ADC_StartConversion();
    1eea:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <ADC_StartConversion>
    1eee:	cc 01       	movw	r24, r24
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	ab 83       	std	Y+3, r26	; 0x03
    1efa:	bc 83       	std	Y+4, r27	; 0x04

  res = res *(5.0/1024.0)*100 ;
    1efc:	69 81       	ldd	r22, Y+1	; 0x01
    1efe:	7a 81       	ldd	r23, Y+2	; 0x02
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 ea       	ldi	r20, 0xA0	; 160
    1f16:	5b e3       	ldi	r21, 0x3B	; 59
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	48 ec       	ldi	r20, 0xC8	; 200
    1f2a:	52 e4       	ldi	r21, 0x42	; 66
    1f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	ab 83       	std	Y+3, r26	; 0x03
    1f46:	bc 83       	std	Y+4, r27	; 0x04
  return res ;
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f4e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <LED_voidInit>:

#include "LED_interface.h"
#include "LED_private.h"

void LED_voidInit(u8_t L_u8led)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <LED_voidInit+0x6>
    1f68:	0f 92       	push	r0
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3b 83       	std	Y+3, r19	; 0x03
    1f78:	2a 83       	std	Y+2, r18	; 0x02
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	82 30       	cpi	r24, 0x02	; 2
    1f80:	91 05       	cpc	r25, r1
    1f82:	31 f1       	breq	.+76     	; 0x1fd0 <LED_voidInit+0x6e>
    1f84:	2a 81       	ldd	r18, Y+2	; 0x02
    1f86:	3b 81       	ldd	r19, Y+3	; 0x03
    1f88:	23 30       	cpi	r18, 0x03	; 3
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	54 f4       	brge	.+20     	; 0x1fa2 <LED_voidInit+0x40>
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	89 f0       	breq	.+34     	; 0x1fb8 <LED_voidInit+0x56>
    1f96:	2a 81       	ldd	r18, Y+2	; 0x02
    1f98:	3b 81       	ldd	r19, Y+3	; 0x03
    1f9a:	21 30       	cpi	r18, 0x01	; 1
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	91 f0       	breq	.+36     	; 0x1fc4 <LED_voidInit+0x62>
    1fa0:	28 c0       	rjmp	.+80     	; 0x1ff2 <LED_voidInit+0x90>
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	91 05       	cpc	r25, r1
    1faa:	c1 f0       	breq	.+48     	; 0x1fdc <LED_voidInit+0x7a>
    1fac:	2a 81       	ldd	r18, Y+2	; 0x02
    1fae:	3b 81       	ldd	r19, Y+3	; 0x03
    1fb0:	24 30       	cpi	r18, 0x04	; 4
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	c9 f0       	breq	.+50     	; 0x1fe8 <LED_voidInit+0x86>
    1fb6:	1d c0       	rjmp	.+58     	; 0x1ff2 <LED_voidInit+0x90>
	{
	case LED1 :DIO_u8SetPinDirection(LED1_PORT, LED1_PIN, OUTPUT); break ;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
    1fc2:	17 c0       	rjmp	.+46     	; 0x1ff2 <LED_voidInit+0x90>
	case LED2 :DIO_u8SetPinDirection(LED2_PORT, LED2_PIN, OUTPUT); break ;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
    1fce:	11 c0       	rjmp	.+34     	; 0x1ff2 <LED_voidInit+0x90>
	case LED3 :DIO_u8SetPinDirection(LED3_PORT, LED3_PIN, OUTPUT); break ;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	62 e0       	ldi	r22, 0x02	; 2
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
    1fda:	0b c0       	rjmp	.+22     	; 0x1ff2 <LED_voidInit+0x90>
	case LED4 :DIO_u8SetPinDirection(LED4_PORT, LED4_PIN, OUTPUT); break ;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	63 e0       	ldi	r22, 0x03	; 3
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
    1fe6:	05 c0       	rjmp	.+10     	; 0x1ff2 <LED_voidInit+0x90>
	case LED5 :DIO_u8SetPinDirection(LED5_PORT, LED5_PIN, OUTPUT); break ;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	}
}
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <LED_voidSetLEDHigh>:
void LED_voidSetLEDHigh(u8_t L_u8led)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <LED_voidSetLEDHigh+0x6>
    2004:	0f 92       	push	r0
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	3b 83       	std	Y+3, r19	; 0x03
    2014:	2a 83       	std	Y+2, r18	; 0x02
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	91 05       	cpc	r25, r1
    201e:	31 f1       	breq	.+76     	; 0x206c <LED_voidSetLEDHigh+0x6e>
    2020:	2a 81       	ldd	r18, Y+2	; 0x02
    2022:	3b 81       	ldd	r19, Y+3	; 0x03
    2024:	23 30       	cpi	r18, 0x03	; 3
    2026:	31 05       	cpc	r19, r1
    2028:	54 f4       	brge	.+20     	; 0x203e <LED_voidSetLEDHigh+0x40>
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	9b 81       	ldd	r25, Y+3	; 0x03
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	89 f0       	breq	.+34     	; 0x2054 <LED_voidSetLEDHigh+0x56>
    2032:	2a 81       	ldd	r18, Y+2	; 0x02
    2034:	3b 81       	ldd	r19, Y+3	; 0x03
    2036:	21 30       	cpi	r18, 0x01	; 1
    2038:	31 05       	cpc	r19, r1
    203a:	91 f0       	breq	.+36     	; 0x2060 <LED_voidSetLEDHigh+0x62>
    203c:	28 c0       	rjmp	.+80     	; 0x208e <LED_voidSetLEDHigh+0x90>
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	83 30       	cpi	r24, 0x03	; 3
    2044:	91 05       	cpc	r25, r1
    2046:	c1 f0       	breq	.+48     	; 0x2078 <LED_voidSetLEDHigh+0x7a>
    2048:	2a 81       	ldd	r18, Y+2	; 0x02
    204a:	3b 81       	ldd	r19, Y+3	; 0x03
    204c:	24 30       	cpi	r18, 0x04	; 4
    204e:	31 05       	cpc	r19, r1
    2050:	c9 f0       	breq	.+50     	; 0x2084 <LED_voidSetLEDHigh+0x86>
    2052:	1d c0       	rjmp	.+58     	; 0x208e <LED_voidSetLEDHigh+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, HIGH); break;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    205e:	17 c0       	rjmp	.+46     	; 0x208e <LED_voidSetLEDHigh+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, HIGH); break;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	61 e0       	ldi	r22, 0x01	; 1
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    206a:	11 c0       	rjmp	.+34     	; 0x208e <LED_voidSetLEDHigh+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, HIGH); break;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	62 e0       	ldi	r22, 0x02	; 2
    2070:	41 e0       	ldi	r20, 0x01	; 1
    2072:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    2076:	0b c0       	rjmp	.+22     	; 0x208e <LED_voidSetLEDHigh+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, HIGH); break;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	63 e0       	ldi	r22, 0x03	; 3
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    2082:	05 c0       	rjmp	.+10     	; 0x208e <LED_voidSetLEDHigh+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, HIGH); break;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	64 e0       	ldi	r22, 0x04	; 4
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
	}
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <LED_voidSetLEDLow>:
void LED_voidSetLEDLow(u8_t L_u8led)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <LED_voidSetLEDLow+0x6>
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	3b 83       	std	Y+3, r19	; 0x03
    20b0:	2a 83       	std	Y+2, r18	; 0x02
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	9b 81       	ldd	r25, Y+3	; 0x03
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	91 05       	cpc	r25, r1
    20ba:	31 f1       	breq	.+76     	; 0x2108 <LED_voidSetLEDLow+0x6e>
    20bc:	2a 81       	ldd	r18, Y+2	; 0x02
    20be:	3b 81       	ldd	r19, Y+3	; 0x03
    20c0:	23 30       	cpi	r18, 0x03	; 3
    20c2:	31 05       	cpc	r19, r1
    20c4:	54 f4       	brge	.+20     	; 0x20da <LED_voidSetLEDLow+0x40>
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	89 f0       	breq	.+34     	; 0x20f0 <LED_voidSetLEDLow+0x56>
    20ce:	2a 81       	ldd	r18, Y+2	; 0x02
    20d0:	3b 81       	ldd	r19, Y+3	; 0x03
    20d2:	21 30       	cpi	r18, 0x01	; 1
    20d4:	31 05       	cpc	r19, r1
    20d6:	91 f0       	breq	.+36     	; 0x20fc <LED_voidSetLEDLow+0x62>
    20d8:	28 c0       	rjmp	.+80     	; 0x212a <LED_voidSetLEDLow+0x90>
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	9b 81       	ldd	r25, Y+3	; 0x03
    20de:	83 30       	cpi	r24, 0x03	; 3
    20e0:	91 05       	cpc	r25, r1
    20e2:	c1 f0       	breq	.+48     	; 0x2114 <LED_voidSetLEDLow+0x7a>
    20e4:	2a 81       	ldd	r18, Y+2	; 0x02
    20e6:	3b 81       	ldd	r19, Y+3	; 0x03
    20e8:	24 30       	cpi	r18, 0x04	; 4
    20ea:	31 05       	cpc	r19, r1
    20ec:	c9 f0       	breq	.+50     	; 0x2120 <LED_voidSetLEDLow+0x86>
    20ee:	1d c0       	rjmp	.+58     	; 0x212a <LED_voidSetLEDLow+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, LOW); break;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    20fa:	17 c0       	rjmp	.+46     	; 0x212a <LED_voidSetLEDLow+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, LOW); break;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    2106:	11 c0       	rjmp	.+34     	; 0x212a <LED_voidSetLEDLow+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, LOW); break;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	62 e0       	ldi	r22, 0x02	; 2
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    2112:	0b c0       	rjmp	.+22     	; 0x212a <LED_voidSetLEDLow+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, LOW); break;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	63 e0       	ldi	r22, 0x03	; 3
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    211e:	05 c0       	rjmp	.+10     	; 0x212a <LED_voidSetLEDLow+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, LOW); break;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	64 e0       	ldi	r22, 0x04	; 4
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
	}
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <HLCD_voidinit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include <util/delay.h>

void HLCD_voidinit()
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	aa 97       	sbiw	r28, 0x2a	; 42
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_DATA_PORT ,OUTPUT);
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RS_PIN ,OUTPUT);
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RW_PIN ,OUTPUT);
    215c:	82 e0       	ldi	r24, 0x02	; 2
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_E_PIN ,OUTPUT);
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	62 e0       	ldi	r22, 0x02	; 2
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	a0 ef       	ldi	r26, 0xF0	; 240
    2176:	b1 e4       	ldi	r27, 0x41	; 65
    2178:	8f a3       	std	Y+39, r24	; 0x27
    217a:	98 a7       	std	Y+40, r25	; 0x28
    217c:	a9 a7       	std	Y+41, r26	; 0x29
    217e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	6f a1       	ldd	r22, Y+39	; 0x27
    2182:	78 a5       	ldd	r23, Y+40	; 0x28
    2184:	89 a5       	ldd	r24, Y+41	; 0x29
    2186:	9a a5       	ldd	r25, Y+42	; 0x2a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a ef       	ldi	r20, 0xFA	; 250
    218e:	54 e4       	ldi	r21, 0x44	; 68
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8b a3       	std	Y+35, r24	; 0x23
    219a:	9c a3       	std	Y+36, r25	; 0x24
    219c:	ad a3       	std	Y+37, r26	; 0x25
    219e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21a0:	6b a1       	ldd	r22, Y+35	; 0x23
    21a2:	7c a1       	ldd	r23, Y+36	; 0x24
    21a4:	8d a1       	ldd	r24, Y+37	; 0x25
    21a6:	9e a1       	ldd	r25, Y+38	; 0x26
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <HLCD_voidinit+0x8c>
		__ticks = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9a a3       	std	Y+34, r25	; 0x22
    21be:	89 a3       	std	Y+33, r24	; 0x21
    21c0:	3f c0       	rjmp	.+126    	; 0x2240 <HLCD_voidinit+0x10a>
	else if (__tmp > 65535)
    21c2:	6b a1       	ldd	r22, Y+35	; 0x23
    21c4:	7c a1       	ldd	r23, Y+36	; 0x24
    21c6:	8d a1       	ldd	r24, Y+37	; 0x25
    21c8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	57 e4       	ldi	r21, 0x47	; 71
    21d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d6:	18 16       	cp	r1, r24
    21d8:	4c f5       	brge	.+82     	; 0x222c <HLCD_voidinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21da:	6f a1       	ldd	r22, Y+39	; 0x27
    21dc:	78 a5       	ldd	r23, Y+40	; 0x28
    21de:	89 a5       	ldd	r24, Y+41	; 0x29
    21e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9a a3       	std	Y+34, r25	; 0x22
    2200:	89 a3       	std	Y+33, r24	; 0x21
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <HLCD_voidinit+0xec>
    2204:	88 ec       	ldi	r24, 0xC8	; 200
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	98 a3       	std	Y+32, r25	; 0x20
    220a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    220c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    220e:	98 a1       	ldd	r25, Y+32	; 0x20
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <HLCD_voidinit+0xda>
    2214:	98 a3       	std	Y+32, r25	; 0x20
    2216:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	89 a1       	ldd	r24, Y+33	; 0x21
    221a:	9a a1       	ldd	r25, Y+34	; 0x22
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9a a3       	std	Y+34, r25	; 0x22
    2220:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2222:	89 a1       	ldd	r24, Y+33	; 0x21
    2224:	9a a1       	ldd	r25, Y+34	; 0x22
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	69 f7       	brne	.-38     	; 0x2204 <HLCD_voidinit+0xce>
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <HLCD_voidinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222c:	6b a1       	ldd	r22, Y+35	; 0x23
    222e:	7c a1       	ldd	r23, Y+36	; 0x24
    2230:	8d a1       	ldd	r24, Y+37	; 0x25
    2232:	9e a1       	ldd	r25, Y+38	; 0x26
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9a a3       	std	Y+34, r25	; 0x22
    223e:	89 a3       	std	Y+33, r24	; 0x21
    2240:	89 a1       	ldd	r24, Y+33	; 0x21
    2242:	9a a1       	ldd	r25, Y+34	; 0x22
    2244:	9e 8f       	std	Y+30, r25	; 0x1e
    2246:	8d 8f       	std	Y+29, r24	; 0x1d
    2248:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <HLCD_voidinit+0x116>
    2250:	9e 8f       	std	Y+30, r25	; 0x1e
    2252:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);
	HLCD_voidCommand(LCD_Function_set1);
    2254:	88 e3       	ldi	r24, 0x38	; 56
    2256:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidCommand>
	//_delay_ms(1);
	HLCD_voidCommand(LCD_Display_Mode2);
    225a:	8d e0       	ldi	r24, 0x0D	; 13
    225c:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidCommand>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e8       	ldi	r26, 0x80	; 128
    2266:	bf e3       	ldi	r27, 0x3F	; 63
    2268:	89 8f       	std	Y+25, r24	; 0x19
    226a:	9a 8f       	std	Y+26, r25	; 0x1a
    226c:	ab 8f       	std	Y+27, r26	; 0x1b
    226e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	69 8d       	ldd	r22, Y+25	; 0x19
    2272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4a ef       	ldi	r20, 0xFA	; 250
    227e:	54 e4       	ldi	r21, 0x44	; 68
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8d 8b       	std	Y+21, r24	; 0x15
    228a:	9e 8b       	std	Y+22, r25	; 0x16
    228c:	af 8b       	std	Y+23, r26	; 0x17
    228e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <HLCD_voidinit+0x17c>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
    22b0:	3f c0       	rjmp	.+126    	; 0x2330 <HLCD_voidinit+0x1fa>
	else if (__tmp > 65535)
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	4c f5       	brge	.+82     	; 0x231c <HLCD_voidinit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	69 8d       	ldd	r22, Y+25	; 0x19
    22cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <HLCD_voidinit+0x1dc>
    22f4:	88 ec       	ldi	r24, 0xC8	; 200
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9a 8b       	std	Y+18, r25	; 0x12
    22fa:	89 8b       	std	Y+17, r24	; 0x11
    22fc:	89 89       	ldd	r24, Y+17	; 0x11
    22fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <HLCD_voidinit+0x1ca>
    2304:	9a 8b       	std	Y+18, r25	; 0x12
    2306:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	8b 89       	ldd	r24, Y+19	; 0x13
    2314:	9c 89       	ldd	r25, Y+20	; 0x14
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	69 f7       	brne	.-38     	; 0x22f4 <HLCD_voidinit+0x1be>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <HLCD_voidinit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	6d 89       	ldd	r22, Y+21	; 0x15
    231e:	7e 89       	ldd	r23, Y+22	; 0x16
    2320:	8f 89       	ldd	r24, Y+23	; 0x17
    2322:	98 8d       	ldd	r25, Y+24	; 0x18
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9c 8b       	std	Y+20, r25	; 0x14
    232e:	8b 8b       	std	Y+19, r24	; 0x13
    2330:	8b 89       	ldd	r24, Y+19	; 0x13
    2332:	9c 89       	ldd	r25, Y+20	; 0x14
    2334:	98 8b       	std	Y+16, r25	; 0x10
    2336:	8f 87       	std	Y+15, r24	; 0x0f
    2338:	8f 85       	ldd	r24, Y+15	; 0x0f
    233a:	98 89       	ldd	r25, Y+16	; 0x10
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <HLCD_voidinit+0x206>
    2340:	98 8b       	std	Y+16, r25	; 0x10
    2342:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_voidCommand(LCD_Clear_Screen);
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidCommand>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e0       	ldi	r26, 0x00	; 0
    2350:	b0 e4       	ldi	r27, 0x40	; 64
    2352:	8b 87       	std	Y+11, r24	; 0x0b
    2354:	9c 87       	std	Y+12, r25	; 0x0c
    2356:	ad 87       	std	Y+13, r26	; 0x0d
    2358:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2360:	9e 85       	ldd	r25, Y+14	; 0x0e
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a ef       	ldi	r20, 0xFA	; 250
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8f 83       	std	Y+7, r24	; 0x07
    2374:	98 87       	std	Y+8, r25	; 0x08
    2376:	a9 87       	std	Y+9, r26	; 0x09
    2378:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237a:	6f 81       	ldd	r22, Y+7	; 0x07
    237c:	78 85       	ldd	r23, Y+8	; 0x08
    237e:	89 85       	ldd	r24, Y+9	; 0x09
    2380:	9a 85       	ldd	r25, Y+10	; 0x0a
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <HLCD_voidinit+0x266>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	3f c0       	rjmp	.+126    	; 0x241a <HLCD_voidinit+0x2e4>
	else if (__tmp > 65535)
    239c:	6f 81       	ldd	r22, Y+7	; 0x07
    239e:	78 85       	ldd	r23, Y+8	; 0x08
    23a0:	89 85       	ldd	r24, Y+9	; 0x09
    23a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <HLCD_voidinit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <HLCD_voidinit+0x2c6>
    23de:	88 ec       	ldi	r24, 0xC8	; 200
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	8b 83       	std	Y+3, r24	; 0x03
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <HLCD_voidinit+0x2b4>
    23ee:	9c 83       	std	Y+4, r25	; 0x04
    23f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <HLCD_voidinit+0x2a8>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <HLCD_voidinit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	6f 81       	ldd	r22, Y+7	; 0x07
    2408:	78 85       	ldd	r23, Y+8	; 0x08
    240a:	89 85       	ldd	r24, Y+9	; 0x09
    240c:	9a 85       	ldd	r25, Y+10	; 0x0a
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <HLCD_voidinit+0x2f0>
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidCommand(LCD_Entry_Mode1);
    242e:	86 e0       	ldi	r24, 0x06	; 6
    2430:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidCommand>

    HLCD_voidCommand(LCD_DISP_ON_CURSOR);
    2434:	8e e0       	ldi	r24, 0x0E	; 14
    2436:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidCommand>
    HLCD_voidCommand(LCD_DISP_ON);
    243a:	8c e0       	ldi	r24, 0x0C	; 12
    243c:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidCommand>
}
    2440:	aa 96       	adiw	r28, 0x2a	; 42
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <HLCD_voidCommand>:

void HLCD_voidCommand(u8_t command)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	0f 92       	push	r0
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,LOW );
    245e:	82 e0       	ldi	r24, 0x02	; 2
    2460:	60 e0       	ldi	r22, 0x00	; 0
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW );
    2468:	82 e0       	ldi	r24, 0x02	; 2
    246a:	61 e0       	ldi	r22, 0x01	; 1
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT ,command );
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	69 81       	ldd	r22, Y+1	; 0x01
    2476:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    247a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <HLCD_voidSendPulse>
}
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <HLCD_voidSetDDRAM_Address>:
void HLCD_voidSetDDRAM_Address(u8_t address)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	0f 92       	push	r0
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	89 83       	std	Y+1, r24	; 0x01
	SetBit(address,7);
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	80 68       	ori	r24, 0x80	; 128
    2496:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidCommand(address);
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidCommand>
}
    249e:	0f 90       	pop	r0
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <HLCD_voidSendPulse>:

void static HLCD_voidSendPulse(void)
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	6c 97       	sbiw	r28, 0x1c	; 28
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,HIGH);
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	62 e0       	ldi	r22, 0x02	; 2
    24be:	41 e0       	ldi	r20, 0x01	; 1
    24c0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e8       	ldi	r26, 0x80	; 128
    24ca:	bf e3       	ldi	r27, 0x3F	; 63
    24cc:	89 8f       	std	Y+25, r24	; 0x19
    24ce:	9a 8f       	std	Y+26, r25	; 0x1a
    24d0:	ab 8f       	std	Y+27, r26	; 0x1b
    24d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	69 8d       	ldd	r22, Y+25	; 0x19
    24d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a ef       	ldi	r20, 0xFA	; 250
    24e2:	54 e4       	ldi	r21, 0x44	; 68
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8d 8b       	std	Y+21, r24	; 0x15
    24ee:	9e 8b       	std	Y+22, r25	; 0x16
    24f0:	af 8b       	std	Y+23, r26	; 0x17
    24f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f4:	6d 89       	ldd	r22, Y+21	; 0x15
    24f6:	7e 89       	ldd	r23, Y+22	; 0x16
    24f8:	8f 89       	ldd	r24, Y+23	; 0x17
    24fa:	98 8d       	ldd	r25, Y+24	; 0x18
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <HLCD_voidSendPulse+0x70>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9c 8b       	std	Y+20, r25	; 0x14
    2512:	8b 8b       	std	Y+19, r24	; 0x13
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <HLCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    2516:	6d 89       	ldd	r22, Y+21	; 0x15
    2518:	7e 89       	ldd	r23, Y+22	; 0x16
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <HLCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	69 8d       	ldd	r22, Y+25	; 0x19
    2530:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <HLCD_voidSendPulse+0xd0>
    2558:	88 ec       	ldi	r24, 0xC8	; 200
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9a 8b       	std	Y+18, r25	; 0x12
    255e:	89 8b       	std	Y+17, r24	; 0x11
    2560:	89 89       	ldd	r24, Y+17	; 0x11
    2562:	9a 89       	ldd	r25, Y+18	; 0x12
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <HLCD_voidSendPulse+0xbe>
    2568:	9a 8b       	std	Y+18, r25	; 0x12
    256a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8b 89       	ldd	r24, Y+19	; 0x13
    256e:	9c 89       	ldd	r25, Y+20	; 0x14
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9c 8b       	std	Y+20, r25	; 0x14
    2574:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8b 89       	ldd	r24, Y+19	; 0x13
    2578:	9c 89       	ldd	r25, Y+20	; 0x14
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <HLCD_voidSendPulse+0xb2>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <HLCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6d 89       	ldd	r22, Y+21	; 0x15
    2582:	7e 89       	ldd	r23, Y+22	; 0x16
    2584:	8f 89       	ldd	r24, Y+23	; 0x17
    2586:	98 8d       	ldd	r25, Y+24	; 0x18
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9c 8b       	std	Y+20, r25	; 0x14
    2592:	8b 8b       	std	Y+19, r24	; 0x13
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	98 8b       	std	Y+16, r25	; 0x10
    259a:	8f 87       	std	Y+15, r24	; 0x0f
    259c:	8f 85       	ldd	r24, Y+15	; 0x0f
    259e:	98 89       	ldd	r25, Y+16	; 0x10
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <HLCD_voidSendPulse+0xfa>
    25a4:	98 8b       	std	Y+16, r25	; 0x10
    25a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,LOW);
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	62 e0       	ldi	r22, 0x02	; 2
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a0 e8       	ldi	r26, 0x80	; 128
    25b8:	bf e3       	ldi	r27, 0x3F	; 63
    25ba:	8b 87       	std	Y+11, r24	; 0x0b
    25bc:	9c 87       	std	Y+12, r25	; 0x0c
    25be:	ad 87       	std	Y+13, r26	; 0x0d
    25c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4a ef       	ldi	r20, 0xFA	; 250
    25d0:	54 e4       	ldi	r21, 0x44	; 68
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8f 83       	std	Y+7, r24	; 0x07
    25dc:	98 87       	std	Y+8, r25	; 0x08
    25de:	a9 87       	std	Y+9, r26	; 0x09
    25e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e2:	6f 81       	ldd	r22, Y+7	; 0x07
    25e4:	78 85       	ldd	r23, Y+8	; 0x08
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	2c f4       	brge	.+10     	; 0x2604 <HLCD_voidSendPulse+0x15e>
		__ticks = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
    2602:	3f c0       	rjmp	.+126    	; 0x2682 <HLCD_voidSendPulse+0x1dc>
	else if (__tmp > 65535)
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	57 e4       	ldi	r21, 0x47	; 71
    2614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	4c f5       	brge	.+82     	; 0x266e <HLCD_voidSendPulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	6b 85       	ldd	r22, Y+11	; 0x0b
    261e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2620:	8d 85       	ldd	r24, Y+13	; 0x0d
    2622:	9e 85       	ldd	r25, Y+14	; 0x0e
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <HLCD_voidSendPulse+0x1be>
    2646:	88 ec       	ldi	r24, 0xC8	; 200
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <HLCD_voidSendPulse+0x1ac>
    2656:	9c 83       	std	Y+4, r25	; 0x04
    2658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	69 f7       	brne	.-38     	; 0x2646 <HLCD_voidSendPulse+0x1a0>
    266c:	14 c0       	rjmp	.+40     	; 0x2696 <HLCD_voidSendPulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266e:	6f 81       	ldd	r22, Y+7	; 0x07
    2670:	78 85       	ldd	r23, Y+8	; 0x08
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	9a 85       	ldd	r25, Y+10	; 0x0a
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <HLCD_voidSendPulse+0x1e8>
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2696:	6c 96       	adiw	r28, 0x1c	; 28
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <HLCD_SendData>:

void HLCD_SendData(u8_t data)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,HIGH);
    26b4:	82 e0       	ldi	r24, 0x02	; 2
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW);
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	61 e0       	ldi	r22, 0x01	; 1
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_DATA_PORT ,data);
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	69 81       	ldd	r22, Y+1	; 0x01
    26cc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    26d0:	0e 94 53 12 	call	0x24a6	; 0x24a6 <HLCD_voidSendPulse>
}
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <HLCD_PrintString>:

void HLCD_PrintString(u8_t *string)
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <HLCD_PrintString+0x6>
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <HLCD_PrintString+0x8>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    26ec:	1a 82       	std	Y+2, r1	; 0x02
    26ee:	19 82       	std	Y+1, r1	; 0x01
    26f0:	26 c0       	rjmp	.+76     	; 0x273e <HLCD_PrintString+0x62>
	while (*string > 0) {
		count++;
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
		HLCD_SendData(*string++);
    26fc:	eb 81       	ldd	r30, Y+3	; 0x03
    26fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2700:	20 81       	ld	r18, Z
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	9c 83       	std	Y+4, r25	; 0x04
    270a:	8b 83       	std	Y+3, r24	; 0x03
    270c:	82 2f       	mov	r24, r18
    270e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <HLCD_SendData>
		if (count == 16) {
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	80 31       	cpi	r24, 0x10	; 16
    2718:	91 05       	cpc	r25, r1
    271a:	21 f4       	brne	.+8      	; 0x2724 <HLCD_PrintString+0x48>
			HLCD_voidSetDDRAM_Address(0x40);
    271c:	80 e4       	ldi	r24, 0x40	; 64
    271e:	0e 94 43 12 	call	0x2486	; 0x2486 <HLCD_voidSetDDRAM_Address>
    2722:	0d c0       	rjmp	.+26     	; 0x273e <HLCD_PrintString+0x62>
		} else if (count == 32) {
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	80 32       	cpi	r24, 0x20	; 32
    272a:	91 05       	cpc	r25, r1
    272c:	41 f4       	brne	.+16     	; 0x273e <HLCD_PrintString+0x62>
			HLCD_voidCommand(LCD_Clear_Screen);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidCommand>
			HLCD_voidSetDDRAM_Address(0);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	0e 94 43 12 	call	0x2486	; 0x2486 <HLCD_voidSetDDRAM_Address>
			count = 0;
    273a:	1a 82       	std	Y+2, r1	; 0x02
    273c:	19 82       	std	Y+1, r1	; 0x01
}

void HLCD_PrintString(u8_t *string)
{
	int count = 0;
	while (*string > 0) {
    273e:	eb 81       	ldd	r30, Y+3	; 0x03
    2740:	fc 81       	ldd	r31, Y+4	; 0x04
    2742:	80 81       	ld	r24, Z
    2744:	88 23       	and	r24, r24
    2746:	a9 f6       	brne	.-86     	; 0x26f2 <HLCD_PrintString+0x16>
			HLCD_voidCommand(LCD_Clear_Screen);
			HLCD_voidSetDDRAM_Address(0);
			count = 0;
		}
	}
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <LCD_display_number>:

void LCD_display_number(int number)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	27 97       	sbiw	r28, 0x07	; 7
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
    276a:	9f 83       	std	Y+7, r25	; 0x07
    276c:	8e 83       	std	Y+6, r24	; 0x06
	char str[5];

	itoa(number , str ,10);
    276e:	8e 81       	ldd	r24, Y+6	; 0x06
    2770:	9f 81       	ldd	r25, Y+7	; 0x07
    2772:	9e 01       	movw	r18, r28
    2774:	2f 5f       	subi	r18, 0xFF	; 255
    2776:	3f 4f       	sbci	r19, 0xFF	; 255
    2778:	b9 01       	movw	r22, r18
    277a:	4a e0       	ldi	r20, 0x0A	; 10
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <itoa>
	HLCD_PrintString(str);
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	0e 94 6e 13 	call	0x26dc	; 0x26dc <HLCD_PrintString>
}
    278a:	27 96       	adiw	r28, 0x07	; 7
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <HLCD_GOTO_XY>:

void HLCD_GOTO_XY(u8_t line, u8_t position) {
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <HLCD_GOTO_XY+0x6>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1) {
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	39 f4       	brne	.+14     	; 0x27be <HLCD_GOTO_XY+0x22>
		if (position < 16 && position >= 0) {
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	80 31       	cpi	r24, 0x10	; 16
    27b4:	20 f4       	brcc	.+8      	; 0x27be <HLCD_GOTO_XY+0x22>
			HLCD_voidSetDDRAM_Address(LCD_FIRST_ROW + position-1);
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	81 58       	subi	r24, 0x81	; 129
    27ba:	0e 94 43 12 	call	0x2486	; 0x2486 <HLCD_voidSetDDRAM_Address>
		}
	}
	if (line == 2) {
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	82 30       	cpi	r24, 0x02	; 2
    27c2:	39 f4       	brne	.+14     	; 0x27d2 <HLCD_GOTO_XY+0x36>
		if (position < 16 && position >= 0) {
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	80 31       	cpi	r24, 0x10	; 16
    27c8:	20 f4       	brcc	.+8      	; 0x27d2 <HLCD_GOTO_XY+0x36>
			HLCD_voidSetDDRAM_Address(LCD_SECOND_ROW + position -1);
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	81 54       	subi	r24, 0x41	; 65
    27ce:	0e 94 43 12 	call	0x2486	; 0x2486 <HLCD_voidSetDDRAM_Address>
		}
	}
}
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <Keypad_init>:
#include "KeyPade_interface.h"
#include "KeyPade_private.h"


void Keypad_init()
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(KeyPade_PORT , R1 ,INPUT);
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	60 e0       	ldi	r22, 0x00	; 0
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R1 ,HIGH);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R2 ,INPUT);
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R2 ,HIGH);
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	61 e0       	ldi	r22, 0x01	; 1
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R3 ,INPUT);
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	62 e0       	ldi	r22, 0x02	; 2
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R3 ,HIGH);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	62 e0       	ldi	r22, 0x02	; 2
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R4 ,INPUT);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	63 e0       	ldi	r22, 0x03	; 3
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R4 ,HIGH);
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	63 e0       	ldi	r22, 0x03	; 3
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , C1 ,OUTPUT);
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	64 e0       	ldi	r22, 0x04	; 4
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C2 ,OUTPUT);
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	65 e0       	ldi	r22, 0x05	; 5
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C3 ,OUTPUT);
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	66 e0       	ldi	r22, 0x06	; 6
    284c:	41 e0       	ldi	r20, 0x01	; 1
    284e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C4 ,OUTPUT);
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	67 e0       	ldi	r22, 0x07	; 7
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>


}
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <Keypad_getkey>:

u8_t Keypad_getkey(void)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	00 d0       	rcall	.+0      	; 0x2868 <Keypad_getkey+0x6>
    2868:	0f 92       	push	r0
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
	for(u8_t COL = 0 ; COL<4 ;COL++)
    286e:	1a 82       	std	Y+2, r1	; 0x02
    2870:	60 c0       	rjmp	.+192    	; 0x2932 <Keypad_getkey+0xd0>
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	fc 01       	movw	r30, r24
    287e:	e0 58       	subi	r30, 0x80	; 128
    2880:	fe 4f       	sbci	r31, 0xFE	; 254
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	98 2f       	mov	r25, r24
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	69 2f       	mov	r22, r25
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>

		for(u8_t ROW = 0 ; ROW<4 ;ROW++)
    2892:	19 82       	std	Y+1, r1	; 0x01
    2894:	38 c0       	rjmp	.+112    	; 0x2906 <Keypad_getkey+0xa4>
		{
			if(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0)
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	fc 01       	movw	r30, r24
    28a2:	e8 58       	subi	r30, 0x88	; 136
    28a4:	fe 4f       	sbci	r31, 0xFE	; 254
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	98 2f       	mov	r25, r24
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	69 2f       	mov	r22, r25
    28b0:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8GetBit>
    28b4:	88 23       	and	r24, r24
    28b6:	21 f5       	brne	.+72     	; 0x2900 <Keypad_getkey+0x9e>
			{
				while(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0);
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	fc 01       	movw	r30, r24
    28c4:	e8 58       	subi	r30, 0x88	; 136
    28c6:	fe 4f       	sbci	r31, 0xFE	; 254
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	98 2f       	mov	r25, r24
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	69 2f       	mov	r22, r25
    28d2:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8GetBit>
    28d6:	88 23       	and	r24, r24
    28d8:	79 f3       	breq	.-34     	; 0x28b8 <Keypad_getkey+0x56>
				return digit[ROW][COL] ;
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	48 2f       	mov	r20, r24
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	ca 01       	movw	r24, r20
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	82 0f       	add	r24, r18
    28f2:	93 1f       	adc	r25, r19
    28f4:	fc 01       	movw	r30, r24
    28f6:	e8 57       	subi	r30, 0x78	; 120
    28f8:	fe 4f       	sbci	r31, 0xFE	; 254
    28fa:	80 81       	ld	r24, Z
    28fc:	8b 83       	std	Y+3, r24	; 0x03
    28fe:	1f c0       	rjmp	.+62     	; 0x293e <Keypad_getkey+0xdc>
{
	for(u8_t COL = 0 ; COL<4 ;COL++)
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);

		for(u8_t ROW = 0 ; ROW<4 ;ROW++)
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	84 30       	cpi	r24, 0x04	; 4
    290a:	28 f2       	brcs	.-118    	; 0x2896 <Keypad_getkey+0x34>
			{
				while(DIO_u8GetBit(KeyPade_PORT ,Key_padRow[ROW])==0);
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	88 2f       	mov	r24, r24
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	fc 01       	movw	r30, r24
    2918:	e0 58       	subi	r30, 0x80	; 128
    291a:	fe 4f       	sbci	r31, 0xFE	; 254
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	98 2f       	mov	r25, r24
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	69 2f       	mov	r22, r25
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>

}

u8_t Keypad_getkey(void)
{
	for(u8_t COL = 0 ; COL<4 ;COL++)
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	8a 83       	std	Y+2, r24	; 0x02
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	84 30       	cpi	r24, 0x04	; 4
    2936:	08 f4       	brcc	.+2      	; 0x293a <Keypad_getkey+0xd8>
    2938:	9c cf       	rjmp	.-200    	; 0x2872 <Keypad_getkey+0x10>
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
	}
	return -1;
    293a:	8f ef       	ldi	r24, 0xFF	; 255
    293c:	8b 83       	std	Y+3, r24	; 0x03
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <Button_Init>:
 */
#include "Button_config.h"
#include "Button_interface.h"
#include "Button_private.h"
void Button_Init(u8_t L_u8ButtonNum)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	00 d0       	rcall	.+0      	; 0x2952 <Button_Init+0x6>
    2952:	0f 92       	push	r0
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	89 83       	std	Y+1, r24	; 0x01
   switch(L_u8ButtonNum)
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	3b 83       	std	Y+3, r19	; 0x03
    2962:	2a 83       	std	Y+2, r18	; 0x02
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	9b 81       	ldd	r25, Y+3	; 0x03
    2968:	81 30       	cpi	r24, 0x01	; 1
    296a:	91 05       	cpc	r25, r1
    296c:	a1 f0       	breq	.+40     	; 0x2996 <Button_Init+0x4a>
    296e:	2a 81       	ldd	r18, Y+2	; 0x02
    2970:	3b 81       	ldd	r19, Y+3	; 0x03
    2972:	22 30       	cpi	r18, 0x02	; 2
    2974:	31 05       	cpc	r19, r1
    2976:	d1 f0       	breq	.+52     	; 0x29ac <Button_Init+0x60>
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	01 f5       	brne	.+64     	; 0x29c0 <Button_Init+0x74>
   {
	case BUTTON1: DIO_u8SetPinDirection(BUTTON1_PORT , BUTTON1_PIN , INPUT);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON1_PORT ,BUTTON1_PIN ,HIGH);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	60 e0       	ldi	r22, 0x00	; 0
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    2994:	15 c0       	rjmp	.+42     	; 0x29c0 <Button_Init+0x74>
	              break ;
	case BUTTON2: DIO_u8SetPinDirection(BUTTON2_PORT , BUTTON2_PIN , INPUT);
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON2_PORT ,BUTTON2_PIN ,HIGH);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	61 e0       	ldi	r22, 0x01	; 1
    29a4:	41 e0       	ldi	r20, 0x01	; 1
    29a6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
    29aa:	0a c0       	rjmp	.+20     	; 0x29c0 <Button_Init+0x74>
	              break;
	case BUTTON3: DIO_u8SetPinDirection(BUTTON3_PORT , BUTTON3_PIN , INPUT);
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	62 e0       	ldi	r22, 0x02	; 2
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DIO_u8SetPinDirection>
	              DIO_u8SetPinValue(BUTTON3_PORT ,BUTTON3_PIN ,HIGH);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	62 e0       	ldi	r22, 0x02	; 2
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_u8SetPinValue>
	              break;
   }
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <Button_u8GetButtonstatus>:

u8_t Button_u8GetButtonstatus(u8_t L_u8ButtonNum)
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <Button_u8GetButtonstatus+0x6>
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <Button_u8GetButtonstatus+0x8>
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	8a 83       	std	Y+2, r24	; 0x02
	u8_t button_vall ;
	switch(L_u8ButtonNum)
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	3c 83       	std	Y+4, r19	; 0x04
    29e2:	2b 83       	std	Y+3, r18	; 0x03
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	91 05       	cpc	r25, r1
    29ec:	79 f0       	breq	.+30     	; 0x2a0c <Button_u8GetButtonstatus+0x40>
    29ee:	2b 81       	ldd	r18, Y+3	; 0x03
    29f0:	3c 81       	ldd	r19, Y+4	; 0x04
    29f2:	22 30       	cpi	r18, 0x02	; 2
    29f4:	31 05       	cpc	r19, r1
    29f6:	81 f0       	breq	.+32     	; 0x2a18 <Button_u8GetButtonstatus+0x4c>
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	9c 81       	ldd	r25, Y+4	; 0x04
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	89 f4       	brne	.+34     	; 0x2a22 <Button_u8GetButtonstatus+0x56>
	{
	case BUTTON1:button_vall = DIO_u8GetBit(BUTTON1_PORT , BUTTON1_PIN); break ;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8GetBit>
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	0b c0       	rjmp	.+22     	; 0x2a22 <Button_u8GetButtonstatus+0x56>
	case BUTTON2:button_vall = DIO_u8GetBit(BUTTON2_PORT , BUTTON2_PIN); break ;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	61 e0       	ldi	r22, 0x01	; 1
    2a10:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8GetBit>
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	05 c0       	rjmp	.+10     	; 0x2a22 <Button_u8GetButtonstatus+0x56>
	case BUTTON3:button_vall = DIO_u8GetBit(BUTTON3_PORT , BUTTON3_PIN); break ;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	62 e0       	ldi	r22, 0x02	; 2
    2a1c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DIO_u8GetBit>
    2a20:	89 83       	std	Y+1, r24	; 0x01
	}
	return button_vall ;
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <Button_voidWaitForButton>:
void Button_voidWaitForButton(u8_t L_u8ButtonNum)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	0f 92       	push	r0
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	89 83       	std	Y+1, r24	; 0x01
     while(1)
     {
   	  if(Button_u8GetButtonstatus(L_u8ButtonNum)==0)
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Button_u8GetButtonstatus>
    2a44:	88 23       	and	r24, r24
    2a46:	d9 f7       	brne	.-10     	; 0x2a3e <Button_voidWaitForButton+0xc>
   	  {
   		 while(Button_u8GetButtonstatus(L_u8ButtonNum)==0);
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Button_u8GetButtonstatus>
    2a4e:	88 23       	and	r24, r24
    2a50:	d9 f3       	breq	.-10     	; 0x2a48 <Button_voidWaitForButton+0x16>
   		 break ;
   	  }
     }
    2a52:	0f 90       	pop	r0
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <main>:




int main()
{
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
	PWM_Init();
    2a62:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <PWM_Init>
	PWM_GeneratePulls(40);
    2a66:	88 e2       	ldi	r24, 0x28	; 40
    2a68:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <PWM_GeneratePulls>
    2a6c:	ff cf       	rjmp	.-2      	; 0x2a6c <main+0x12>

00002a6e <__mulsi3>:
    2a6e:	62 9f       	mul	r22, r18
    2a70:	d0 01       	movw	r26, r0
    2a72:	73 9f       	mul	r23, r19
    2a74:	f0 01       	movw	r30, r0
    2a76:	82 9f       	mul	r24, r18
    2a78:	e0 0d       	add	r30, r0
    2a7a:	f1 1d       	adc	r31, r1
    2a7c:	64 9f       	mul	r22, r20
    2a7e:	e0 0d       	add	r30, r0
    2a80:	f1 1d       	adc	r31, r1
    2a82:	92 9f       	mul	r25, r18
    2a84:	f0 0d       	add	r31, r0
    2a86:	83 9f       	mul	r24, r19
    2a88:	f0 0d       	add	r31, r0
    2a8a:	74 9f       	mul	r23, r20
    2a8c:	f0 0d       	add	r31, r0
    2a8e:	65 9f       	mul	r22, r21
    2a90:	f0 0d       	add	r31, r0
    2a92:	99 27       	eor	r25, r25
    2a94:	72 9f       	mul	r23, r18
    2a96:	b0 0d       	add	r27, r0
    2a98:	e1 1d       	adc	r30, r1
    2a9a:	f9 1f       	adc	r31, r25
    2a9c:	63 9f       	mul	r22, r19
    2a9e:	b0 0d       	add	r27, r0
    2aa0:	e1 1d       	adc	r30, r1
    2aa2:	f9 1f       	adc	r31, r25
    2aa4:	bd 01       	movw	r22, r26
    2aa6:	cf 01       	movw	r24, r30
    2aa8:	11 24       	eor	r1, r1
    2aaa:	08 95       	ret

00002aac <__udivmodsi4>:
    2aac:	a1 e2       	ldi	r26, 0x21	; 33
    2aae:	1a 2e       	mov	r1, r26
    2ab0:	aa 1b       	sub	r26, r26
    2ab2:	bb 1b       	sub	r27, r27
    2ab4:	fd 01       	movw	r30, r26
    2ab6:	0d c0       	rjmp	.+26     	; 0x2ad2 <__udivmodsi4_ep>

00002ab8 <__udivmodsi4_loop>:
    2ab8:	aa 1f       	adc	r26, r26
    2aba:	bb 1f       	adc	r27, r27
    2abc:	ee 1f       	adc	r30, r30
    2abe:	ff 1f       	adc	r31, r31
    2ac0:	a2 17       	cp	r26, r18
    2ac2:	b3 07       	cpc	r27, r19
    2ac4:	e4 07       	cpc	r30, r20
    2ac6:	f5 07       	cpc	r31, r21
    2ac8:	20 f0       	brcs	.+8      	; 0x2ad2 <__udivmodsi4_ep>
    2aca:	a2 1b       	sub	r26, r18
    2acc:	b3 0b       	sbc	r27, r19
    2ace:	e4 0b       	sbc	r30, r20
    2ad0:	f5 0b       	sbc	r31, r21

00002ad2 <__udivmodsi4_ep>:
    2ad2:	66 1f       	adc	r22, r22
    2ad4:	77 1f       	adc	r23, r23
    2ad6:	88 1f       	adc	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	1a 94       	dec	r1
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <__udivmodsi4_loop>
    2ade:	60 95       	com	r22
    2ae0:	70 95       	com	r23
    2ae2:	80 95       	com	r24
    2ae4:	90 95       	com	r25
    2ae6:	9b 01       	movw	r18, r22
    2ae8:	ac 01       	movw	r20, r24
    2aea:	bd 01       	movw	r22, r26
    2aec:	cf 01       	movw	r24, r30
    2aee:	08 95       	ret

00002af0 <__prologue_saves__>:
    2af0:	2f 92       	push	r2
    2af2:	3f 92       	push	r3
    2af4:	4f 92       	push	r4
    2af6:	5f 92       	push	r5
    2af8:	6f 92       	push	r6
    2afa:	7f 92       	push	r7
    2afc:	8f 92       	push	r8
    2afe:	9f 92       	push	r9
    2b00:	af 92       	push	r10
    2b02:	bf 92       	push	r11
    2b04:	cf 92       	push	r12
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	ca 1b       	sub	r28, r26
    2b1a:	db 0b       	sbc	r29, r27
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	09 94       	ijmp

00002b28 <__epilogue_restores__>:
    2b28:	2a 88       	ldd	r2, Y+18	; 0x12
    2b2a:	39 88       	ldd	r3, Y+17	; 0x11
    2b2c:	48 88       	ldd	r4, Y+16	; 0x10
    2b2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b3e:	df 80       	ldd	r13, Y+7	; 0x07
    2b40:	ee 80       	ldd	r14, Y+6	; 0x06
    2b42:	fd 80       	ldd	r15, Y+5	; 0x05
    2b44:	0c 81       	ldd	r16, Y+4	; 0x04
    2b46:	1b 81       	ldd	r17, Y+3	; 0x03
    2b48:	aa 81       	ldd	r26, Y+2	; 0x02
    2b4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b4c:	ce 0f       	add	r28, r30
    2b4e:	d1 1d       	adc	r29, r1
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	ed 01       	movw	r28, r26
    2b5c:	08 95       	ret

00002b5e <itoa>:
    2b5e:	fb 01       	movw	r30, r22
    2b60:	9f 01       	movw	r18, r30
    2b62:	e8 94       	clt
    2b64:	42 30       	cpi	r20, 0x02	; 2
    2b66:	c4 f0       	brlt	.+48     	; 0x2b98 <itoa+0x3a>
    2b68:	45 32       	cpi	r20, 0x25	; 37
    2b6a:	b4 f4       	brge	.+44     	; 0x2b98 <itoa+0x3a>
    2b6c:	4a 30       	cpi	r20, 0x0A	; 10
    2b6e:	29 f4       	brne	.+10     	; 0x2b7a <itoa+0x1c>
    2b70:	97 fb       	bst	r25, 7
    2b72:	1e f4       	brtc	.+6      	; 0x2b7a <itoa+0x1c>
    2b74:	90 95       	com	r25
    2b76:	81 95       	neg	r24
    2b78:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7a:	64 2f       	mov	r22, r20
    2b7c:	77 27       	eor	r23, r23
    2b7e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodhi4>
    2b82:	80 5d       	subi	r24, 0xD0	; 208
    2b84:	8a 33       	cpi	r24, 0x3A	; 58
    2b86:	0c f0       	brlt	.+2      	; 0x2b8a <itoa+0x2c>
    2b88:	89 5d       	subi	r24, 0xD9	; 217
    2b8a:	81 93       	st	Z+, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	a1 f7       	brne	.-24     	; 0x2b7a <itoa+0x1c>
    2b92:	16 f4       	brtc	.+4      	; 0x2b98 <itoa+0x3a>
    2b94:	5d e2       	ldi	r21, 0x2D	; 45
    2b96:	51 93       	st	Z+, r21
    2b98:	10 82       	st	Z, r1
    2b9a:	c9 01       	movw	r24, r18
    2b9c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <strrev>

00002ba0 <strrev>:
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	67 2f       	mov	r22, r23
    2ba6:	71 91       	ld	r23, Z+
    2ba8:	77 23       	and	r23, r23
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <strrev+0x4>
    2bac:	32 97       	sbiw	r30, 0x02	; 2
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <strrev+0x18>
    2bb0:	7c 91       	ld	r23, X
    2bb2:	6d 93       	st	X+, r22
    2bb4:	70 83       	st	Z, r23
    2bb6:	62 91       	ld	r22, -Z
    2bb8:	ae 17       	cp	r26, r30
    2bba:	bf 07       	cpc	r27, r31
    2bbc:	c8 f3       	brcs	.-14     	; 0x2bb0 <strrev+0x10>
    2bbe:	08 95       	ret

00002bc0 <__udivmodhi4>:
    2bc0:	aa 1b       	sub	r26, r26
    2bc2:	bb 1b       	sub	r27, r27
    2bc4:	51 e1       	ldi	r21, 0x11	; 17
    2bc6:	07 c0       	rjmp	.+14     	; 0x2bd6 <__udivmodhi4_ep>

00002bc8 <__udivmodhi4_loop>:
    2bc8:	aa 1f       	adc	r26, r26
    2bca:	bb 1f       	adc	r27, r27
    2bcc:	a6 17       	cp	r26, r22
    2bce:	b7 07       	cpc	r27, r23
    2bd0:	10 f0       	brcs	.+4      	; 0x2bd6 <__udivmodhi4_ep>
    2bd2:	a6 1b       	sub	r26, r22
    2bd4:	b7 0b       	sbc	r27, r23

00002bd6 <__udivmodhi4_ep>:
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	5a 95       	dec	r21
    2bdc:	a9 f7       	brne	.-22     	; 0x2bc8 <__udivmodhi4_loop>
    2bde:	80 95       	com	r24
    2be0:	90 95       	com	r25
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	08 95       	ret

00002be8 <_exit>:
    2be8:	f8 94       	cli

00002bea <__stop_program>:
    2bea:	ff cf       	rjmp	.-2      	; 0x2bea <__stop_program>
